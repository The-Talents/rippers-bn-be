{"version":3,"names":["express","require","db","app","PORT","process","env","use","json","get","req","res","sequelize","authenticate","status","message","error","console","post","firstName","lastName","email","birthOfDate","preferredLanguage","preferredCurrency","whereYouLive","role","department","lineManager","gender","telephoneNumber","body","user","User","create","module","exports"],"sourceRoot":"N:\\Personal Projects\\The Talent\\Barefoot-Nomand_v1\\rippers-bn-be\\src\\","sources":["sample_dbTest.js"],"sourcesContent":["const express = require('express');\r\nconst db = require('../models/index.js'); // Adjust to your Sequelize models path\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3000;\r\napp.use(express.json())\r\n// Route to test database connection\r\napp.get('/test-db', async (req, res) => {\r\n  try {\r\n    await db.sequelize.authenticate();\r\n    res.status(200).json({ message: 'Database connection successful!' });\r\n  } catch (error) {\r\n    console.error('Database connection failed:', error);\r\n    res.status(500).json({ message: 'Database connection failed!', error: error.message });\r\n  }\r\n});\r\n\r\n\r\n// Route to create a new user\r\napp.post('/create-user', async (req, res) => {\r\n  try {\r\n    const { firstName, lastName, email, birthOfDate, preferredLanguage, preferredCurrency, whereYouLive, role, department, lineManager, gender, telephoneNumber } = req.body;\r\n\r\n    // Validate required fields\r\n    if (!firstName || !lastName || !email || !birthOfDate || !gender || !telephoneNumber) {\r\n      return res.status(500).json({ message: 'Missing required fields!' });\r\n    }\r\n\r\n    // Create new user\r\n    const user = await db.User.create({\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      // birthOfDate,\r\n      preferredLanguage,\r\n      preferredCurrency,\r\n      whereYouLive,\r\n      role,\r\n      department,\r\n      lineManager,\r\n      gender,\r\n      telephoneNumber\r\n    });\r\n\r\n    res.status(201).json({ message: 'User created successfully!', user });\r\n  } catch (error) {\r\n    console.error('User creation failed:', error);\r\n    res.status(500).json({ message: 'User creation failed!', error: error.message });\r\n  }\r\n});\r\n\r\nmodule.exports = { app, db };"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,EAAE,GAAGD,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;;AAE1C,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;AACrB,MAAMI,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrCD,GAAG,CAACI,GAAG,CAACP,OAAO,CAACQ,IAAI,CAAC,CAAC,CAAC;AACvB;AACAL,GAAG,CAACM,GAAG,CAAC,UAAU,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACtC,IAAI;IACF,MAAMT,EAAE,CAACU,SAAS,CAACC,YAAY,CAAC,CAAC;IACjCF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAAC;MAAEO,OAAO,EAAE;IAAkC,CAAC,CAAC;EACtE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnDL,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAAC;MAAEO,OAAO,EAAE,6BAA6B;MAAEC,KAAK,EAAEA,KAAK,CAACD;IAAQ,CAAC,CAAC;EACxF;AACF,CAAC,CAAC;;AAGF;AACAZ,GAAG,CAACe,IAAI,CAAC,cAAc,EAAE,OAAOR,GAAG,EAAEC,GAAG,KAAK;EAC3C,IAAI;IACF,MAAM;MAAEQ,SAAS;MAAEC,QAAQ;MAAEC,KAAK;MAAEC,WAAW;MAAEC,iBAAiB;MAAEC,iBAAiB;MAAEC,YAAY;MAAEC,IAAI;MAAEC,UAAU;MAAEC,WAAW;MAAEC,MAAM;MAAEC;IAAgB,CAAC,GAAGpB,GAAG,CAACqB,IAAI;;IAExK;IACA,IAAI,CAACZ,SAAS,IAAI,CAACC,QAAQ,IAAI,CAACC,KAAK,IAAI,CAACC,WAAW,IAAI,CAACO,MAAM,IAAI,CAACC,eAAe,EAAE;MACpF,OAAOnB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAAC;QAAEO,OAAO,EAAE;MAA2B,CAAC,CAAC;IACtE;;IAEA;IACA,MAAMiB,IAAI,GAAG,MAAM9B,EAAE,CAAC+B,IAAI,CAACC,MAAM,CAAC;MAChCf,SAAS;MACTC,QAAQ;MACRC,KAAK;MACL;MACAE,iBAAiB;MACjBC,iBAAiB;MACjBC,YAAY;MACZC,IAAI;MACJC,UAAU;MACVC,WAAW;MACXC,MAAM;MACNC;IACF,CAAC,CAAC;IAEFnB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAAC;MAAEO,OAAO,EAAE,4BAA4B;MAAEiB;IAAK,CAAC,CAAC;EACvE,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CL,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAAC;MAAEO,OAAO,EAAE,uBAAuB;MAAEC,KAAK,EAAEA,KAAK,CAACD;IAAQ,CAAC,CAAC;EAClF;AACF,CAAC,CAAC;AAEFoB,MAAM,CAACC,OAAO,GAAG;EAAEjC,GAAG;EAAED;AAAG,CAAC","ignoreList":[]}