function cov_dv8872sx8(){var path="N:\\Personal Projects\\The Talent\\Barefoot-Nomand_v1\\rippers-bn-be\\src\\sample_dbTest.js";var hash="b342bb1d78c05212e1810e2b15907755d85f0c1c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"N:\\Personal Projects\\The Talent\\Barefoot-Nomand_v1\\rippers-bn-be\\src\\sample_dbTest.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:11},end:{line:2,column:40}},"2":{start:{line:4,column:12},end:{line:4,column:21}},"3":{start:{line:5,column:13},end:{line:5,column:37}},"4":{start:{line:8,column:0},end:{line:21,column:3}},"5":{start:{line:9,column:2},end:{line:20,column:3}},"6":{start:{line:10,column:4},end:{line:10,column:38}},"7":{start:{line:11,column:4},end:{line:13,column:7}},"8":{start:{line:15,column:4},end:{line:15,column:56}},"9":{start:{line:16,column:4},end:{line:19,column:7}},"10":{start:{line:22,column:0},end:{line:25,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:8,column:20},end:{line:8,column:21}},loc:{start:{line:8,column:40},end:{line:21,column:1}},line:8}},branchMap:{"0":{loc:{start:{line:5,column:13},end:{line:5,column:37}},type:"binary-expr",locations:[{start:{line:5,column:13},end:{line:5,column:29}},{start:{line:5,column:33},end:{line:5,column:37}}],line:5}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{"0":0},b:{"0":[0,0]},inputSourceMap:{version:3,names:["express","require","db","app","PORT","process","env","get","req","res","sequelize","authenticate","status","json","message","error","console","module","exports"],sourceRoot:"N:\\Personal Projects\\The Talent\\Barefoot-Nomand_v1\\rippers-bn-be\\src\\",sources:["sample_dbTest.js"],sourcesContent:["const express = require('express');\r\nconst db = require('../models/index.js'); // Adjust to your Sequelize models path\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Route to test database connection\r\napp.get('/test-db', async (req, res) => {\r\n  try {\r\n    await db.sequelize.authenticate();\r\n    res.status(200).json({ message: 'Database connection successful!' });\r\n  } catch (error) {\r\n    console.error('Database connection failed:', error);\r\n    res.status(500).json({ message: 'Database connection failed!', error: error.message });\r\n  }\r\n});\r\n\r\nmodule.exports = { app, db };"],mappings:"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,EAAE,GAAGD,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;;AAE1C,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;AACrB,MAAMI,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;;AAErC;AACAD,GAAG,CAACI,GAAG,CAAC,UAAU,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACtC,IAAI;IACF,MAAMP,EAAE,CAACQ,SAAS,CAACC,YAAY,CAAC,CAAC;IACjCF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAkC,CAAC,CAAC;EACtE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnDN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,6BAA6B;MAAEC,KAAK,EAAEA,KAAK,CAACD;IAAQ,CAAC,CAAC;EACxF;AACF,CAAC,CAAC;AAEFG,MAAM,CAACC,OAAO,GAAG;EAAEf,GAAG;EAAED;AAAG,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b342bb1d78c05212e1810e2b15907755d85f0c1c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_dv8872sx8=function(){return actualCoverage;};}return actualCoverage;}cov_dv8872sx8();const express=(cov_dv8872sx8().s[0]++,require('express'));const db=(cov_dv8872sx8().s[1]++,require('../models/index.js'));// Adjust to your Sequelize models path
const app=(cov_dv8872sx8().s[2]++,express());const PORT=(cov_dv8872sx8().s[3]++,(cov_dv8872sx8().b[0][0]++,process.env.PORT)||(cov_dv8872sx8().b[0][1]++,3000));// Route to test database connection
cov_dv8872sx8().s[4]++;app.get('/test-db',async(req,res)=>{cov_dv8872sx8().f[0]++;cov_dv8872sx8().s[5]++;try{cov_dv8872sx8().s[6]++;await db.sequelize.authenticate();cov_dv8872sx8().s[7]++;res.status(200).json({message:'Database connection successful!'});}catch(error){cov_dv8872sx8().s[8]++;console.error('Database connection failed:',error);cov_dv8872sx8().s[9]++;res.status(500).json({message:'Database connection failed!',error:error.message});}});cov_dv8872sx8().s[10]++;module.exports={app,db};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImRiIiwiYXBwIiwiUE9SVCIsInByb2Nlc3MiLCJlbnYiLCJnZXQiLCJyZXEiLCJyZXMiLCJzZXF1ZWxpemUiLCJhdXRoZW50aWNhdGUiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImVycm9yIiwiY29uc29sZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6Ik46XFxQZXJzb25hbCBQcm9qZWN0c1xcVGhlIFRhbGVudFxcQmFyZWZvb3QtTm9tYW5kX3YxXFxyaXBwZXJzLWJuLWJlXFxzcmNcXCIsInNvdXJjZXMiOlsic2FtcGxlX2RiVGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5jb25zdCBkYiA9IHJlcXVpcmUoJy4uL21vZGVscy9pbmRleC5qcycpOyAvLyBBZGp1c3QgdG8geW91ciBTZXF1ZWxpemUgbW9kZWxzIHBhdGhcclxuXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcclxuXHJcbi8vIFJvdXRlIHRvIHRlc3QgZGF0YWJhc2UgY29ubmVjdGlvblxyXG5hcHAuZ2V0KCcvdGVzdC1kYicsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCBkYi5zZXF1ZWxpemUuYXV0aGVudGljYXRlKCk7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6ICdEYXRhYmFzZSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWwhJyB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQhJywgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0geyBhcHAsIGRiIH07Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDOztBQUUxQyxNQUFNRSxHQUFHLEdBQUdILE9BQU8sQ0FBQyxDQUFDO0FBQ3JCLE1BQU1JLElBQUksR0FBR0MsT0FBTyxDQUFDQyxHQUFHLENBQUNGLElBQUksSUFBSSxJQUFJOztBQUVyQztBQUNBRCxHQUFHLENBQUNJLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBT0MsR0FBRyxFQUFFQyxHQUFHLEtBQUs7RUFDdEMsSUFBSTtJQUNGLE1BQU1QLEVBQUUsQ0FBQ1EsU0FBUyxDQUFDQyxZQUFZLENBQUMsQ0FBQztJQUNqQ0YsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUFFQyxPQUFPLEVBQUU7SUFBa0MsQ0FBQyxDQUFDO0VBQ3RFLENBQUMsQ0FBQyxPQUFPQyxLQUFLLEVBQUU7SUFDZEMsT0FBTyxDQUFDRCxLQUFLLENBQUMsNkJBQTZCLEVBQUVBLEtBQUssQ0FBQztJQUNuRE4sR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUFFQyxPQUFPLEVBQUUsNkJBQTZCO01BQUVDLEtBQUssRUFBRUEsS0FBSyxDQUFDRDtJQUFRLENBQUMsQ0FBQztFQUN4RjtBQUNGLENBQUMsQ0FBQztBQUVGRyxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUFFZixHQUFHO0VBQUVEO0FBQUcsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZHY4ODcyc3g4IiwiYWN0dWFsQ292ZXJhZ2UiLCJleHByZXNzIiwicyIsInJlcXVpcmUiLCJkYiIsImFwcCIsIlBPUlQiLCJiIiwicHJvY2VzcyIsImVudiIsImdldCIsInJlcSIsInJlcyIsImYiLCJzZXF1ZWxpemUiLCJhdXRoZW50aWNhdGUiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImVycm9yIiwiY29uc29sZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJOOlxcUGVyc29uYWwgUHJvamVjdHNcXFRoZSBUYWxlbnRcXEJhcmVmb290LU5vbWFuZF92MVxccmlwcGVycy1ibi1iZVxcc3JjXFwvc2FtcGxlX2RiVGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5jb25zdCBkYiA9IHJlcXVpcmUoJy4uL21vZGVscy9pbmRleC5qcycpOyAvLyBBZGp1c3QgdG8geW91ciBTZXF1ZWxpemUgbW9kZWxzIHBhdGhcclxuXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcclxuXHJcbi8vIFJvdXRlIHRvIHRlc3QgZGF0YWJhc2UgY29ubmVjdGlvblxyXG5hcHAuZ2V0KCcvdGVzdC1kYicsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCBkYi5zZXF1ZWxpemUuYXV0aGVudGljYXRlKCk7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6ICdEYXRhYmFzZSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWwhJyB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQhJywgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0geyBhcHAsIGRiIH07Il0sIm1hcHBpbmdzIjoibXpHQWFRO0FBQUFBLGFBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsYUFBQSxHQWJSLEtBQU0sQ0FBQUUsT0FBTyxFQUFBRixhQUFBLEdBQUFHLENBQUEsTUFBR0MsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUNsQyxLQUFNLENBQUFDLEVBQUUsRUFBQUwsYUFBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO0FBRTFDLEtBQU0sQ0FBQUUsR0FBRyxFQUFBTixhQUFBLEdBQUFHLENBQUEsTUFBR0QsT0FBTyxDQUFDLENBQUMsRUFDckIsS0FBTSxDQUFBSyxJQUFJLEVBQUFQLGFBQUEsR0FBQUcsQ0FBQSxNQUFHLENBQUFILGFBQUEsR0FBQVEsQ0FBQSxTQUFBQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0gsSUFBSSxJQUFBUCxhQUFBLEdBQUFRLENBQUEsU0FBSSxJQUFJLEdBRXJDO0FBQUFSLGFBQUEsR0FBQUcsQ0FBQSxNQUNBRyxHQUFHLENBQUNLLEdBQUcsQ0FBQyxVQUFVLENBQUUsTUFBT0MsR0FBRyxDQUFFQyxHQUFHLEdBQUssQ0FBQWIsYUFBQSxHQUFBYyxDQUFBLE1BQUFkLGFBQUEsR0FBQUcsQ0FBQSxNQUN0QyxHQUFJLENBQUFILGFBQUEsR0FBQUcsQ0FBQSxNQUNGLEtBQU0sQ0FBQUUsRUFBRSxDQUFDVSxTQUFTLENBQUNDLFlBQVksQ0FBQyxDQUFDLENBQUFoQixhQUFBLEdBQUFHLENBQUEsTUFDakNVLEdBQUcsQ0FBQ0ksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBRUMsT0FBTyxDQUFFLGlDQUFrQyxDQUFDLENBQUMsQ0FDdEUsQ0FBRSxNQUFPQyxLQUFLLENBQUUsQ0FBQXBCLGFBQUEsR0FBQUcsQ0FBQSxNQUNka0IsT0FBTyxDQUFDRCxLQUFLLENBQUMsNkJBQTZCLENBQUVBLEtBQUssQ0FBQyxDQUFBcEIsYUFBQSxHQUFBRyxDQUFBLE1BQ25EVSxHQUFHLENBQUNJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUVDLE9BQU8sQ0FBRSw2QkFBNkIsQ0FBRUMsS0FBSyxDQUFFQSxLQUFLLENBQUNELE9BQVEsQ0FBQyxDQUFDLENBQ3hGLENBQ0YsQ0FBQyxDQUFDLENBQUFuQixhQUFBLEdBQUFHLENBQUEsT0FFRm1CLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHLENBQUVqQixHQUFHLENBQUVELEVBQUcsQ0FBQyxDIiwiaWdub3JlTGlzdCI6W119