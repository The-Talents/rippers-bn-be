'use strict';function cov_1n5m35o1o7(){var path="N:\\Personal Projects\\work-projects\\eric-nomad\\models\\feedback.js";var hash="6caaada1dcccabbaaba0521abc0a8ec20d51aeac";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"N:\\Personal Projects\\work-projects\\eric-nomad\\models\\feedback.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:32,column:2}},"2":{start:{line:15,column:6},end:{line:19,column:9}},"3":{start:{line:22,column:2},end:{line:30,column:5}},"4":{start:{line:31,column:2},end:{line:31,column:18}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:32,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:20,column:5}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","Feedback","associate","models","belongsTo","User","foreignKey","onDelete","onUpdate","init","userId","INTEGER","facility","STRING","like","BOOLEAN","comment","TEXT","modelName"],sourceRoot:"N:\\Personal Projects\\work-projects\\eric-nomad\\models\\",sources:["feedback.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class Feedback extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // Define association here\r\n      Feedback.belongsTo(models.User, {\r\n        foreignKey: 'userId',\r\n        onDelete: 'CASCADE',\r\n        onUpdate: 'CASCADE',\r\n      });\r\n    }\r\n  }\r\n  Feedback.init({\r\n    userId: DataTypes.INTEGER,\r\n    facility: DataTypes.STRING,\r\n    like: DataTypes.BOOLEAN,\r\n    comment: DataTypes.TEXT\r\n  }, {\r\n    sequelize,\r\n    modelName: 'Feedback',\r\n  });\r\n\r\n  \r\n\r\n  return Feedback;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,QAAQ,SAASN,KAAK,CAAC;IAC3B;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;MACAF,QAAQ,CAACG,SAAS,CAACD,MAAM,CAACE,IAAI,EAAE;QAC9BC,UAAU,EAAE,QAAQ;QACpBC,QAAQ,EAAE,SAAS;QACnBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF;EACAP,QAAQ,CAACQ,IAAI,CAAC;IACZC,MAAM,EAAEV,SAAS,CAACW,OAAO;IACzBC,QAAQ,EAAEZ,SAAS,CAACa,MAAM;IAC1BC,IAAI,EAAEd,SAAS,CAACe,OAAO;IACvBC,OAAO,EAAEhB,SAAS,CAACiB;EACrB,CAAC,EAAE;IACDlB,SAAS;IACTmB,SAAS,EAAE;EACb,CAAC,CAAC;EAIF,OAAOjB,QAAQ;AACjB,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6caaada1dcccabbaaba0521abc0a8ec20d51aeac"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1n5m35o1o7=function(){return actualCoverage;};}return actualCoverage;}cov_1n5m35o1o7();const{Model}=(cov_1n5m35o1o7().s[0]++,require('sequelize'));cov_1n5m35o1o7().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_1n5m35o1o7().f[0]++;class Feedback extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_1n5m35o1o7().f[1]++;cov_1n5m35o1o7().s[2]++;// Define association here
Feedback.belongsTo(models.User,{foreignKey:'userId',onDelete:'CASCADE',onUpdate:'CASCADE'});}}cov_1n5m35o1o7().s[3]++;Feedback.init({userId:DataTypes.INTEGER,facility:DataTypes.STRING,like:DataTypes.BOOLEAN,comment:DataTypes.TEXT},{sequelize,modelName:'Feedback'});cov_1n5m35o1o7().s[4]++;return Feedback;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiRmVlZGJhY2siLCJhc3NvY2lhdGUiLCJtb2RlbHMiLCJiZWxvbmdzVG8iLCJVc2VyIiwiZm9yZWlnbktleSIsIm9uRGVsZXRlIiwib25VcGRhdGUiLCJpbml0IiwidXNlcklkIiwiSU5URUdFUiIsImZhY2lsaXR5IiwiU1RSSU5HIiwibGlrZSIsIkJPT0xFQU4iLCJjb21tZW50IiwiVEVYVCIsIm1vZGVsTmFtZSJdLCJzb3VyY2VSb290IjoiTjpcXFBlcnNvbmFsIFByb2plY3RzXFx3b3JrLXByb2plY3RzXFxlcmljLW5vbWFkXFxtb2RlbHNcXCIsInNvdXJjZXMiOlsiZmVlZGJhY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5jb25zdCB7XHJcbiAgTW9kZWxcclxufSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IChzZXF1ZWxpemUsIERhdGFUeXBlcykgPT4ge1xyXG4gIGNsYXNzIEZlZWRiYWNrIGV4dGVuZHMgTW9kZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciBkZWZpbmluZyBhc3NvY2lhdGlvbnMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXHJcbiAgICAgKiBUaGUgYG1vZGVscy9pbmRleGAgZmlsZSB3aWxsIGNhbGwgdGhpcyBtZXRob2QgYXV0b21hdGljYWxseS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFzc29jaWF0ZShtb2RlbHMpIHtcclxuICAgICAgLy8gRGVmaW5lIGFzc29jaWF0aW9uIGhlcmVcclxuICAgICAgRmVlZGJhY2suYmVsb25nc1RvKG1vZGVscy5Vc2VyLCB7XHJcbiAgICAgICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgICAgICAgb25EZWxldGU6ICdDQVNDQURFJyxcclxuICAgICAgICBvblVwZGF0ZTogJ0NBU0NBREUnLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgRmVlZGJhY2suaW5pdCh7XHJcbiAgICB1c2VySWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgZmFjaWxpdHk6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBsaWtlOiBEYXRhVHlwZXMuQk9PTEVBTixcclxuICAgIGNvbW1lbnQ6IERhdGFUeXBlcy5URVhUXHJcbiAgfSwge1xyXG4gICAgc2VxdWVsaXplLFxyXG4gICAgbW9kZWxOYW1lOiAnRmVlZGJhY2snLFxyXG4gIH0pO1xyXG5cclxuICBcclxuXHJcbiAgcmV0dXJuIEZlZWRiYWNrO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWixNQUFNO0VBQ0pBO0FBQ0YsQ0FBQyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3hCQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxTQUFTLEVBQUVDLFNBQVMsS0FBSztFQUN6QyxNQUFNQyxRQUFRLFNBQVNOLEtBQUssQ0FBQztJQUMzQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksT0FBT08sU0FBU0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ3ZCO01BQ0FGLFFBQVEsQ0FBQ0csU0FBUyxDQUFDRCxNQUFNLENBQUNFLElBQUksRUFBRTtRQUM5QkMsVUFBVSxFQUFFLFFBQVE7UUFDcEJDLFFBQVEsRUFBRSxTQUFTO1FBQ25CQyxRQUFRLEVBQUU7TUFDWixDQUFDLENBQUM7SUFDSjtFQUNGO0VBQ0FQLFFBQVEsQ0FBQ1EsSUFBSSxDQUFDO0lBQ1pDLE1BQU0sRUFBRVYsU0FBUyxDQUFDVyxPQUFPO0lBQ3pCQyxRQUFRLEVBQUVaLFNBQVMsQ0FBQ2EsTUFBTTtJQUMxQkMsSUFBSSxFQUFFZCxTQUFTLENBQUNlLE9BQU87SUFDdkJDLE9BQU8sRUFBRWhCLFNBQVMsQ0FBQ2lCO0VBQ3JCLENBQUMsRUFBRTtJQUNEbEIsU0FBUztJQUNUbUIsU0FBUyxFQUFFO0VBQ2IsQ0FBQyxDQUFDO0VBSUYsT0FBT2pCLFFBQVE7QUFDakIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMW41bTM1bzFvNyIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwibmFtZXMiLCJzb3VyY2VSb290Iiwic291cmNlcyIsInNvdXJjZXNDb250ZW50IiwibWFwcGluZ3MiLCJpZ25vcmVMaXN0IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJGZWVkYmFjayIsImFzc29jaWF0ZSIsIm1vZGVscyIsImJlbG9uZ3NUbyIsIlVzZXIiLCJmb3JlaWduS2V5Iiwib25EZWxldGUiLCJvblVwZGF0ZSIsImluaXQiLCJ1c2VySWQiLCJJTlRFR0VSIiwiZmFjaWxpdHkiLCJTVFJJTkciLCJsaWtlIiwiQk9PTEVBTiIsImNvbW1lbnQiLCJURVhUIiwibW9kZWxOYW1lIl0sInNvdXJjZXMiOlsiTjpcXFBlcnNvbmFsIFByb2plY3RzXFx3b3JrLXByb2plY3RzXFxlcmljLW5vbWFkXFxtb2RlbHNcXC9mZWVkYmFjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNvbnN0IHtcclxuICBNb2RlbFxyXG59ID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgRmVlZGJhY2sgZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgU2VxdWVsaXplIGxpZmVjeWNsZS5cclxuICAgICAqIFRoZSBgbW9kZWxzL2luZGV4YCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBEZWZpbmUgYXNzb2NpYXRpb24gaGVyZVxyXG4gICAgICBGZWVkYmFjay5iZWxvbmdzVG8obW9kZWxzLlVzZXIsIHtcclxuICAgICAgICBmb3JlaWduS2V5OiAndXNlcklkJyxcclxuICAgICAgICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gICAgICAgIG9uVXBkYXRlOiAnQ0FTQ0FERScsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBGZWVkYmFjay5pbml0KHtcclxuICAgIHVzZXJJZDogRGF0YVR5cGVzLklOVEVHRVIsXHJcbiAgICBmYWNpbGl0eTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGxpa2U6IERhdGFUeXBlcy5CT09MRUFOLFxyXG4gICAgY29tbWVudDogRGF0YVR5cGVzLlRFWFRcclxuICB9LCB7XHJcbiAgICBzZXF1ZWxpemUsXHJcbiAgICBtb2RlbE5hbWU6ICdGZWVkYmFjaycsXHJcbiAgfSk7XHJcblxyXG4gIFxyXG5cclxuICByZXR1cm4gRmVlZGJhY2s7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLFVBQUFBLGVBQUEsTUFBQUMsSUFBQSw2RUFBQUMsSUFBQSxnREFBQUMsTUFBQSxLQUFBQyxRQUFBLHNCQUFBQyxHQUFBLG9CQUFBQyxZQUFBLEVBQUFMLElBQUEseUVBQUFNLFlBQUEsT0FBQUMsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEdBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsT0FBQUUsS0FBQSxPQUFBQyxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLE1BQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxTQUFBSSxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxNQUFBTyxTQUFBLElBQUFDLENBQUEsaUNBQUFDLENBQUEsZUFBQUMsQ0FBQSxJQUFBQyxjQUFBLEVBQUFDLE9BQUEsR0FBQUMsS0FBQSxrUEFBQUMsVUFBQSw4REFBQUMsT0FBQSxpQkFBQUMsY0FBQSwyMUJBQUFDLFFBQUEseWxCQUFBQyxVQUFBLEtBQUFDLGVBQUEsNENBQUExQixJQUFBLGlEQUFBMkIsUUFBQSxDQUFBMUIsTUFBQSxDQUFBRSxHQUFBLElBQUFGLE1BQUEsQ0FBQUUsR0FBQSxVQUFBd0IsUUFBQSxDQUFBNUIsSUFBQSxHQUFBNEIsUUFBQSxDQUFBNUIsSUFBQSxFQUFBQyxJQUFBLEdBQUFBLElBQUEsRUFBQTJCLFFBQUEsQ0FBQTVCLElBQUEsRUFBQUssWUFBQSxNQUFBd0IsY0FBQSxDQUFBRCxRQUFBLENBQUE1QixJQUFBLEdBY0o7QUFBQUQsY0FBQSxTQUFBQSxDQUFBLFNBQUE4QixjQUFBLFdBQUFBLGNBQUEsRUFBQTlCLGNBQUEsR0FiUixLQUFNLENBQ0orQixLQUNGLENBQUMsRUFBQS9CLGNBQUEsR0FBQWlCLENBQUEsTUFBR2UsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFBaEMsY0FBQSxHQUFBaUIsQ0FBQSxNQUN4QmdCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHLENBQUNDLFNBQVMsQ0FBRUMsU0FBUyxHQUFLLENBQUFwQyxjQUFBLEdBQUFrQixDQUFBLE1BQ3pDLEtBQU0sQ0FBQW1CLFFBQVEsUUFBUyxDQUFBTixLQUFNLENBQzNCO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FDSSxNQUFPLENBQUFPLFNBQVNBLENBQUNDLE1BQU0sQ0FBRSxDQUFBdkMsY0FBQSxHQUFBa0IsQ0FBQSxNQUFBbEIsY0FBQSxHQUFBaUIsQ0FBQSxNQUN2QjtBQUNBb0IsUUFBUSxDQUFDRyxTQUFTLENBQUNELE1BQU0sQ0FBQ0UsSUFBSSxDQUFFLENBQzlCQyxVQUFVLENBQUUsUUFBUSxDQUNwQkMsUUFBUSxDQUFFLFNBQVMsQ0FDbkJDLFFBQVEsQ0FBRSxTQUNaLENBQUMsQ0FBQyxDQUNKLENBQ0YsQ0FBQTVDLGNBQUEsR0FBQWlCLENBQUEsTUFDQW9CLFFBQVEsQ0FBQ1EsSUFBSSxDQUFDLENBQ1pDLE1BQU0sQ0FBRVYsU0FBUyxDQUFDVyxPQUFPLENBQ3pCQyxRQUFRLENBQUVaLFNBQVMsQ0FBQ2EsTUFBTSxDQUMxQkMsSUFBSSxDQUFFZCxTQUFTLENBQUNlLE9BQU8sQ0FDdkJDLE9BQU8sQ0FBRWhCLFNBQVMsQ0FBQ2lCLElBQ3JCLENBQUMsQ0FBRSxDQUNEbEIsU0FBUyxDQUNUbUIsU0FBUyxDQUFFLFVBQ2IsQ0FBQyxDQUFDLENBQUF0RCxjQUFBLEdBQUFpQixDQUFBLE1BSUYsTUFBTyxDQUFBb0IsUUFBUSxDQUNqQixDQUFDLEMiLCJpZ25vcmVMaXN0IjpbXX0=