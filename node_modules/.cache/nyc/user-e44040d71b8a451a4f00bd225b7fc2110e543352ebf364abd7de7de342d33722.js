'use strict';function cov_2332rbixri(){var path="N:\\Personal Projects\\The Talent\\Barefoot-Nomand_v1\\rippers-bn-be\\models\\user.js";var hash="7fd54f6bc41854eda41e233b91c1a55594cdec28";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"N:\\Personal Projects\\The Talent\\Barefoot-Nomand_v1\\rippers-bn-be\\models\\user.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:60,column:2}},"2":{start:{line:15,column:6},end:{line:18,column:9}},"3":{start:{line:19,column:6},end:{line:23,column:9}},"4":{start:{line:26,column:2},end:{line:43,column:5}},"5":{start:{line:59,column:2},end:{line:59,column:14}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:60,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:24,column:5}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","User","associate","models","hasMany","Trip","foreignKey","as","Feedback","onDelete","onUpdate","init","firstName","STRING","lastName","password","email","birthOfDate","DATEONLY","preferredLanguage","preferredCurrency","whereYouLive","role","department","lineManager","gender","telephoneNumber","modelName"],sourceRoot:"N:\\Personal Projects\\The Talent\\Barefoot-Nomand_v1\\rippers-bn-be\\models\\",sources:["user.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class User extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // Define associations here\r\n      User.hasMany(models.Trip, {\r\n        foreignKey: \"userId\",\r\n        as: \"trips\",\r\n      });\r\n\r\n      User.hasMany(models.Feedback, {\r\n        foreignKey: 'userId',\r\n        onDelete: 'CASCADE',\r\n        onUpdate: 'CASCADE',\r\n      });\r\n    }\r\n  }\r\n  User.init({\r\n    firstName: DataTypes.STRING,\r\n    lastName: DataTypes.STRING,\r\n    password: DataTypes.STRING,\r\n    email: DataTypes.STRING,\r\n    birthOfDate: DataTypes.DATEONLY,\r\n    preferredLanguage: DataTypes.STRING,\r\n    preferredCurrency: DataTypes.STRING,\r\n    whereYouLive: DataTypes.STRING,\r\n    role: DataTypes.STRING,\r\n    department: DataTypes.STRING,\r\n    lineManager: DataTypes.STRING,\r\n    gender: DataTypes.STRING,\r\n    telephoneNumber: DataTypes.STRING\r\n  }, {\r\n    sequelize,\r\n    modelName: 'User',\r\n  });\r\n  \r\n  // User.associate = (models) => {\r\n  //   // Existing associations\r\n  //   User.hasMany(models.Trip, {\r\n  //     foreignKey: \"userId\",\r\n  //     as: \"trips\",\r\n  //   });\r\n  // };\r\n\r\n  // User.hasMany(models.Feedback, {\r\n  //   foreignKey: 'userId',\r\n  //   onDelete: 'CASCADE',\r\n  //   onUpdate: 'CASCADE',\r\n  // });\r\n\r\n  return User;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,IAAI,SAASN,KAAK,CAAC;IACvB;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;MACAF,IAAI,CAACG,OAAO,CAACD,MAAM,CAACE,IAAI,EAAE;QACxBC,UAAU,EAAE,QAAQ;QACpBC,EAAE,EAAE;MACN,CAAC,CAAC;MAEFN,IAAI,CAACG,OAAO,CAACD,MAAM,CAACK,QAAQ,EAAE;QAC5BF,UAAU,EAAE,QAAQ;QACpBG,QAAQ,EAAE,SAAS;QACnBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF;EACAT,IAAI,CAACU,IAAI,CAAC;IACRC,SAAS,EAAEZ,SAAS,CAACa,MAAM;IAC3BC,QAAQ,EAAEd,SAAS,CAACa,MAAM;IAC1BE,QAAQ,EAAEf,SAAS,CAACa,MAAM;IAC1BG,KAAK,EAAEhB,SAAS,CAACa,MAAM;IACvBI,WAAW,EAAEjB,SAAS,CAACkB,QAAQ;IAC/BC,iBAAiB,EAAEnB,SAAS,CAACa,MAAM;IACnCO,iBAAiB,EAAEpB,SAAS,CAACa,MAAM;IACnCQ,YAAY,EAAErB,SAAS,CAACa,MAAM;IAC9BS,IAAI,EAAEtB,SAAS,CAACa,MAAM;IACtBU,UAAU,EAAEvB,SAAS,CAACa,MAAM;IAC5BW,WAAW,EAAExB,SAAS,CAACa,MAAM;IAC7BY,MAAM,EAAEzB,SAAS,CAACa,MAAM;IACxBa,eAAe,EAAE1B,SAAS,CAACa;EAC7B,CAAC,EAAE;IACDd,SAAS;IACT4B,SAAS,EAAE;EACb,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,OAAO1B,IAAI;AACb,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7fd54f6bc41854eda41e233b91c1a55594cdec28"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2332rbixri=function(){return actualCoverage;};}return actualCoverage;}cov_2332rbixri();const{Model}=(cov_2332rbixri().s[0]++,require('sequelize'));cov_2332rbixri().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_2332rbixri().f[0]++;class User extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_2332rbixri().f[1]++;cov_2332rbixri().s[2]++;// Define associations here
User.hasMany(models.Trip,{foreignKey:"userId",as:"trips"});cov_2332rbixri().s[3]++;User.hasMany(models.Feedback,{foreignKey:'userId',onDelete:'CASCADE',onUpdate:'CASCADE'});}}cov_2332rbixri().s[4]++;User.init({firstName:DataTypes.STRING,lastName:DataTypes.STRING,password:DataTypes.STRING,email:DataTypes.STRING,birthOfDate:DataTypes.DATEONLY,preferredLanguage:DataTypes.STRING,preferredCurrency:DataTypes.STRING,whereYouLive:DataTypes.STRING,role:DataTypes.STRING,department:DataTypes.STRING,lineManager:DataTypes.STRING,gender:DataTypes.STRING,telephoneNumber:DataTypes.STRING},{sequelize,modelName:'User'});// User.associate = (models) => {
//   // Existing associations
//   User.hasMany(models.Trip, {
//     foreignKey: "userId",
//     as: "trips",
//   });
// };
// User.hasMany(models.Feedback, {
//   foreignKey: 'userId',
//   onDelete: 'CASCADE',
//   onUpdate: 'CASCADE',
// });
cov_2332rbixri().s[5]++;return User;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiVXNlciIsImFzc29jaWF0ZSIsIm1vZGVscyIsImhhc01hbnkiLCJUcmlwIiwiZm9yZWlnbktleSIsImFzIiwiRmVlZGJhY2siLCJvbkRlbGV0ZSIsIm9uVXBkYXRlIiwiaW5pdCIsImZpcnN0TmFtZSIsIlNUUklORyIsImxhc3ROYW1lIiwicGFzc3dvcmQiLCJlbWFpbCIsImJpcnRoT2ZEYXRlIiwiREFURU9OTFkiLCJwcmVmZXJyZWRMYW5ndWFnZSIsInByZWZlcnJlZEN1cnJlbmN5Iiwid2hlcmVZb3VMaXZlIiwicm9sZSIsImRlcGFydG1lbnQiLCJsaW5lTWFuYWdlciIsImdlbmRlciIsInRlbGVwaG9uZU51bWJlciIsIm1vZGVsTmFtZSJdLCJzb3VyY2VSb290IjoiTjpcXFBlcnNvbmFsIFByb2plY3RzXFxUaGUgVGFsZW50XFxCYXJlZm9vdC1Ob21hbmRfdjFcXHJpcHBlcnMtYm4tYmVcXG1vZGVsc1xcIiwic291cmNlcyI6WyJ1c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuY29uc3Qge1xyXG4gIE1vZGVsXHJcbn0gPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSAoc2VxdWVsaXplLCBEYXRhVHlwZXMpID0+IHtcclxuICBjbGFzcyBVc2VyIGV4dGVuZHMgTW9kZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciBkZWZpbmluZyBhc3NvY2lhdGlvbnMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXHJcbiAgICAgKiBUaGUgYG1vZGVscy9pbmRleGAgZmlsZSB3aWxsIGNhbGwgdGhpcyBtZXRob2QgYXV0b21hdGljYWxseS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFzc29jaWF0ZShtb2RlbHMpIHtcclxuICAgICAgLy8gRGVmaW5lIGFzc29jaWF0aW9ucyBoZXJlXHJcbiAgICAgIFVzZXIuaGFzTWFueShtb2RlbHMuVHJpcCwge1xyXG4gICAgICAgIGZvcmVpZ25LZXk6IFwidXNlcklkXCIsXHJcbiAgICAgICAgYXM6IFwidHJpcHNcIixcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBVc2VyLmhhc01hbnkobW9kZWxzLkZlZWRiYWNrLCB7XHJcbiAgICAgICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgICAgICAgb25EZWxldGU6ICdDQVNDQURFJyxcclxuICAgICAgICBvblVwZGF0ZTogJ0NBU0NBREUnLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgVXNlci5pbml0KHtcclxuICAgIGZpcnN0TmFtZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGxhc3ROYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgcGFzc3dvcmQ6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBlbWFpbDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGJpcnRoT2ZEYXRlOiBEYXRhVHlwZXMuREFURU9OTFksXHJcbiAgICBwcmVmZXJyZWRMYW5ndWFnZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHByZWZlcnJlZEN1cnJlbmN5OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgd2hlcmVZb3VMaXZlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgcm9sZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGRlcGFydG1lbnQ6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBsaW5lTWFuYWdlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGdlbmRlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHRlbGVwaG9uZU51bWJlcjogRGF0YVR5cGVzLlNUUklOR1xyXG4gIH0sIHtcclxuICAgIHNlcXVlbGl6ZSxcclxuICAgIG1vZGVsTmFtZTogJ1VzZXInLFxyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIFVzZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xyXG4gIC8vICAgLy8gRXhpc3RpbmcgYXNzb2NpYXRpb25zXHJcbiAgLy8gICBVc2VyLmhhc01hbnkobW9kZWxzLlRyaXAsIHtcclxuICAvLyAgICAgZm9yZWlnbktleTogXCJ1c2VySWRcIixcclxuICAvLyAgICAgYXM6IFwidHJpcHNcIixcclxuICAvLyAgIH0pO1xyXG4gIC8vIH07XHJcblxyXG4gIC8vIFVzZXIuaGFzTWFueShtb2RlbHMuRmVlZGJhY2ssIHtcclxuICAvLyAgIGZvcmVpZ25LZXk6ICd1c2VySWQnLFxyXG4gIC8vICAgb25EZWxldGU6ICdDQVNDQURFJyxcclxuICAvLyAgIG9uVXBkYXRlOiAnQ0FTQ0FERScsXHJcbiAgLy8gfSk7XHJcblxyXG4gIHJldHVybiBVc2VyO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWixNQUFNO0VBQ0pBO0FBQ0YsQ0FBQyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3hCQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxTQUFTLEVBQUVDLFNBQVMsS0FBSztFQUN6QyxNQUFNQyxJQUFJLFNBQVNOLEtBQUssQ0FBQztJQUN2QjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksT0FBT08sU0FBU0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ3ZCO01BQ0FGLElBQUksQ0FBQ0csT0FBTyxDQUFDRCxNQUFNLENBQUNFLElBQUksRUFBRTtRQUN4QkMsVUFBVSxFQUFFLFFBQVE7UUFDcEJDLEVBQUUsRUFBRTtNQUNOLENBQUMsQ0FBQztNQUVGTixJQUFJLENBQUNHLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDSyxRQUFRLEVBQUU7UUFDNUJGLFVBQVUsRUFBRSxRQUFRO1FBQ3BCRyxRQUFRLEVBQUUsU0FBUztRQUNuQkMsUUFBUSxFQUFFO01BQ1osQ0FBQyxDQUFDO0lBQ0o7RUFDRjtFQUNBVCxJQUFJLENBQUNVLElBQUksQ0FBQztJQUNSQyxTQUFTLEVBQUVaLFNBQVMsQ0FBQ2EsTUFBTTtJQUMzQkMsUUFBUSxFQUFFZCxTQUFTLENBQUNhLE1BQU07SUFDMUJFLFFBQVEsRUFBRWYsU0FBUyxDQUFDYSxNQUFNO0lBQzFCRyxLQUFLLEVBQUVoQixTQUFTLENBQUNhLE1BQU07SUFDdkJJLFdBQVcsRUFBRWpCLFNBQVMsQ0FBQ2tCLFFBQVE7SUFDL0JDLGlCQUFpQixFQUFFbkIsU0FBUyxDQUFDYSxNQUFNO0lBQ25DTyxpQkFBaUIsRUFBRXBCLFNBQVMsQ0FBQ2EsTUFBTTtJQUNuQ1EsWUFBWSxFQUFFckIsU0FBUyxDQUFDYSxNQUFNO0lBQzlCUyxJQUFJLEVBQUV0QixTQUFTLENBQUNhLE1BQU07SUFDdEJVLFVBQVUsRUFBRXZCLFNBQVMsQ0FBQ2EsTUFBTTtJQUM1QlcsV0FBVyxFQUFFeEIsU0FBUyxDQUFDYSxNQUFNO0lBQzdCWSxNQUFNLEVBQUV6QixTQUFTLENBQUNhLE1BQU07SUFDeEJhLGVBQWUsRUFBRTFCLFNBQVMsQ0FBQ2E7RUFDN0IsQ0FBQyxFQUFFO0lBQ0RkLFNBQVM7SUFDVDRCLFNBQVMsRUFBRTtFQUNiLENBQUMsQ0FBQzs7RUFFRjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBLE9BQU8xQixJQUFJO0FBQ2IsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjMzMnJiaXhyaSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwibmFtZXMiLCJzb3VyY2VSb290Iiwic291cmNlcyIsInNvdXJjZXNDb250ZW50IiwibWFwcGluZ3MiLCJpZ25vcmVMaXN0IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJVc2VyIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiaGFzTWFueSIsIlRyaXAiLCJmb3JlaWduS2V5IiwiYXMiLCJGZWVkYmFjayIsIm9uRGVsZXRlIiwib25VcGRhdGUiLCJpbml0IiwiZmlyc3ROYW1lIiwiU1RSSU5HIiwibGFzdE5hbWUiLCJwYXNzd29yZCIsImVtYWlsIiwiYmlydGhPZkRhdGUiLCJEQVRFT05MWSIsInByZWZlcnJlZExhbmd1YWdlIiwicHJlZmVycmVkQ3VycmVuY3kiLCJ3aGVyZVlvdUxpdmUiLCJyb2xlIiwiZGVwYXJ0bWVudCIsImxpbmVNYW5hZ2VyIiwiZ2VuZGVyIiwidGVsZXBob25lTnVtYmVyIiwibW9kZWxOYW1lIl0sInNvdXJjZXMiOlsiTjpcXFBlcnNvbmFsIFByb2plY3RzXFxUaGUgVGFsZW50XFxCYXJlZm9vdC1Ob21hbmRfdjFcXHJpcHBlcnMtYm4tYmVcXG1vZGVsc1xcL3VzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5jb25zdCB7XHJcbiAgTW9kZWxcclxufSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IChzZXF1ZWxpemUsIERhdGFUeXBlcykgPT4ge1xyXG4gIGNsYXNzIFVzZXIgZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgU2VxdWVsaXplIGxpZmVjeWNsZS5cclxuICAgICAqIFRoZSBgbW9kZWxzL2luZGV4YCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBEZWZpbmUgYXNzb2NpYXRpb25zIGhlcmVcclxuICAgICAgVXNlci5oYXNNYW55KG1vZGVscy5UcmlwLCB7XHJcbiAgICAgICAgZm9yZWlnbktleTogXCJ1c2VySWRcIixcclxuICAgICAgICBhczogXCJ0cmlwc1wiLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIFVzZXIuaGFzTWFueShtb2RlbHMuRmVlZGJhY2ssIHtcclxuICAgICAgICBmb3JlaWduS2V5OiAndXNlcklkJyxcclxuICAgICAgICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gICAgICAgIG9uVXBkYXRlOiAnQ0FTQ0FERScsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBVc2VyLmluaXQoe1xyXG4gICAgZmlyc3ROYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgbGFzdE5hbWU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBwYXNzd29yZDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGVtYWlsOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgYmlydGhPZkRhdGU6IERhdGFUeXBlcy5EQVRFT05MWSxcclxuICAgIHByZWZlcnJlZExhbmd1YWdlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgcHJlZmVycmVkQ3VycmVuY3k6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICB3aGVyZVlvdUxpdmU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICByb2xlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZGVwYXJ0bWVudDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGxpbmVNYW5hZ2VyOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZ2VuZGVyOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgdGVsZXBob25lTnVtYmVyOiBEYXRhVHlwZXMuU1RSSU5HXHJcbiAgfSwge1xyXG4gICAgc2VxdWVsaXplLFxyXG4gICAgbW9kZWxOYW1lOiAnVXNlcicsXHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8gVXNlci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XHJcbiAgLy8gICAvLyBFeGlzdGluZyBhc3NvY2lhdGlvbnNcclxuICAvLyAgIFVzZXIuaGFzTWFueShtb2RlbHMuVHJpcCwge1xyXG4gIC8vICAgICBmb3JlaWduS2V5OiBcInVzZXJJZFwiLFxyXG4gIC8vICAgICBhczogXCJ0cmlwc1wiLFxyXG4gIC8vICAgfSk7XHJcbiAgLy8gfTtcclxuXHJcbiAgLy8gVXNlci5oYXNNYW55KG1vZGVscy5GZWVkYmFjaywge1xyXG4gIC8vICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgLy8gICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gIC8vICAgb25VcGRhdGU6ICdDQVNDQURFJyxcclxuICAvLyB9KTtcclxuXHJcbiAgcmV0dXJuIFVzZXI7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLFVBQUFBLGVBQUEsTUFBQUMsSUFBQSw2RkFBQUMsSUFBQSxnREFBQUMsTUFBQSxLQUFBQyxRQUFBLHNCQUFBQyxHQUFBLG9CQUFBQyxZQUFBLEVBQUFMLElBQUEseUZBQUFNLFlBQUEsT0FBQUMsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEdBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1B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