function cov_1xw766lxzq(){var path="D:\\rippers\\rippers-bn-be\\src\\controllers\\authController.js";var hash="0da015536afaa1035bbb3859b95ae8cd91e18643";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\rippers\\rippers-bn-be\\src\\controllers\\authController.js",statementMap:{"0":{start:{line:3,column:4},end:{line:3,column:38}},"1":{start:{line:4,column:30},end:{line:30,column:1}},"2":{start:{line:7,column:6},end:{line:7,column:15}},"3":{start:{line:9,column:2},end:{line:14,column:3}},"4":{start:{line:10,column:4},end:{line:13,column:7}},"5":{start:{line:15,column:2},end:{line:29,column:3}},"6":{start:{line:16,column:21},end:{line:16,column:45}},"7":{start:{line:18,column:4},end:{line:22,column:7}},"8":{start:{line:24,column:4},end:{line:24,column:25}},"9":{start:{line:25,column:4},end:{line:28,column:7}},"10":{start:{line:31,column:0},end:{line:33,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:30},end:{line:4,column:31}},loc:{start:{line:4,column:50},end:{line:30,column:1}},line:4}},branchMap:{"0":{loc:{start:{line:9,column:2},end:{line:14,column:3}},type:"if",locations:[{start:{line:9,column:2},end:{line:14,column:3}},{start:{line:9,column:2},end:{line:14,column:3}}],line:9},"1":{loc:{start:{line:27,column:15},end:{line:27,column:54}},type:"binary-expr",locations:[{start:{line:27,column:15},end:{line:27,column:28}},{start:{line:27,column:32},end:{line:27,column:54}}],line:27}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,names:["googleLogin","require","googleLoginController","req","res","token","query","status","json","message","userData","data","error","console","module","exports"],sourceRoot:"D:\\rippers\\rippers-bn-be\\src\\controllers\\",sources:["authController.js"],sourcesContent:["const { googleLogin } = require('../Services/authService');\r\n\r\nconst googleLoginController = async (req, res) => {\r\n  const { token } = req.query; // Using the token from query params\r\n\r\n  if (!token) {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: 'Authorization code is required',\r\n    });\r\n  }\r\n\r\n  try {\r\n    const userData = await googleLogin(token); // Pass the token to the service\r\n\r\n    res.status(200).json({\r\n      status: 200,\r\n      message: 'Login successful',\r\n      data: userData,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).json({\r\n      status: 400,\r\n      message: error.message || 'Something went wrong',\r\n    });\r\n  }\r\n};\r\n\r\nmodule.exports = { googleLoginController };\r\n"],mappings:"AAAA,MAAM;EAAEA;AAAY,CAAC,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAE1D,MAAMC,qBAAqB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,MAAM;IAAEC;EAAM,CAAC,GAAGF,GAAG,CAACG,KAAK,CAAC,CAAC;;EAE7B,IAAI,CAACD,KAAK,EAAE;IACV,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BD,MAAM,EAAE,GAAG;MACXE,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,WAAW,CAACK,KAAK,CAAC,CAAC,CAAC;;IAE3CD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBD,MAAM,EAAE,GAAG;MACXE,OAAO,EAAE,kBAAkB;MAC3BE,IAAI,EAAED;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBR,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBD,MAAM,EAAE,GAAG;MACXE,OAAO,EAAEG,KAAK,CAACH,OAAO,IAAI;IAC5B,CAAC,CAAC;EACJ;AACF,CAAC;AAEDK,MAAM,CAACC,OAAO,GAAG;EAAEb;AAAsB,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0da015536afaa1035bbb3859b95ae8cd91e18643"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1xw766lxzq=function(){return actualCoverage;};}return actualCoverage;}cov_1xw766lxzq();const{googleLogin}=(cov_1xw766lxzq().s[0]++,require('../Services/authService'));cov_1xw766lxzq().s[1]++;const googleLoginController=async(req,res)=>{cov_1xw766lxzq().f[0]++;const{token}=(cov_1xw766lxzq().s[2]++,req.query);// Using the token from query params
cov_1xw766lxzq().s[3]++;if(!token){cov_1xw766lxzq().b[0][0]++;cov_1xw766lxzq().s[4]++;return res.status(400).json({status:400,message:'Authorization code is required'});}else{cov_1xw766lxzq().b[0][1]++;}cov_1xw766lxzq().s[5]++;try{const userData=(cov_1xw766lxzq().s[6]++,await googleLogin(token));// Pass the token to the service
cov_1xw766lxzq().s[7]++;res.status(200).json({status:200,message:'Login successful',data:userData});}catch(error){cov_1xw766lxzq().s[8]++;console.error(error);cov_1xw766lxzq().s[9]++;res.status(400).json({status:400,message:(cov_1xw766lxzq().b[1][0]++,error.message)||(cov_1xw766lxzq().b[1][1]++,'Something went wrong')});}};cov_1xw766lxzq().s[10]++;module.exports={googleLoginController};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnb29nbGVMb2dpbiIsInJlcXVpcmUiLCJnb29nbGVMb2dpbkNvbnRyb2xsZXIiLCJyZXEiLCJyZXMiLCJ0b2tlbiIsInF1ZXJ5Iiwic3RhdHVzIiwianNvbiIsIm1lc3NhZ2UiLCJ1c2VyRGF0YSIsImRhdGEiLCJlcnJvciIsImNvbnNvbGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiJEOlxccmlwcGVyc1xccmlwcGVycy1ibi1iZVxcc3JjXFxjb250cm9sbGVyc1xcIiwic291cmNlcyI6WyJhdXRoQ29udHJvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGdvb2dsZUxvZ2luIH0gPSByZXF1aXJlKCcuLi9TZXJ2aWNlcy9hdXRoU2VydmljZScpO1xyXG5cclxuY29uc3QgZ29vZ2xlTG9naW5Db250cm9sbGVyID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgY29uc3QgeyB0b2tlbiB9ID0gcmVxLnF1ZXJ5OyAvLyBVc2luZyB0aGUgdG9rZW4gZnJvbSBxdWVyeSBwYXJhbXNcclxuXHJcbiAgaWYgKCF0b2tlbikge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcclxuICAgICAgc3RhdHVzOiA0MDAsXHJcbiAgICAgIG1lc3NhZ2U6ICdBdXRob3JpemF0aW9uIGNvZGUgaXMgcmVxdWlyZWQnLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgdXNlckRhdGEgPSBhd2FpdCBnb29nbGVMb2dpbih0b2tlbik7IC8vIFBhc3MgdGhlIHRva2VuIHRvIHRoZSBzZXJ2aWNlXHJcblxyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xyXG4gICAgICBzdGF0dXM6IDIwMCxcclxuICAgICAgbWVzc2FnZTogJ0xvZ2luIHN1Y2Nlc3NmdWwnLFxyXG4gICAgICBkYXRhOiB1c2VyRGF0YSxcclxuICAgIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcclxuICAgICAgc3RhdHVzOiA0MDAsXHJcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfHwgJ1NvbWV0aGluZyB3ZW50IHdyb25nJyxcclxuICAgIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0geyBnb29nbGVMb2dpbkNvbnRyb2xsZXIgfTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0VBQUVBO0FBQVksQ0FBQyxHQUFHQyxPQUFPLENBQUMseUJBQXlCLENBQUM7QUFFMUQsTUFBTUMscUJBQXFCLEdBQUcsTUFBQUEsQ0FBT0MsR0FBRyxFQUFFQyxHQUFHLEtBQUs7RUFDaEQsTUFBTTtJQUFFQztFQUFNLENBQUMsR0FBR0YsR0FBRyxDQUFDRyxLQUFLLENBQUMsQ0FBQzs7RUFFN0IsSUFBSSxDQUFDRCxLQUFLLEVBQUU7SUFDVixPQUFPRCxHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQzFCRCxNQUFNLEVBQUUsR0FBRztNQUNYRSxPQUFPLEVBQUU7SUFDWCxDQUFDLENBQUM7RUFDSjtFQUVBLElBQUk7SUFDRixNQUFNQyxRQUFRLEdBQUcsTUFBTVYsV0FBVyxDQUFDSyxLQUFLLENBQUMsQ0FBQyxDQUFDOztJQUUzQ0QsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNuQkQsTUFBTSxFQUFFLEdBQUc7TUFDWEUsT0FBTyxFQUFFLGtCQUFrQjtNQUMzQkUsSUFBSSxFQUFFRDtJQUNSLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQyxPQUFPRSxLQUFLLEVBQUU7SUFDZEMsT0FBTyxDQUFDRCxLQUFLLENBQUNBLEtBQUssQ0FBQztJQUNwQlIsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNuQkQsTUFBTSxFQUFFLEdBQUc7TUFDWEUsT0FBTyxFQUFFRyxLQUFLLENBQUNILE9BQU8sSUFBSTtJQUM1QixDQUFDLENBQUM7RUFDSjtBQUNGLENBQUM7QUFFREssTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFBRWI7QUFBc0IsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXh3NzY2bHh6cSIsImFjdHVhbENvdmVyYWdlIiwiZ29vZ2xlTG9naW4iLCJzIiwicmVxdWlyZSIsImdvb2dsZUxvZ2luQ29udHJvbGxlciIsInJlcSIsInJlcyIsImYiLCJ0b2tlbiIsInF1ZXJ5IiwiYiIsInN0YXR1cyIsImpzb24iLCJtZXNzYWdlIiwidXNlckRhdGEiLCJkYXRhIiwiZXJyb3IiLCJjb25zb2xlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkQ6XFxyaXBwZXJzXFxyaXBwZXJzLWJuLWJlXFxzcmNcXGNvbnRyb2xsZXJzXFwvYXV0aENvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBnb29nbGVMb2dpbiB9ID0gcmVxdWlyZSgnLi4vU2VydmljZXMvYXV0aFNlcnZpY2UnKTtcclxuXHJcbmNvbnN0IGdvb2dsZUxvZ2luQ29udHJvbGxlciA9IGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIGNvbnN0IHsgdG9rZW4gfSA9IHJlcS5xdWVyeTsgLy8gVXNpbmcgdGhlIHRva2VuIGZyb20gcXVlcnkgcGFyYW1zXHJcblxyXG4gIGlmICghdG9rZW4pIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XHJcbiAgICAgIHN0YXR1czogNDAwLFxyXG4gICAgICBtZXNzYWdlOiAnQXV0aG9yaXphdGlvbiBjb2RlIGlzIHJlcXVpcmVkJyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHVzZXJEYXRhID0gYXdhaXQgZ29vZ2xlTG9naW4odG9rZW4pOyAvLyBQYXNzIHRoZSB0b2tlbiB0byB0aGUgc2VydmljZVxyXG5cclxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuICAgICAgc3RhdHVzOiAyMDAsXHJcbiAgICAgIG1lc3NhZ2U6ICdMb2dpbiBzdWNjZXNzZnVsJyxcclxuICAgICAgZGF0YTogdXNlckRhdGEsXHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XHJcbiAgICAgIHN0YXR1czogNDAwLFxyXG4gICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8ICdTb21ldGhpbmcgd2VudCB3cm9uZycsXHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHsgZ29vZ2xlTG9naW5Db250cm9sbGVyIH07XHJcbiJdLCJtYXBwaW5ncyI6InFxSEFhVTtBQUFBQSxjQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELGNBQUEsR0FiVixLQUFNLENBQUVFLFdBQVksQ0FBQyxFQUFBRixjQUFBLEdBQUFHLENBQUEsTUFBR0MsT0FBTyxDQUFDLHlCQUF5QixDQUFDLEVBQUFKLGNBQUEsR0FBQUcsQ0FBQSxNQUUxRCxLQUFNLENBQUFFLHFCQUFxQixDQUFHLEtBQUFBLENBQU9DLEdBQUcsQ0FBRUMsR0FBRyxHQUFLLENBQUFQLGNBQUEsR0FBQVEsQ0FBQSxNQUNoRCxLQUFNLENBQUVDLEtBQU0sQ0FBQyxFQUFBVCxjQUFBLEdBQUFHLENBQUEsTUFBR0csR0FBRyxDQUFDSSxLQUFLLEVBQUU7QUFBQVYsY0FBQSxHQUFBRyxDQUFBLE1BRTdCLEdBQUksQ0FBQ00sS0FBSyxDQUFFLENBQUFULGNBQUEsR0FBQVcsQ0FBQSxTQUFBWCxjQUFBLEdBQUFHLENBQUEsTUFDVixNQUFPLENBQUFJLEdBQUcsQ0FBQ0ssTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FDMUJELE1BQU0sQ0FBRSxHQUFHLENBQ1hFLE9BQU8sQ0FBRSxnQ0FDWCxDQUFDLENBQUMsQ0FDSixNQUFBZCxjQUFBLEdBQUFXLENBQUEsVUFBQVgsY0FBQSxHQUFBRyxDQUFBLE1BRUEsR0FBSSxDQUNGLEtBQU0sQ0FBQVksUUFBUSxFQUFBZixjQUFBLEdBQUFHLENBQUEsTUFBRyxLQUFNLENBQUFELFdBQVcsQ0FBQ08sS0FBSyxDQUFDLEVBQUU7QUFBQVQsY0FBQSxHQUFBRyxDQUFBLE1BRTNDSSxHQUFHLENBQUNLLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQ25CRCxNQUFNLENBQUUsR0FBRyxDQUNYRSxPQUFPLENBQUUsa0JBQWtCLENBQzNCRSxJQUFJLENBQUVELFFBQ1IsQ0FBQyxDQUFDLENBQ0osQ0FBRSxNQUFPRSxLQUFLLENBQUUsQ0FBQWpCLGNBQUEsR0FBQUcsQ0FBQSxNQUNkZSxPQUFPLENBQUNELEtBQUssQ0FBQ0EsS0FBSyxDQUFDLENBQUFqQixjQUFBLEdBQUFHLENBQUEsTUFDcEJJLEdBQUcsQ0FBQ0ssTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FDbkJELE1BQU0sQ0FBRSxHQUFHLENBQ1hFLE9BQU8sQ0FBRSxDQUFBZCxjQUFBLEdBQUFXLENBQUEsU0FBQU0sS0FBSyxDQUFDSCxPQUFPLElBQUFkLGNBQUEsR0FBQVcsQ0FBQSxTQUFJLHVCQUM1QixDQUFDLENBQUMsQ0FDSixDQUNGLENBQUMsQ0FBQVgsY0FBQSxHQUFBRyxDQUFBLE9BRURnQixNQUFNLENBQUNDLE9BQU8sQ0FBRyxDQUFFZixxQkFBc0IsQ0FBQyxDIiwiaWdub3JlTGlzdCI6W119