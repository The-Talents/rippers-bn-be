'use strict';function cov_2332rbixri(){var path="N:\\Personal Projects\\The Talent\\Barefoot-Nomand_v1\\rippers-bn-be\\models\\user.js";var hash="451542f1a4fb2bbe57dfc249cdf7502939b5f216";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"N:\\Personal Projects\\The Talent\\Barefoot-Nomand_v1\\rippers-bn-be\\models\\user.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:59,column:2}},"2":{start:{line:15,column:6},end:{line:18,column:9}},"3":{start:{line:19,column:6},end:{line:23,column:9}},"4":{start:{line:26,column:2},end:{line:42,column:5}},"5":{start:{line:58,column:2},end:{line:58,column:14}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:59,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:24,column:5}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","User","associate","models","hasMany","Trip","foreignKey","as","Feedback","onDelete","onUpdate","init","firstName","STRING","lastName","email","birthOfDate","DATEONLY","preferredLanguage","preferredCurrency","whereYouLive","role","department","lineManager","gender","telephoneNumber","modelName"],sourceRoot:"N:\\Personal Projects\\The Talent\\Barefoot-Nomand_v1\\rippers-bn-be\\models\\",sources:["user.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class User extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // Define associations here\r\n      User.hasMany(models.Trip, {\r\n        foreignKey: \"userId\",\r\n        as: \"trips\",\r\n      });\r\n\r\n      User.hasMany(models.Feedback, {\r\n        foreignKey: 'userId',\r\n        onDelete: 'CASCADE',\r\n        onUpdate: 'CASCADE',\r\n      });\r\n    }\r\n  }\r\n  User.init({\r\n    firstName: DataTypes.STRING,\r\n    lastName: DataTypes.STRING,\r\n    email: DataTypes.STRING,\r\n    birthOfDate: DataTypes.DATEONLY,\r\n    preferredLanguage: DataTypes.STRING,\r\n    preferredCurrency: DataTypes.STRING,\r\n    whereYouLive: DataTypes.STRING,\r\n    role: DataTypes.STRING,\r\n    department: DataTypes.STRING,\r\n    lineManager: DataTypes.STRING,\r\n    gender: DataTypes.STRING,\r\n    telephoneNumber: DataTypes.STRING\r\n  }, {\r\n    sequelize,\r\n    modelName: 'User',\r\n  });\r\n  \r\n  // User.associate = (models) => {\r\n  //   // Existing associations\r\n  //   User.hasMany(models.Trip, {\r\n  //     foreignKey: \"userId\",\r\n  //     as: \"trips\",\r\n  //   });\r\n  // };\r\n\r\n  // User.hasMany(models.Feedback, {\r\n  //   foreignKey: 'userId',\r\n  //   onDelete: 'CASCADE',\r\n  //   onUpdate: 'CASCADE',\r\n  // });\r\n\r\n  return User;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,IAAI,SAASN,KAAK,CAAC;IACvB;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;MACAF,IAAI,CAACG,OAAO,CAACD,MAAM,CAACE,IAAI,EAAE;QACxBC,UAAU,EAAE,QAAQ;QACpBC,EAAE,EAAE;MACN,CAAC,CAAC;MAEFN,IAAI,CAACG,OAAO,CAACD,MAAM,CAACK,QAAQ,EAAE;QAC5BF,UAAU,EAAE,QAAQ;QACpBG,QAAQ,EAAE,SAAS;QACnBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF;EACAT,IAAI,CAACU,IAAI,CAAC;IACRC,SAAS,EAAEZ,SAAS,CAACa,MAAM;IAC3BC,QAAQ,EAAEd,SAAS,CAACa,MAAM;IAC1BE,KAAK,EAAEf,SAAS,CAACa,MAAM;IACvBG,WAAW,EAAEhB,SAAS,CAACiB,QAAQ;IAC/BC,iBAAiB,EAAElB,SAAS,CAACa,MAAM;IACnCM,iBAAiB,EAAEnB,SAAS,CAACa,MAAM;IACnCO,YAAY,EAAEpB,SAAS,CAACa,MAAM;IAC9BQ,IAAI,EAAErB,SAAS,CAACa,MAAM;IACtBS,UAAU,EAAEtB,SAAS,CAACa,MAAM;IAC5BU,WAAW,EAAEvB,SAAS,CAACa,MAAM;IAC7BW,MAAM,EAAExB,SAAS,CAACa,MAAM;IACxBY,eAAe,EAAEzB,SAAS,CAACa;EAC7B,CAAC,EAAE;IACDd,SAAS;IACT2B,SAAS,EAAE;EACb,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,OAAOzB,IAAI;AACb,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"451542f1a4fb2bbe57dfc249cdf7502939b5f216"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2332rbixri=function(){return actualCoverage;};}return actualCoverage;}cov_2332rbixri();const{Model}=(cov_2332rbixri().s[0]++,require('sequelize'));cov_2332rbixri().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_2332rbixri().f[0]++;class User extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_2332rbixri().f[1]++;cov_2332rbixri().s[2]++;// Define associations here
User.hasMany(models.Trip,{foreignKey:"userId",as:"trips"});cov_2332rbixri().s[3]++;User.hasMany(models.Feedback,{foreignKey:'userId',onDelete:'CASCADE',onUpdate:'CASCADE'});}}cov_2332rbixri().s[4]++;User.init({firstName:DataTypes.STRING,lastName:DataTypes.STRING,email:DataTypes.STRING,birthOfDate:DataTypes.DATEONLY,preferredLanguage:DataTypes.STRING,preferredCurrency:DataTypes.STRING,whereYouLive:DataTypes.STRING,role:DataTypes.STRING,department:DataTypes.STRING,lineManager:DataTypes.STRING,gender:DataTypes.STRING,telephoneNumber:DataTypes.STRING},{sequelize,modelName:'User'});// User.associate = (models) => {
//   // Existing associations
//   User.hasMany(models.Trip, {
//     foreignKey: "userId",
//     as: "trips",
//   });
// };
// User.hasMany(models.Feedback, {
//   foreignKey: 'userId',
//   onDelete: 'CASCADE',
//   onUpdate: 'CASCADE',
// });
cov_2332rbixri().s[5]++;return User;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiVXNlciIsImFzc29jaWF0ZSIsIm1vZGVscyIsImhhc01hbnkiLCJUcmlwIiwiZm9yZWlnbktleSIsImFzIiwiRmVlZGJhY2siLCJvbkRlbGV0ZSIsIm9uVXBkYXRlIiwiaW5pdCIsImZpcnN0TmFtZSIsIlNUUklORyIsImxhc3ROYW1lIiwiZW1haWwiLCJiaXJ0aE9mRGF0ZSIsIkRBVEVPTkxZIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJwcmVmZXJyZWRDdXJyZW5jeSIsIndoZXJlWW91TGl2ZSIsInJvbGUiLCJkZXBhcnRtZW50IiwibGluZU1hbmFnZXIiLCJnZW5kZXIiLCJ0ZWxlcGhvbmVOdW1iZXIiLCJtb2RlbE5hbWUiXSwic291cmNlUm9vdCI6Ik46XFxQZXJzb25hbCBQcm9qZWN0c1xcVGhlIFRhbGVudFxcQmFyZWZvb3QtTm9tYW5kX3YxXFxyaXBwZXJzLWJuLWJlXFxtb2RlbHNcXCIsInNvdXJjZXMiOlsidXNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNvbnN0IHtcclxuICBNb2RlbFxyXG59ID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgVXNlciBleHRlbmRzIE1vZGVsIHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIG1ldGhvZCBmb3IgZGVmaW5pbmcgYXNzb2NpYXRpb25zLlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IGEgcGFydCBvZiBTZXF1ZWxpemUgbGlmZWN5Y2xlLlxyXG4gICAgICogVGhlIGBtb2RlbHMvaW5kZXhgIGZpbGUgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3NvY2lhdGUobW9kZWxzKSB7XHJcbiAgICAgIC8vIERlZmluZSBhc3NvY2lhdGlvbnMgaGVyZVxyXG4gICAgICBVc2VyLmhhc01hbnkobW9kZWxzLlRyaXAsIHtcclxuICAgICAgICBmb3JlaWduS2V5OiBcInVzZXJJZFwiLFxyXG4gICAgICAgIGFzOiBcInRyaXBzXCIsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgVXNlci5oYXNNYW55KG1vZGVscy5GZWVkYmFjaywge1xyXG4gICAgICAgIGZvcmVpZ25LZXk6ICd1c2VySWQnLFxyXG4gICAgICAgIG9uRGVsZXRlOiAnQ0FTQ0FERScsXHJcbiAgICAgICAgb25VcGRhdGU6ICdDQVNDQURFJyxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFVzZXIuaW5pdCh7XHJcbiAgICBmaXJzdE5hbWU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBsYXN0TmFtZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGVtYWlsOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgYmlydGhPZkRhdGU6IERhdGFUeXBlcy5EQVRFT05MWSxcclxuICAgIHByZWZlcnJlZExhbmd1YWdlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgcHJlZmVycmVkQ3VycmVuY3k6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICB3aGVyZVlvdUxpdmU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICByb2xlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZGVwYXJ0bWVudDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGxpbmVNYW5hZ2VyOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZ2VuZGVyOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgdGVsZXBob25lTnVtYmVyOiBEYXRhVHlwZXMuU1RSSU5HXHJcbiAgfSwge1xyXG4gICAgc2VxdWVsaXplLFxyXG4gICAgbW9kZWxOYW1lOiAnVXNlcicsXHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8gVXNlci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XHJcbiAgLy8gICAvLyBFeGlzdGluZyBhc3NvY2lhdGlvbnNcclxuICAvLyAgIFVzZXIuaGFzTWFueShtb2RlbHMuVHJpcCwge1xyXG4gIC8vICAgICBmb3JlaWduS2V5OiBcInVzZXJJZFwiLFxyXG4gIC8vICAgICBhczogXCJ0cmlwc1wiLFxyXG4gIC8vICAgfSk7XHJcbiAgLy8gfTtcclxuXHJcbiAgLy8gVXNlci5oYXNNYW55KG1vZGVscy5GZWVkYmFjaywge1xyXG4gIC8vICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgLy8gICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gIC8vICAgb25VcGRhdGU6ICdDQVNDQURFJyxcclxuICAvLyB9KTtcclxuXHJcbiAgcmV0dXJuIFVzZXI7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaLE1BQU07RUFDSkE7QUFDRixDQUFDLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDeEJDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLENBQUNDLFNBQVMsRUFBRUMsU0FBUyxLQUFLO0VBQ3pDLE1BQU1DLElBQUksU0FBU04sS0FBSyxDQUFDO0lBQ3ZCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7SUFDSSxPQUFPTyxTQUFTQSxDQUFDQyxNQUFNLEVBQUU7TUFDdkI7TUFDQUYsSUFBSSxDQUFDRyxPQUFPLENBQUNELE1BQU0sQ0FBQ0UsSUFBSSxFQUFFO1FBQ3hCQyxVQUFVLEVBQUUsUUFBUTtRQUNwQkMsRUFBRSxFQUFFO01BQ04sQ0FBQyxDQUFDO01BRUZOLElBQUksQ0FBQ0csT0FBTyxDQUFDRCxNQUFNLENBQUNLLFFBQVEsRUFBRTtRQUM1QkYsVUFBVSxFQUFFLFFBQVE7UUFDcEJHLFFBQVEsRUFBRSxTQUFTO1FBQ25CQyxRQUFRLEVBQUU7TUFDWixDQUFDLENBQUM7SUFDSjtFQUNGO0VBQ0FULElBQUksQ0FBQ1UsSUFBSSxDQUFDO0lBQ1JDLFNBQVMsRUFBRVosU0FBUyxDQUFDYSxNQUFNO0lBQzNCQyxRQUFRLEVBQUVkLFNBQVMsQ0FBQ2EsTUFBTTtJQUMxQkUsS0FBSyxFQUFFZixTQUFTLENBQUNhLE1BQU07SUFDdkJHLFdBQVcsRUFBRWhCLFNBQVMsQ0FBQ2lCLFFBQVE7SUFDL0JDLGlCQUFpQixFQUFFbEIsU0FBUyxDQUFDYSxNQUFNO0lBQ25DTSxpQkFBaUIsRUFBRW5CLFNBQVMsQ0FBQ2EsTUFBTTtJQUNuQ08sWUFBWSxFQUFFcEIsU0FBUyxDQUFDYSxNQUFNO0lBQzlCUSxJQUFJLEVBQUVyQixTQUFTLENBQUNhLE1BQU07SUFDdEJTLFVBQVUsRUFBRXRCLFNBQVMsQ0FBQ2EsTUFBTTtJQUM1QlUsV0FBVyxFQUFFdkIsU0FBUyxDQUFDYSxNQUFNO0lBQzdCVyxNQUFNLEVBQUV4QixTQUFTLENBQUNhLE1BQU07SUFDeEJZLGVBQWUsRUFBRXpCLFNBQVMsQ0FBQ2E7RUFDN0IsQ0FBQyxFQUFFO0lBQ0RkLFNBQVM7SUFDVDJCLFNBQVMsRUFBRTtFQUNiLENBQUMsQ0FBQzs7RUFFRjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBLE9BQU96QixJQUFJO0FBQ2IsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjMzMnJiaXhyaSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwibmFtZXMiLCJzb3VyY2VSb290Iiwic291cmNlcyIsInNvdXJjZXNDb250ZW50IiwibWFwcGluZ3MiLCJpZ25vcmVMaXN0IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJVc2VyIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiaGFzTWFueSIsIlRyaXAiLCJmb3JlaWduS2V5IiwiYXMiLCJGZWVkYmFjayIsIm9uRGVsZXRlIiwib25VcGRhdGUiLCJpbml0IiwiZmlyc3ROYW1lIiwiU1RSSU5HIiwibGFzdE5hbWUiLCJlbWFpbCIsImJpcnRoT2ZEYXRlIiwiREFURU9OTFkiLCJwcmVmZXJyZWRMYW5ndWFnZSIsInByZWZlcnJlZEN1cnJlbmN5Iiwid2hlcmVZb3VMaXZlIiwicm9sZSIsImRlcGFydG1lbnQiLCJsaW5lTWFuYWdlciIsImdlbmRlciIsInRlbGVwaG9uZU51bWJlciIsIm1vZGVsTmFtZSJdLCJzb3VyY2VzIjpbIk46XFxQZXJzb25hbCBQcm9qZWN0c1xcVGhlIFRhbGVudFxcQmFyZWZvb3QtTm9tYW5kX3YxXFxyaXBwZXJzLWJuLWJlXFxtb2RlbHNcXC91c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuY29uc3Qge1xyXG4gIE1vZGVsXHJcbn0gPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSAoc2VxdWVsaXplLCBEYXRhVHlwZXMpID0+IHtcclxuICBjbGFzcyBVc2VyIGV4dGVuZHMgTW9kZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciBkZWZpbmluZyBhc3NvY2lhdGlvbnMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXHJcbiAgICAgKiBUaGUgYG1vZGVscy9pbmRleGAgZmlsZSB3aWxsIGNhbGwgdGhpcyBtZXRob2QgYXV0b21hdGljYWxseS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFzc29jaWF0ZShtb2RlbHMpIHtcclxuICAgICAgLy8gRGVmaW5lIGFzc29jaWF0aW9ucyBoZXJlXHJcbiAgICAgIFVzZXIuaGFzTWFueShtb2RlbHMuVHJpcCwge1xyXG4gICAgICAgIGZvcmVpZ25LZXk6IFwidXNlcklkXCIsXHJcbiAgICAgICAgYXM6IFwidHJpcHNcIixcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBVc2VyLmhhc01hbnkobW9kZWxzLkZlZWRiYWNrLCB7XHJcbiAgICAgICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgICAgICAgb25EZWxldGU6ICdDQVNDQURFJyxcclxuICAgICAgICBvblVwZGF0ZTogJ0NBU0NBREUnLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgVXNlci5pbml0KHtcclxuICAgIGZpcnN0TmFtZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGxhc3ROYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZW1haWw6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBiaXJ0aE9mRGF0ZTogRGF0YVR5cGVzLkRBVEVPTkxZLFxyXG4gICAgcHJlZmVycmVkTGFuZ3VhZ2U6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBwcmVmZXJyZWRDdXJyZW5jeTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHdoZXJlWW91TGl2ZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHJvbGU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBkZXBhcnRtZW50OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgbGluZU1hbmFnZXI6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBnZW5kZXI6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICB0ZWxlcGhvbmVOdW1iZXI6IERhdGFUeXBlcy5TVFJJTkdcclxuICB9LCB7XHJcbiAgICBzZXF1ZWxpemUsXHJcbiAgICBtb2RlbE5hbWU6ICdVc2VyJyxcclxuICB9KTtcclxuICBcclxuICAvLyBVc2VyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcclxuICAvLyAgIC8vIEV4aXN0aW5nIGFzc29jaWF0aW9uc1xyXG4gIC8vICAgVXNlci5oYXNNYW55KG1vZGVscy5UcmlwLCB7XHJcbiAgLy8gICAgIGZvcmVpZ25LZXk6IFwidXNlcklkXCIsXHJcbiAgLy8gICAgIGFzOiBcInRyaXBzXCIsXHJcbiAgLy8gICB9KTtcclxuICAvLyB9O1xyXG5cclxuICAvLyBVc2VyLmhhc01hbnkobW9kZWxzLkZlZWRiYWNrLCB7XHJcbiAgLy8gICBmb3JlaWduS2V5OiAndXNlcklkJyxcclxuICAvLyAgIG9uRGVsZXRlOiAnQ0FTQ0FERScsXHJcbiAgLy8gICBvblVwZGF0ZTogJ0NBU0NBREUnLFxyXG4gIC8vIH0pO1xyXG5cclxuICByZXR1cm4gVXNlcjtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksVUFBQUEsZUFBQSxNQUFBQyxJQUFBLDZGQUFBQyxJQUFBLGdEQUFBQyxNQUFBLEtBQUFDLFFBQUEsc0JBQUFDLEdBQUEsb0JBQUFDLFlBQUEsRUFBQUwsSUFBQSx5RkFBQU0sWUFBQSxPQUFBQyxLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsR0FBQUMsTUFBQSxXQUFBRixLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRSxLQUFBLE9BQUFDLElBQUEsaUJBQUFDLElBQUEsRUFBQU4sS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEdBQUFDLE1BQUEsTUFBQUssR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBRCxJQUFBLFNBQUFJLElBQUEsaUJBQUFDLElBQUEsRUFBQU4sS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUssR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBRCxJQUFBLE1BQUFPLFNBQUEsSUFBQUMsQ0FBQSx1Q0FBQUMsQ0FBQSxlQUFBQyxDQUFBLElBQUFDLGNBQUEsRUFBQUMsT0FBQSxHQUFBQyxLQUFBLHdXQUFBQyxVQUFBLGtGQUFBQyxPQUFBLGFBQUFDLGNBQUEscWxEQUFBQyxRQUFBLHloQ0FBQUMsVUFBQSxLQUFBQyxlQUFBLDRDQUFBMUIsSUFBQSxpREFBQTJCLFFBQUEsQ0FBQTFCLE1BQUEsQ0FBQUUsR0FBQSxJQUFBRixNQUFBLENBQUFFLEdBQUEsVUFBQXdCLFFBQUEsQ0FBQTVCLElBQUEsR0FBQTRCLFFBQUEsQ0FBQTVCLElBQUEsRUFBQUMsSUFBQSxHQUFBQSxJQUFBLEVBQUEyQixRQUFBLENBQUE1QixJQUFBLEVBQUFLLFlBQUEsTUFBQXdCLGNBQUEsQ0FBQUQsUUFBQSxDQUFBNUIsSUFBQSxHQWNKO0FBQUFELGNBQUEsU0FBQUEsQ0FBQSxTQUFBOEIsY0FBQSxXQUFBQSxjQUFBLEVBQUE5QixjQUFBLEdBYlIsS0FBTSxDQUNKK0IsS0FDRixDQUFDLEVBQUEvQixjQUFBLEdBQUFpQixDQUFBLE1BQUdlLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBQWhDLGNBQUEsR0FBQWlCLENBQUEsTUFDeEJnQixNQUFNLENBQUNDLE9BQU8sQ0FBRyxDQUFDQyxTQUFTLENBQUVDLFNBQVMsR0FBSyxDQUFBcEMsY0FBQSxHQUFBa0IsQ0FBQSxNQUN6QyxLQUFNLENBQUFtQixJQUFJLFFBQVMsQ0FBQU4sS0FBTSxDQUN2QjtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQ0ksTUFBTyxDQUFBTyxTQUFTQSxDQUFDQyxNQUFNLENBQUUsQ0FBQXZDLGNBQUEsR0FBQWtCLENBQUEsTUFBQWxCLGNBQUEsR0FBQWlCLENBQUEsTUFDdkI7QUFDQW9CLElBQUksQ0FBQ0csT0FBTyxDQUFDRCxNQUFNLENBQUNFLElBQUksQ0FBRSxDQUN4QkMsVUFBVSxDQUFFLFFBQVEsQ0FDcEJDLEVBQUUsQ0FBRSxPQUNOLENBQUMsQ0FBQyxDQUFBM0MsY0FBQSxHQUFBaUIsQ0FBQSxNQUVGb0IsSUFBSSxDQUFDRyxPQUFPLENBQUNELE1BQU0sQ0FBQ0ssUUFBUSxDQUFFLENBQzVCRixVQUFVLENBQUUsUUFBUSxDQUNwQkcsUUFBUSxDQUFFLFNBQVMsQ0FDbkJDLFFBQVEsQ0FBRSxTQUNaLENBQUMsQ0FBQyxDQUNKLENBQ0YsQ0FBQTlDLGNBQUEsR0FBQWlCLENBQUEsTUFDQW9CLElBQUksQ0FBQ1UsSUFBSSxDQUFDLENBQ1JDLFNBQVMsQ0FBRVosU0FBUyxDQUFDYSxNQUFNLENBQzNCQyxRQUFRLENBQUVkLFNBQVMsQ0FBQ2EsTUFBTSxDQUMxQkUsS0FBSyxDQUFFZixTQUFTLENBQUNhLE1BQU0sQ0FDdkJHLFdBQVcsQ0FBRWhCLFNBQVMsQ0FBQ2lCLFFBQVEsQ0FDL0JDLGlCQUFpQixDQUFFbEIsU0FBUyxDQUFDYSxNQUFNLENBQ25DTSxpQkFBaUIsQ0FBRW5CLFNBQVMsQ0FBQ2EsTUFBTSxDQUNuQ08sWUFBWSxDQUFFcEIsU0FBUyxDQUFDYSxNQUFNLENBQzlCUSxJQUFJLENBQUVyQixTQUFTLENBQUNhLE1BQU0sQ0FDdEJTLFVBQVUsQ0FBRXRCLFNBQVMsQ0FBQ2EsTUFBTSxDQUM1QlUsV0FBVyxDQUFFdkIsU0FBUyxDQUFDYSxNQUFNLENBQzdCVyxNQUFNLENBQUV4QixTQUFTLENBQUNhLE1BQU0sQ0FDeEJZLGVBQWUsQ0FBRXpCLFNBQVMsQ0FBQ2EsTUFDN0IsQ0FBQyxDQUFFLENBQ0RkLFNBQVMsQ0FDVDJCLFNBQVMsQ0FBRSxNQUNiLENBQUMsQ0FBQyxDQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOUQsY0FBQSxHQUFBaUIsQ0FBQSxNQUVBLE1BQU8sQ0FBQW9CLElBQUksQ0FDYixDQUFDLEMiLCJpZ25vcmVMaXN0IjpbXX0=