{"version":3,"names":["OAuth2Client","require","User","jwt","client","process","env","GOOGLE_CLIENT_ID","googleLogin","token","ticket","verifyIdToken","idToken","audience","payload","getPayload","email","user","findOne","where","error","Error","statusCode","authToken","sign","userId","id","role","JWT_SECRET","expiresIn","firstName","lastName","profilePicture","console","module","exports"],"sourceRoot":"D:\\rippers\\rippers-bn-be\\src\\Services\\","sources":["authService.js"],"sourcesContent":["const { OAuth2Client } = require('google-auth-library');\r\nconst { User } = require('../../models'); // Adjust the path as needed\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);\r\n\r\nconst googleLogin = async (token) => {\r\n  try {\r\n    // Verify Google token\r\n    const ticket = await client.verifyIdToken({\r\n      idToken: token,\r\n      audience: process.env.GOOGLE_CLIENT_ID,\r\n    });\r\n\r\n    const payload = ticket.getPayload();\r\n    const email = payload.email; // Use email to check if the user exists\r\n    // const firstName = payload.given_name;\r\n    // const lastName = payload.family_name;\r\n    // const profilePicture = payload.picture;\r\n\r\n    // Check if the user exists in the database using email\r\n    let user = await User.findOne({ where: { email } });\r\n\r\n    // If the user does not exist, create a new user\r\n    if (!user) {\r\n        const error = new Error('Account does not exist. Please create an account first.');\r\n        error.statusCode = 404;\r\n        throw error;\r\n      }\r\n\r\n    // Generate JWT token\r\n    const authToken = jwt.sign({ userId: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n\r\n    return {\r\n      userId: user.id,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      email: user.email,\r\n      profilePicture: user.profilePicture,\r\n      token: authToken,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in googleLogin:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nmodule.exports = { googleLogin };"],"mappings":"AAAA,MAAM;EAAEA;AAAa,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACvD,MAAM;EAAEC;AAAK,CAAC,GAAGD,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;AAC1C,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAc,CAAC;AAEnC,MAAMG,MAAM,GAAG,IAAIJ,YAAY,CAACK,OAAO,CAACC,GAAG,CAACC,gBAAgB,CAAC;AAE7D,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;EACnC,IAAI;IACF;IACA,MAAMC,MAAM,GAAG,MAAMN,MAAM,CAACO,aAAa,CAAC;MACxCC,OAAO,EAAEH,KAAK;MACdI,QAAQ,EAAER,OAAO,CAACC,GAAG,CAACC;IACxB,CAAC,CAAC;IAEF,MAAMO,OAAO,GAAGJ,MAAM,CAACK,UAAU,CAAC,CAAC;IACnC,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK,CAAC,CAAC;IAC7B;IACA;IACA;;IAEA;IACA,IAAIC,IAAI,GAAG,MAAMf,IAAI,CAACgB,OAAO,CAAC;MAAEC,KAAK,EAAE;QAAEH;MAAM;IAAE,CAAC,CAAC;;IAEnD;IACA,IAAI,CAACC,IAAI,EAAE;MACP,MAAMG,KAAK,GAAG,IAAIC,KAAK,CAAC,yDAAyD,CAAC;MAClFD,KAAK,CAACE,UAAU,GAAG,GAAG;MACtB,MAAMF,KAAK;IACb;;IAEF;IACA,MAAMG,SAAS,GAAGpB,GAAG,CAACqB,IAAI,CAAC;MAAEC,MAAM,EAAER,IAAI,CAACS,EAAE;MAAEC,IAAI,EAAEV,IAAI,CAACU;IAAK,CAAC,EAAEtB,OAAO,CAACC,GAAG,CAACsB,UAAU,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAE7G,OAAO;MACLJ,MAAM,EAAER,IAAI,CAACS,EAAE;MACfI,SAAS,EAAEb,IAAI,CAACa,SAAS;MACzBC,QAAQ,EAAEd,IAAI,CAACc,QAAQ;MACvBf,KAAK,EAAEC,IAAI,CAACD,KAAK;MACjBgB,cAAc,EAAEf,IAAI,CAACe,cAAc;MACnCvB,KAAK,EAAEc;IACT,CAAC;EACH,CAAC,CAAC,OAAOH,KAAK,EAAE;IACda,OAAO,CAACb,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAEDc,MAAM,CAACC,OAAO,GAAG;EAAE3B;AAAY,CAAC","ignoreList":[]}