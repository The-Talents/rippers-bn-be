'use strict';function cov_1lj9pvf4ib(){var path="N:\\Personal Projects\\work-projects\\eric-nomad\\models\\notification.js";var hash="cceb58b0ba47f9dafcd36c3e7a60bb622ccb46d0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"N:\\Personal Projects\\work-projects\\eric-nomad\\models\\notification.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:27,column:2}},"2":{start:{line:17,column:2},end:{line:25,column:5}},"3":{start:{line:26,column:2},end:{line:26,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:27,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:15,column:5}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","Notification","associate","models","init","message","TEXT","receiver","INTEGER","sender","status","STRING","modelName"],sourceRoot:"N:\\Personal Projects\\work-projects\\eric-nomad\\models\\",sources:["notification.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class Notification extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // define association here\r\n    }\r\n  }\r\n  Notification.init({\r\n    message: DataTypes.TEXT,\r\n    receiver: DataTypes.INTEGER,\r\n    sender: DataTypes.INTEGER,\r\n    status: DataTypes.STRING\r\n  }, {\r\n    sequelize,\r\n    modelName: 'Notification',\r\n  });\r\n  return Notification;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,YAAY,SAASN,KAAK,CAAC;IAC/B;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;IAAA;EAEJ;EACAF,YAAY,CAACG,IAAI,CAAC;IAChBC,OAAO,EAAEL,SAAS,CAACM,IAAI;IACvBC,QAAQ,EAAEP,SAAS,CAACQ,OAAO;IAC3BC,MAAM,EAAET,SAAS,CAACQ,OAAO;IACzBE,MAAM,EAAEV,SAAS,CAACW;EACpB,CAAC,EAAE;IACDZ,SAAS;IACTa,SAAS,EAAE;EACb,CAAC,CAAC;EACF,OAAOX,YAAY;AACrB,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"cceb58b0ba47f9dafcd36c3e7a60bb622ccb46d0"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1lj9pvf4ib=function(){return actualCoverage;};}return actualCoverage;}cov_1lj9pvf4ib();const{Model}=(cov_1lj9pvf4ib().s[0]++,require('sequelize'));cov_1lj9pvf4ib().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_1lj9pvf4ib().f[0]++;class Notification extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_1lj9pvf4ib().f[1]++;}// define association here
}cov_1lj9pvf4ib().s[2]++;Notification.init({message:DataTypes.TEXT,receiver:DataTypes.INTEGER,sender:DataTypes.INTEGER,status:DataTypes.STRING},{sequelize,modelName:'Notification'});cov_1lj9pvf4ib().s[3]++;return Notification;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiTm90aWZpY2F0aW9uIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiaW5pdCIsIm1lc3NhZ2UiLCJURVhUIiwicmVjZWl2ZXIiLCJJTlRFR0VSIiwic2VuZGVyIiwic3RhdHVzIiwiU1RSSU5HIiwibW9kZWxOYW1lIl0sInNvdXJjZVJvb3QiOiJOOlxcUGVyc29uYWwgUHJvamVjdHNcXHdvcmstcHJvamVjdHNcXGVyaWMtbm9tYWRcXG1vZGVsc1xcIiwic291cmNlcyI6WyJub3RpZmljYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5jb25zdCB7XHJcbiAgTW9kZWxcclxufSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IChzZXF1ZWxpemUsIERhdGFUeXBlcykgPT4ge1xyXG4gIGNsYXNzIE5vdGlmaWNhdGlvbiBleHRlbmRzIE1vZGVsIHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIG1ldGhvZCBmb3IgZGVmaW5pbmcgYXNzb2NpYXRpb25zLlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IGEgcGFydCBvZiBTZXF1ZWxpemUgbGlmZWN5Y2xlLlxyXG4gICAgICogVGhlIGBtb2RlbHMvaW5kZXhgIGZpbGUgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3NvY2lhdGUobW9kZWxzKSB7XHJcbiAgICAgIC8vIGRlZmluZSBhc3NvY2lhdGlvbiBoZXJlXHJcbiAgICB9XHJcbiAgfVxyXG4gIE5vdGlmaWNhdGlvbi5pbml0KHtcclxuICAgIG1lc3NhZ2U6IERhdGFUeXBlcy5URVhULFxyXG4gICAgcmVjZWl2ZXI6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgc2VuZGVyOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIHN0YXR1czogRGF0YVR5cGVzLlNUUklOR1xyXG4gIH0sIHtcclxuICAgIHNlcXVlbGl6ZSxcclxuICAgIG1vZGVsTmFtZTogJ05vdGlmaWNhdGlvbicsXHJcbiAgfSk7XHJcbiAgcmV0dXJuIE5vdGlmaWNhdGlvbjtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1osTUFBTTtFQUNKQTtBQUNGLENBQUMsR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUN4QkMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFQyxTQUFTLEtBQUs7RUFDekMsTUFBTUMsWUFBWSxTQUFTTixLQUFLLENBQUM7SUFDL0I7QUFDSjtBQUNBO0FBQ0E7QUFDQTtJQUNJLE9BQU9PLFNBQVNBLENBQUNDLE1BQU0sRUFBRTtNQUN2QjtJQUFBO0VBRUo7RUFDQUYsWUFBWSxDQUFDRyxJQUFJLENBQUM7SUFDaEJDLE9BQU8sRUFBRUwsU0FBUyxDQUFDTSxJQUFJO0lBQ3ZCQyxRQUFRLEVBQUVQLFNBQVMsQ0FBQ1EsT0FBTztJQUMzQkMsTUFBTSxFQUFFVCxTQUFTLENBQUNRLE9BQU87SUFDekJFLE1BQU0sRUFBRVYsU0FBUyxDQUFDVztFQUNwQixDQUFDLEVBQUU7SUFDRFosU0FBUztJQUNUYSxTQUFTLEVBQUU7RUFDYixDQUFDLENBQUM7RUFDRixPQUFPWCxZQUFZO0FBQ3JCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWxqOXB2ZjRpYiIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwibmFtZXMiLCJzb3VyY2VSb290Iiwic291cmNlcyIsInNvdXJjZXNDb250ZW50IiwibWFwcGluZ3MiLCJpZ25vcmVMaXN0IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJOb3RpZmljYXRpb24iLCJhc3NvY2lhdGUiLCJtb2RlbHMiLCJpbml0IiwibWVzc2FnZSIsIlRFWFQiLCJyZWNlaXZlciIsIklOVEVHRVIiLCJzZW5kZXIiLCJzdGF0dXMiLCJTVFJJTkciLCJtb2RlbE5hbWUiXSwic291cmNlcyI6WyJOOlxcUGVyc29uYWwgUHJvamVjdHNcXHdvcmstcHJvamVjdHNcXGVyaWMtbm9tYWRcXG1vZGVsc1xcL25vdGlmaWNhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNvbnN0IHtcclxuICBNb2RlbFxyXG59ID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgTm90aWZpY2F0aW9uIGV4dGVuZHMgTW9kZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciBkZWZpbmluZyBhc3NvY2lhdGlvbnMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXHJcbiAgICAgKiBUaGUgYG1vZGVscy9pbmRleGAgZmlsZSB3aWxsIGNhbGwgdGhpcyBtZXRob2QgYXV0b21hdGljYWxseS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFzc29jaWF0ZShtb2RlbHMpIHtcclxuICAgICAgLy8gZGVmaW5lIGFzc29jaWF0aW9uIGhlcmVcclxuICAgIH1cclxuICB9XHJcbiAgTm90aWZpY2F0aW9uLmluaXQoe1xyXG4gICAgbWVzc2FnZTogRGF0YVR5cGVzLlRFWFQsXHJcbiAgICByZWNlaXZlcjogRGF0YVR5cGVzLklOVEVHRVIsXHJcbiAgICBzZW5kZXI6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgc3RhdHVzOiBEYXRhVHlwZXMuU1RSSU5HXHJcbiAgfSwge1xyXG4gICAgc2VxdWVsaXplLFxyXG4gICAgbW9kZWxOYW1lOiAnTm90aWZpY2F0aW9uJyxcclxuICB9KTtcclxuICByZXR1cm4gTm90aWZpY2F0aW9uO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxVQUFBQSxlQUFBLE1BQUFDLElBQUEsaUZBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLDZFQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFFLEtBQUEsT0FBQUMsSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsR0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsU0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsTUFBQU8sU0FBQSxJQUFBQyxDQUFBLDJCQUFBQyxDQUFBLGVBQUFDLENBQUEsSUFBQUMsY0FBQSxFQUFBQyxPQUFBLEdBQUFDLEtBQUEsd0xBQUFDLFVBQUEsOERBQUFDLE9BQUEscUJBQUFDLGNBQUEsc3NCQUFBQyxRQUFBLHdkQUFBQyxVQUFBLEtBQUFDLGVBQUEsNENBQUExQixJQUFBLGlEQUFBMkIsUUFBQSxDQUFBMUIsTUFBQSxDQUFBRSxHQUFBLElBQUFGLE1BQUEsQ0FBQUUsR0FBQSxVQUFBd0IsUUFBQSxDQUFBNUIsSUFBQSxHQUFBNEIsUUFBQSxDQUFBNUIsSUFBQSxFQUFBQyxJQUFBLEdBQUFBLElBQUEsRUFBQTJCLFFBQUEsQ0FBQTVCLElBQUEsRUFBQUssWUFBQSxNQUFBd0IsY0FBQSxDQUFBRCxRQUFBLENBQUE1QixJQUFBLEdBY1Y7QUFBQUQsY0FBQSxTQUFBQSxDQUFBLFNBQUE4QixjQUFBLFdBQUFBLGNBQUEsRUFBQTlCLGNBQUEsR0FiRixLQUFNLENBQ0orQixLQUNGLENBQUMsRUFBQS9CLGNBQUEsR0FBQWlCLENBQUEsTUFBR2UsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFBaEMsY0FBQSxHQUFBaUIsQ0FBQSxNQUN4QmdCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHLENBQUNDLFNBQVMsQ0FBRUMsU0FBUyxHQUFLLENBQUFwQyxjQUFBLEdBQUFrQixDQUFBLE1BQ3pDLEtBQU0sQ0FBQW1CLFlBQVksUUFBUyxDQUFBTixLQUFNLENBQy9CO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FDSSxNQUFPLENBQUFPLFNBQVNBLENBQUNDLE1BQU0sQ0FBRSxDQUFBdkMsY0FBQSxHQUFBa0IsQ0FBQSxNQUN2QjtBQUVKLENBQUFsQixjQUFBLEdBQUFpQixDQUFBLE1BQ0FvQixZQUFZLENBQUNHLElBQUksQ0FBQyxDQUNoQkMsT0FBTyxDQUFFTCxTQUFTLENBQUNNLElBQUksQ0FDdkJDLFFBQVEsQ0FBRVAsU0FBUyxDQUFDUSxPQUFPLENBQzNCQyxNQUFNLENBQUVULFNBQVMsQ0FBQ1EsT0FBTyxDQUN6QkUsTUFBTSxDQUFFVixTQUFTLENBQUNXLE1BQ3BCLENBQUMsQ0FBRSxDQUNEWixTQUFTLENBQ1RhLFNBQVMsQ0FBRSxjQUNiLENBQUMsQ0FBQyxDQUFBaEQsY0FBQSxHQUFBaUIsQ0FBQSxNQUNGLE1BQU8sQ0FBQW9CLFlBQVksQ0FDckIsQ0FBQyxDIiwiaWdub3JlTGlzdCI6W119