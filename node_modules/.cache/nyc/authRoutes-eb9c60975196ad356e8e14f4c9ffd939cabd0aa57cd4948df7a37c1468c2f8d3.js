function cov_1lp1bt5q9e(){var path="D:\\rippers\\rippers-bn-be\\src\\routes\\authRoutes.js";var hash="92e1187ee8276cf4463663a4e8ff273cbecd15d4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\rippers\\rippers-bn-be\\src\\routes\\authRoutes.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:4,column:4},end:{line:4,column:44}},"2":{start:{line:5,column:15},end:{line:5,column:31}},"3":{start:{line:73,column:0},end:{line:73,column:56}},"4":{start:{line:74,column:0},end:{line:74,column:24}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{},b:{},inputSourceMap:{version:3,names:["express","require","googleLoginController","router","Router","get","module","exports"],sourceRoot:"D:\\rippers\\rippers-bn-be\\src\\routes\\",sources:["authRoutes.js"],sourcesContent:["\r\nconst express = require('express');\r\nconst { googleLoginController } = require('../controllers/authController');\r\nconst router = express.Router();\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/auth/google-login:\r\n *   get:\r\n *     summary: Login with Google\r\n *     description: Authenticate a user using Google OAuth.\r\n *     parameters:\r\n *       - in: query\r\n *         name: token\r\n *         schema:\r\n *           type: string\r\n *         required: true\r\n *         description: Google OAuth token.\r\n *     responses:\r\n *       200:\r\n *         description: Login successful.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 status:\r\n *                   type: integer\r\n *                   example: 200\r\n *                 message:\r\n *                   type: string\r\n *                   example: Login successful\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     userId:\r\n *                       type: integer\r\n *                       example: 1\r\n *                     email:\r\n *                       type: string\r\n *                       example: test@example.com\r\n *                     token:\r\n *                       type: string\r\n *                       example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\r\n *       400:\r\n *         description: Invalid token or missing token.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 status:\r\n *                   type: integer\r\n *                   example: 400\r\n *                 message:\r\n *                   type: string\r\n *                   example: Invalid token\r\n *       404:\r\n *         description: User does not exist.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 status:\r\n *                   type: integer\r\n *                   example: 404\r\n *                 message:\r\n *                   type: string\r\n *                   example: Account does not exist. Please create an account first.\r\n */\r\nrouter.get('/auth/google-login', googleLoginController);\r\n\r\nmodule.exports = router;"],mappings:"AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC;AAAsB,CAAC,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AAC1E,MAAME,MAAM,GAAGH,OAAO,CAACI,MAAM,CAAC,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,MAAM,CAACE,GAAG,CAAC,oBAAoB,EAAEH,qBAAqB,CAAC;AAEvDI,MAAM,CAACC,OAAO,GAAGJ,MAAM",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"92e1187ee8276cf4463663a4e8ff273cbecd15d4"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1lp1bt5q9e=function(){return actualCoverage;};}return actualCoverage;}cov_1lp1bt5q9e();const express=(cov_1lp1bt5q9e().s[0]++,require('express'));const{googleLoginController}=(cov_1lp1bt5q9e().s[1]++,require('../controllers/authController'));const router=(cov_1lp1bt5q9e().s[2]++,express.Router());/**
 * @swagger
 * /api/v1/auth/google-login:
 *   get:
 *     summary: Login with Google
 *     description: Authenticate a user using Google OAuth.
 *     parameters:
 *       - in: query
 *         name: token
 *         schema:
 *           type: string
 *         required: true
 *         description: Google OAuth token.
 *     responses:
 *       200:
 *         description: Login successful.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: integer
 *                   example: 200
 *                 message:
 *                   type: string
 *                   example: Login successful
 *                 data:
 *                   type: object
 *                   properties:
 *                     userId:
 *                       type: integer
 *                       example: 1
 *                     email:
 *                       type: string
 *                       example: test@example.com
 *                     token:
 *                       type: string
 *                       example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
 *       400:
 *         description: Invalid token or missing token.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: integer
 *                   example: 400
 *                 message:
 *                   type: string
 *                   example: Invalid token
 *       404:
 *         description: User does not exist.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: integer
 *                   example: 404
 *                 message:
 *                   type: string
 *                   example: Account does not exist. Please create an account first.
 */cov_1lp1bt5q9e().s[3]++;router.get('/auth/google-login',googleLoginController);cov_1lp1bt5q9e().s[4]++;module.exports=router;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImdvb2dsZUxvZ2luQ29udHJvbGxlciIsInJvdXRlciIsIlJvdXRlciIsImdldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IkQ6XFxyaXBwZXJzXFxyaXBwZXJzLWJuLWJlXFxzcmNcXHJvdXRlc1xcIiwic291cmNlcyI6WyJhdXRoUm91dGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5jb25zdCB7IGdvb2dsZUxvZ2luQ29udHJvbGxlciB9ID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMvYXV0aENvbnRyb2xsZXInKTtcclxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxuXHJcbi8qKlxyXG4gKiBAc3dhZ2dlclxyXG4gKiAvYXBpL3YxL2F1dGgvZ29vZ2xlLWxvZ2luOlxyXG4gKiAgIGdldDpcclxuICogICAgIHN1bW1hcnk6IExvZ2luIHdpdGggR29vZ2xlXHJcbiAqICAgICBkZXNjcmlwdGlvbjogQXV0aGVudGljYXRlIGEgdXNlciB1c2luZyBHb29nbGUgT0F1dGguXHJcbiAqICAgICBwYXJhbWV0ZXJzOlxyXG4gKiAgICAgICAtIGluOiBxdWVyeVxyXG4gKiAgICAgICAgIG5hbWU6IHRva2VuXHJcbiAqICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogR29vZ2xlIE9BdXRoIHRva2VuLlxyXG4gKiAgICAgcmVzcG9uc2VzOlxyXG4gKiAgICAgICAyMDA6XHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IExvZ2luIHN1Y2Nlc3NmdWwuXHJcbiAqICAgICAgICAgY29udGVudDpcclxuICogICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246XHJcbiAqICAgICAgICAgICAgIHNjaGVtYTpcclxuICogICAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgICAgICAgICBwcm9wZXJ0aWVzOlxyXG4gKiAgICAgICAgICAgICAgICAgc3RhdHVzOlxyXG4gKiAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyXHJcbiAqICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IDIwMFxyXG4gKiAgICAgICAgICAgICAgICAgbWVzc2FnZTpcclxuICogICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IExvZ2luIHN1Y2Nlc3NmdWxcclxuICogICAgICAgICAgICAgICAgIGRhdGE6XHJcbiAqICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOlxyXG4gKiAgICAgICAgICAgICAgICAgICAgIHVzZXJJZDpcclxuICogICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXJcclxuICogICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IDFcclxuICogICAgICAgICAgICAgICAgICAgICBlbWFpbDpcclxuICogICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTogdGVzdEBleGFtcGxlLmNvbVxyXG4gKiAgICAgICAgICAgICAgICAgICAgIHRva2VuOlxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiBleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuLi5cclxuICogICAgICAgNDAwOlxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBJbnZhbGlkIHRva2VuIG9yIG1pc3NpbmcgdG9rZW4uXHJcbiAqICAgICAgICAgY29udGVudDpcclxuICogICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246XHJcbiAqICAgICAgICAgICAgIHNjaGVtYTpcclxuICogICAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgICAgICAgICBwcm9wZXJ0aWVzOlxyXG4gKiAgICAgICAgICAgICAgICAgc3RhdHVzOlxyXG4gKiAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyXHJcbiAqICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IDQwMFxyXG4gKiAgICAgICAgICAgICAgICAgbWVzc2FnZTpcclxuICogICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IEludmFsaWQgdG9rZW5cclxuICogICAgICAgNDA0OlxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBVc2VyIGRvZXMgbm90IGV4aXN0LlxyXG4gKiAgICAgICAgIGNvbnRlbnQ6XHJcbiAqICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOlxyXG4gKiAgICAgICAgICAgICBzY2hlbWE6XHJcbiAqICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgICAgICAgICAgcHJvcGVydGllczpcclxuICogICAgICAgICAgICAgICAgIHN0YXR1czpcclxuICogICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlclxyXG4gKiAgICAgICAgICAgICAgICAgICBleGFtcGxlOiA0MDRcclxuICogICAgICAgICAgICAgICAgIG1lc3NhZ2U6XHJcbiAqICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgICAgICBleGFtcGxlOiBBY2NvdW50IGRvZXMgbm90IGV4aXN0LiBQbGVhc2UgY3JlYXRlIGFuIGFjY291bnQgZmlyc3QuXHJcbiAqL1xyXG5yb3V0ZXIuZ2V0KCcvYXV0aC9nb29nbGUtbG9naW4nLCBnb29nbGVMb2dpbkNvbnRyb2xsZXIpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXI7Il0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTTtFQUFFQztBQUFzQixDQUFDLEdBQUdELE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztBQUMxRSxNQUFNRSxNQUFNLEdBQUdILE9BQU8sQ0FBQ0ksTUFBTSxDQUFDLENBQUM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRCxNQUFNLENBQUNFLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRUgscUJBQXFCLENBQUM7QUFFdkRJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHSixNQUFNIiwiaWdub3JlTGlzdCI6W119
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWxwMWJ0NXE5ZSIsImFjdHVhbENvdmVyYWdlIiwiZXhwcmVzcyIsInMiLCJyZXF1aXJlIiwiZ29vZ2xlTG9naW5Db250cm9sbGVyIiwicm91dGVyIiwiUm91dGVyIiwiZ2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkQ6XFxyaXBwZXJzXFxyaXBwZXJzLWJuLWJlXFxzcmNcXHJvdXRlc1xcL2F1dGhSb3V0ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XHJcbmNvbnN0IHsgZ29vZ2xlTG9naW5Db250cm9sbGVyIH0gPSByZXF1aXJlKCcuLi9jb250cm9sbGVycy9hdXRoQ29udHJvbGxlcicpO1xyXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG5cclxuLyoqXHJcbiAqIEBzd2FnZ2VyXHJcbiAqIC9hcGkvdjEvYXV0aC9nb29nbGUtbG9naW46XHJcbiAqICAgZ2V0OlxyXG4gKiAgICAgc3VtbWFyeTogTG9naW4gd2l0aCBHb29nbGVcclxuICogICAgIGRlc2NyaXB0aW9uOiBBdXRoZW50aWNhdGUgYSB1c2VyIHVzaW5nIEdvb2dsZSBPQXV0aC5cclxuICogICAgIHBhcmFtZXRlcnM6XHJcbiAqICAgICAgIC0gaW46IHF1ZXJ5XHJcbiAqICAgICAgICAgbmFtZTogdG9rZW5cclxuICogICAgICAgICBzY2hlbWE6XHJcbiAqICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICByZXF1aXJlZDogdHJ1ZVxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBHb29nbGUgT0F1dGggdG9rZW4uXHJcbiAqICAgICByZXNwb25zZXM6XHJcbiAqICAgICAgIDIwMDpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogTG9naW4gc3VjY2Vzc2Z1bC5cclxuICogICAgICAgICBjb250ZW50OlxyXG4gKiAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjpcclxuICogICAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgICAgICAgICAgICAgIHByb3BlcnRpZXM6XHJcbiAqICAgICAgICAgICAgICAgICBzdGF0dXM6XHJcbiAqICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXJcclxuICogICAgICAgICAgICAgICAgICAgZXhhbXBsZTogMjAwXHJcbiAqICAgICAgICAgICAgICAgICBtZXNzYWdlOlxyXG4gKiAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICAgICAgZXhhbXBsZTogTG9naW4gc3VjY2Vzc2Z1bFxyXG4gKiAgICAgICAgICAgICAgICAgZGF0YTpcclxuICogICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6XHJcbiAqICAgICAgICAgICAgICAgICAgICAgdXNlcklkOlxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlclxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTogMVxyXG4gKiAgICAgICAgICAgICAgICAgICAgIGVtYWlsOlxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiB0ZXN0QGV4YW1wbGUuY29tXHJcbiAqICAgICAgICAgICAgICAgICAgICAgdG9rZW46XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IGV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS4uLlxyXG4gKiAgICAgICA0MDA6XHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IEludmFsaWQgdG9rZW4gb3IgbWlzc2luZyB0b2tlbi5cclxuICogICAgICAgICBjb250ZW50OlxyXG4gKiAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjpcclxuICogICAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgICAgICAgICAgICAgIHByb3BlcnRpZXM6XHJcbiAqICAgICAgICAgICAgICAgICBzdGF0dXM6XHJcbiAqICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXJcclxuICogICAgICAgICAgICAgICAgICAgZXhhbXBsZTogNDAwXHJcbiAqICAgICAgICAgICAgICAgICBtZXNzYWdlOlxyXG4gKiAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICAgICAgZXhhbXBsZTogSW52YWxpZCB0b2tlblxyXG4gKiAgICAgICA0MDQ6XHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IFVzZXIgZG9lcyBub3QgZXhpc3QuXHJcbiAqICAgICAgICAgY29udGVudDpcclxuICogICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246XHJcbiAqICAgICAgICAgICAgIHNjaGVtYTpcclxuICogICAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgICAgICAgICBwcm9wZXJ0aWVzOlxyXG4gKiAgICAgICAgICAgICAgICAgc3RhdHVzOlxyXG4gKiAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyXHJcbiAqICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IDQwNFxyXG4gKiAgICAgICAgICAgICAgICAgbWVzc2FnZTpcclxuICogICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IEFjY291bnQgZG9lcyBub3QgZXhpc3QuIFBsZWFzZSBjcmVhdGUgYW4gYWNjb3VudCBmaXJzdC5cclxuICovXHJcbnJvdXRlci5nZXQoJy9hdXRoL2dvb2dsZS1sb2dpbicsIGdvb2dsZUxvZ2luQ29udHJvbGxlcik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjsiXSwibWFwcGluZ3MiOiJnbklBY0E7QUFBQUEsY0FBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxjQUFBLEdBYkEsS0FBTSxDQUFBRSxPQUFPLEVBQUFGLGNBQUEsR0FBQUcsQ0FBQSxNQUFHQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQ2xDLEtBQU0sQ0FBRUMscUJBQXNCLENBQUMsRUFBQUwsY0FBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxFQUMxRSxLQUFNLENBQUFFLE1BQU0sRUFBQU4sY0FBQSxHQUFBRyxDQUFBLE1BQUdELE9BQU8sQ0FBQ0ssTUFBTSxDQUFDLENBQUMsRUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBakVBUCxjQUFBLEdBQUFHLENBQUEsTUFrRUFHLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDLG9CQUFvQixDQUFFSCxxQkFBcUIsQ0FBQyxDQUFBTCxjQUFBLEdBQUFHLENBQUEsTUFFdkRNLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHSixNQUFNLEMiLCJpZ25vcmVMaXN0IjpbXX0=