'use strict';function cov_2cg0j6hm9s(){var path="D:\\rippers\\rippers-bn-be\\models\\feedback.js";var hash="7b1018b1778eb32faf114ecccd4e7549ea04bb74";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\rippers\\rippers-bn-be\\models\\feedback.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:32,column:2}},"2":{start:{line:17,column:2},end:{line:25,column:5}},"3":{start:{line:26,column:2},end:{line:30,column:5}},"4":{start:{line:31,column:2},end:{line:31,column:18}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:32,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:15,column:5}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","Feedback","associate","models","init","userId","INTEGER","facility","STRING","like","BOOLEAN","comment","TEXT","modelName","belongsTo","User","foreignKey","onDelete","onUpdate"],sourceRoot:"D:\\rippers\\rippers-bn-be\\models\\",sources:["feedback.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class Feedback extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // define association here\r\n    }\r\n  }\r\n  Feedback.init({\r\n    userId: DataTypes.INTEGER,\r\n    facility: DataTypes.STRING,\r\n    like: DataTypes.BOOLEAN,\r\n    comment: DataTypes.TEXT\r\n  }, {\r\n    sequelize,\r\n    modelName: 'Feedback',\r\n  });\r\n\r\n  Feedback.belongsTo(models.User, {\r\n    foreignKey: 'userId',\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE',\r\n  });\r\n\r\n  return Feedback;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,QAAQ,SAASN,KAAK,CAAC;IAC3B;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;IAAA;EAEJ;EACAF,QAAQ,CAACG,IAAI,CAAC;IACZC,MAAM,EAAEL,SAAS,CAACM,OAAO;IACzBC,QAAQ,EAAEP,SAAS,CAACQ,MAAM;IAC1BC,IAAI,EAAET,SAAS,CAACU,OAAO;IACvBC,OAAO,EAAEX,SAAS,CAACY;EACrB,CAAC,EAAE;IACDb,SAAS;IACTc,SAAS,EAAE;EACb,CAAC,CAAC;EAEFZ,QAAQ,CAACa,SAAS,CAACX,MAAM,CAACY,IAAI,EAAE;IAC9BC,UAAU,EAAE,QAAQ;IACpBC,QAAQ,EAAE,SAAS;IACnBC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,OAAOjB,QAAQ;AACjB,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7b1018b1778eb32faf114ecccd4e7549ea04bb74"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2cg0j6hm9s=function(){return actualCoverage;};}return actualCoverage;}cov_2cg0j6hm9s();const{Model}=(cov_2cg0j6hm9s().s[0]++,require('sequelize'));cov_2cg0j6hm9s().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_2cg0j6hm9s().f[0]++;class Feedback extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_2cg0j6hm9s().f[1]++;}// define association here
}cov_2cg0j6hm9s().s[2]++;Feedback.init({userId:DataTypes.INTEGER,facility:DataTypes.STRING,like:DataTypes.BOOLEAN,comment:DataTypes.TEXT},{sequelize,modelName:'Feedback'});cov_2cg0j6hm9s().s[3]++;Feedback.belongsTo(models.User,{foreignKey:'userId',onDelete:'CASCADE',onUpdate:'CASCADE'});cov_2cg0j6hm9s().s[4]++;return Feedback;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiRmVlZGJhY2siLCJhc3NvY2lhdGUiLCJtb2RlbHMiLCJpbml0IiwidXNlcklkIiwiSU5URUdFUiIsImZhY2lsaXR5IiwiU1RSSU5HIiwibGlrZSIsIkJPT0xFQU4iLCJjb21tZW50IiwiVEVYVCIsIm1vZGVsTmFtZSIsImJlbG9uZ3NUbyIsIlVzZXIiLCJmb3JlaWduS2V5Iiwib25EZWxldGUiLCJvblVwZGF0ZSJdLCJzb3VyY2VSb290IjoiRDpcXHJpcHBlcnNcXHJpcHBlcnMtYm4tYmVcXG1vZGVsc1xcIiwic291cmNlcyI6WyJmZWVkYmFjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNvbnN0IHtcclxuICBNb2RlbFxyXG59ID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgRmVlZGJhY2sgZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgU2VxdWVsaXplIGxpZmVjeWNsZS5cclxuICAgICAqIFRoZSBgbW9kZWxzL2luZGV4YCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBkZWZpbmUgYXNzb2NpYXRpb24gaGVyZVxyXG4gICAgfVxyXG4gIH1cclxuICBGZWVkYmFjay5pbml0KHtcclxuICAgIHVzZXJJZDogRGF0YVR5cGVzLklOVEVHRVIsXHJcbiAgICBmYWNpbGl0eTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGxpa2U6IERhdGFUeXBlcy5CT09MRUFOLFxyXG4gICAgY29tbWVudDogRGF0YVR5cGVzLlRFWFRcclxuICB9LCB7XHJcbiAgICBzZXF1ZWxpemUsXHJcbiAgICBtb2RlbE5hbWU6ICdGZWVkYmFjaycsXHJcbiAgfSk7XHJcblxyXG4gIEZlZWRiYWNrLmJlbG9uZ3NUbyhtb2RlbHMuVXNlciwge1xyXG4gICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gICAgb25VcGRhdGU6ICdDQVNDQURFJyxcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIEZlZWRiYWNrO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWixNQUFNO0VBQ0pBO0FBQ0YsQ0FBQyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3hCQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxTQUFTLEVBQUVDLFNBQVMsS0FBSztFQUN6QyxNQUFNQyxRQUFRLFNBQVNOLEtBQUssQ0FBQztJQUMzQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksT0FBT08sU0FBU0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ3ZCO0lBQUE7RUFFSjtFQUNBRixRQUFRLENBQUNHLElBQUksQ0FBQztJQUNaQyxNQUFNLEVBQUVMLFNBQVMsQ0FBQ00sT0FBTztJQUN6QkMsUUFBUSxFQUFFUCxTQUFTLENBQUNRLE1BQU07SUFDMUJDLElBQUksRUFBRVQsU0FBUyxDQUFDVSxPQUFPO0lBQ3ZCQyxPQUFPLEVBQUVYLFNBQVMsQ0FBQ1k7RUFDckIsQ0FBQyxFQUFFO0lBQ0RiLFNBQVM7SUFDVGMsU0FBUyxFQUFFO0VBQ2IsQ0FBQyxDQUFDO0VBRUZaLFFBQVEsQ0FBQ2EsU0FBUyxDQUFDWCxNQUFNLENBQUNZLElBQUksRUFBRTtJQUM5QkMsVUFBVSxFQUFFLFFBQVE7SUFDcEJDLFFBQVEsRUFBRSxTQUFTO0lBQ25CQyxRQUFRLEVBQUU7RUFDWixDQUFDLENBQUM7RUFFRixPQUFPakIsUUFBUTtBQUNqQixDQUFDIiwiaWdub3JlTGlzdCI6W119
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmNnMGo2aG05cyIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwibmFtZXMiLCJzb3VyY2VSb290Iiwic291cmNlcyIsInNvdXJjZXNDb250ZW50IiwibWFwcGluZ3MiLCJpZ25vcmVMaXN0IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJGZWVkYmFjayIsImFzc29jaWF0ZSIsIm1vZGVscyIsImluaXQiLCJ1c2VySWQiLCJJTlRFR0VSIiwiZmFjaWxpdHkiLCJTVFJJTkciLCJsaWtlIiwiQk9PTEVBTiIsImNvbW1lbnQiLCJURVhUIiwibW9kZWxOYW1lIiwiYmVsb25nc1RvIiwiVXNlciIsImZvcmVpZ25LZXkiLCJvbkRlbGV0ZSIsIm9uVXBkYXRlIl0sInNvdXJjZXMiOlsiRDpcXHJpcHBlcnNcXHJpcHBlcnMtYm4tYmVcXG1vZGVsc1xcL2ZlZWRiYWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuY29uc3Qge1xyXG4gIE1vZGVsXHJcbn0gPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSAoc2VxdWVsaXplLCBEYXRhVHlwZXMpID0+IHtcclxuICBjbGFzcyBGZWVkYmFjayBleHRlbmRzIE1vZGVsIHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIG1ldGhvZCBmb3IgZGVmaW5pbmcgYXNzb2NpYXRpb25zLlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IGEgcGFydCBvZiBTZXF1ZWxpemUgbGlmZWN5Y2xlLlxyXG4gICAgICogVGhlIGBtb2RlbHMvaW5kZXhgIGZpbGUgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3NvY2lhdGUobW9kZWxzKSB7XHJcbiAgICAgIC8vIGRlZmluZSBhc3NvY2lhdGlvbiBoZXJlXHJcbiAgICB9XHJcbiAgfVxyXG4gIEZlZWRiYWNrLmluaXQoe1xyXG4gICAgdXNlcklkOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIGZhY2lsaXR5OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgbGlrZTogRGF0YVR5cGVzLkJPT0xFQU4sXHJcbiAgICBjb21tZW50OiBEYXRhVHlwZXMuVEVYVFxyXG4gIH0sIHtcclxuICAgIHNlcXVlbGl6ZSxcclxuICAgIG1vZGVsTmFtZTogJ0ZlZWRiYWNrJyxcclxuICB9KTtcclxuXHJcbiAgRmVlZGJhY2suYmVsb25nc1RvKG1vZGVscy5Vc2VyLCB7XHJcbiAgICBmb3JlaWduS2V5OiAndXNlcklkJyxcclxuICAgIG9uRGVsZXRlOiAnQ0FTQ0FERScsXHJcbiAgICBvblVwZGF0ZTogJ0NBU0NBREUnLFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gRmVlZGJhY2s7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLFVBQUFBLGVBQUEsTUFBQUMsSUFBQSx1REFBQUMsSUFBQSxnREFBQUMsTUFBQSxLQUFBQyxRQUFBLHNCQUFBQyxHQUFBLG9CQUFBQyxZQUFBLEVBQUFMLElBQUEsbURBQUFNLFlBQUEsT0FBQUMsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEdBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsT0FBQUUsS0FBQSxPQUFBQyxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLE1BQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxTQUFBSSxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxNQUFBTyxTQUFBLElBQUFDLENBQUEsaUNBQUFDLENBQUEsZUFBQUMsQ0FBQSxJQUFBQyxjQUFBLEVBQUFDLE9BQUEsR0FBQUMsS0FBQSxrUEFBQUMsVUFBQSx3Q0FBQUMsT0FBQSxpQkFBQUMsY0FBQSxpMEJBQUFDLFFBQUEscWxCQUFBQyxVQUFBLEtBQUFDLGVBQUEsNENBQUExQixJQUFBLGlEQUFBMkIsUUFBQSxDQUFBMUIsTUFBQSxDQUFBRSxHQUFBLElBQUFGLE1BQUEsQ0FBQUUsR0FBQSxVQUFBd0IsUUFBQSxDQUFBNUIsSUFBQSxHQUFBNEIsUUFBQSxDQUFBNUIsSUFBQSxFQUFBQyxJQUFBLEdBQUFBLElBQUEsRUFBQTJCLFFBQUEsQ0FBQTVCLElBQUEsRUFBQUssWUFBQSxNQUFBd0IsY0FBQSxDQUFBRCxRQUFBLENBQUE1QixJQUFBLEdBY1Y7QUFBQUQsY0FBQSxTQUFBQSxDQUFBLFNBQUE4QixjQUFBLFdBQUFBLGNBQUEsRUFBQTlCLGNBQUEsR0FiRixLQUFNLENBQ0orQixLQUNGLENBQUMsRUFBQS9CLGNBQUEsR0FBQWlCLENBQUEsTUFBR2UsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFBaEMsY0FBQSxHQUFBaUIsQ0FBQSxNQUN4QmdCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHLENBQUNDLFNBQVMsQ0FBRUMsU0FBUyxHQUFLLENBQUFwQyxjQUFBLEdBQUFrQixDQUFBLE1BQ3pDLEtBQU0sQ0FBQW1CLFFBQVEsUUFBUyxDQUFBTixLQUFNLENBQzNCO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FDSSxNQUFPLENBQUFPLFNBQVNBLENBQUNDLE1BQU0sQ0FBRSxDQUFBdkMsY0FBQSxHQUFBa0IsQ0FBQSxNQUN2QjtBQUVKLENBQUFsQixjQUFBLEdBQUFpQixDQUFBLE1BQ0FvQixRQUFRLENBQUNHLElBQUksQ0FBQyxDQUNaQyxNQUFNLENBQUVMLFNBQVMsQ0FBQ00sT0FBTyxDQUN6QkMsUUFBUSxDQUFFUCxTQUFTLENBQUNRLE1BQU0sQ0FDMUJDLElBQUksQ0FBRVQsU0FBUyxDQUFDVSxPQUFPLENBQ3ZCQyxPQUFPLENBQUVYLFNBQVMsQ0FBQ1ksSUFDckIsQ0FBQyxDQUFFLENBQ0RiLFNBQVMsQ0FDVGMsU0FBUyxDQUFFLFVBQ2IsQ0FBQyxDQUFDLENBQUFqRCxjQUFBLEdBQUFpQixDQUFBLE1BRUZvQixRQUFRLENBQUNhLFNBQVMsQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUUsQ0FDOUJDLFVBQVUsQ0FBRSxRQUFRLENBQ3BCQyxRQUFRLENBQUUsU0FBUyxDQUNuQkMsUUFBUSxDQUFFLFNBQ1osQ0FBQyxDQUFDLENBQUF0RCxjQUFBLEdBQUFpQixDQUFBLE1BRUYsTUFBTyxDQUFBb0IsUUFBUSxDQUNqQixDQUFDLEMiLCJpZ25vcmVMaXN0IjpbXX0=