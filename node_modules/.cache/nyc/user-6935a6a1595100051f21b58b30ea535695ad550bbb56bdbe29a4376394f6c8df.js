'use strict';function cov_1os13064o3(){var path="M:\\Production\\eric-nomad\\models\\user.js";var hash="fb3771de7f38ba9854d2943abb7ac22d76e86cd2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"M:\\Production\\eric-nomad\\models\\user.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:60,column:2}},"2":{start:{line:15,column:6},end:{line:18,column:9}},"3":{start:{line:19,column:6},end:{line:23,column:9}},"4":{start:{line:26,column:2},end:{line:43,column:5}},"5":{start:{line:59,column:2},end:{line:59,column:14}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:60,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:24,column:5}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","User","associate","models","hasMany","Trip","foreignKey","as","Feedback","onDelete","onUpdate","init","firstName","STRING","lastName","email","birthOfDate","DATEONLY","preferredLanguage","preferredCurrency","whereYouLive","role","department","lineManager","password","gender","telephoneNumber","modelName"],sourceRoot:"M:\\Production\\eric-nomad\\models\\",sources:["user.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class User extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // Define associations here\r\n      User.hasMany(models.Trip, {\r\n        foreignKey: \"userId\",\r\n        as: \"trips\",\r\n      });\r\n\r\n      User.hasMany(models.Feedback, {\r\n        foreignKey: 'userId',\r\n        onDelete: 'CASCADE',\r\n        onUpdate: 'CASCADE',\r\n      });\r\n    }\r\n  }\r\n  User.init({\r\n    firstName: DataTypes.STRING,\r\n    lastName: DataTypes.STRING,\r\n    email: DataTypes.STRING,\r\n    birthOfDate: DataTypes.DATEONLY,\r\n    preferredLanguage: DataTypes.STRING,\r\n    preferredCurrency: DataTypes.STRING,\r\n    whereYouLive: DataTypes.STRING,\r\n    role: DataTypes.STRING,\r\n    department: DataTypes.STRING,\r\n    lineManager: DataTypes.STRING,\r\n    password : DataTypes.STRING,\r\n    gender: DataTypes.STRING,\r\n    telephoneNumber: DataTypes.STRING\r\n  }, {\r\n    sequelize,\r\n    modelName: 'User',\r\n  });\r\n  \r\n  // User.associate = (models) => {\r\n  //   // Existing associations\r\n  //   User.hasMany(models.Trip, {\r\n  //     foreignKey: \"userId\",\r\n  //     as: \"trips\",\r\n  //   });\r\n  // };\r\n\r\n  // User.hasMany(models.Feedback, {\r\n  //   foreignKey: 'userId',\r\n  //   onDelete: 'CASCADE',\r\n  //   onUpdate: 'CASCADE',\r\n  // });\r\n\r\n  return User;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,IAAI,SAASN,KAAK,CAAC;IACvB;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;MACAF,IAAI,CAACG,OAAO,CAACD,MAAM,CAACE,IAAI,EAAE;QACxBC,UAAU,EAAE,QAAQ;QACpBC,EAAE,EAAE;MACN,CAAC,CAAC;MAEFN,IAAI,CAACG,OAAO,CAACD,MAAM,CAACK,QAAQ,EAAE;QAC5BF,UAAU,EAAE,QAAQ;QACpBG,QAAQ,EAAE,SAAS;QACnBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF;EACAT,IAAI,CAACU,IAAI,CAAC;IACRC,SAAS,EAAEZ,SAAS,CAACa,MAAM;IAC3BC,QAAQ,EAAEd,SAAS,CAACa,MAAM;IAC1BE,KAAK,EAAEf,SAAS,CAACa,MAAM;IACvBG,WAAW,EAAEhB,SAAS,CAACiB,QAAQ;IAC/BC,iBAAiB,EAAElB,SAAS,CAACa,MAAM;IACnCM,iBAAiB,EAAEnB,SAAS,CAACa,MAAM;IACnCO,YAAY,EAAEpB,SAAS,CAACa,MAAM;IAC9BQ,IAAI,EAAErB,SAAS,CAACa,MAAM;IACtBS,UAAU,EAAEtB,SAAS,CAACa,MAAM;IAC5BU,WAAW,EAAEvB,SAAS,CAACa,MAAM;IAC7BW,QAAQ,EAAGxB,SAAS,CAACa,MAAM;IAC3BY,MAAM,EAAEzB,SAAS,CAACa,MAAM;IACxBa,eAAe,EAAE1B,SAAS,CAACa;EAC7B,CAAC,EAAE;IACDd,SAAS;IACT4B,SAAS,EAAE;EACb,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,OAAO1B,IAAI;AACb,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fb3771de7f38ba9854d2943abb7ac22d76e86cd2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1os13064o3=function(){return actualCoverage;};}return actualCoverage;}cov_1os13064o3();const{Model}=(cov_1os13064o3().s[0]++,require('sequelize'));cov_1os13064o3().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_1os13064o3().f[0]++;class User extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_1os13064o3().f[1]++;cov_1os13064o3().s[2]++;// Define associations here
User.hasMany(models.Trip,{foreignKey:"userId",as:"trips"});cov_1os13064o3().s[3]++;User.hasMany(models.Feedback,{foreignKey:'userId',onDelete:'CASCADE',onUpdate:'CASCADE'});}}cov_1os13064o3().s[4]++;User.init({firstName:DataTypes.STRING,lastName:DataTypes.STRING,email:DataTypes.STRING,birthOfDate:DataTypes.DATEONLY,preferredLanguage:DataTypes.STRING,preferredCurrency:DataTypes.STRING,whereYouLive:DataTypes.STRING,role:DataTypes.STRING,department:DataTypes.STRING,lineManager:DataTypes.STRING,password:DataTypes.STRING,gender:DataTypes.STRING,telephoneNumber:DataTypes.STRING},{sequelize,modelName:'User'});// User.associate = (models) => {
//   // Existing associations
//   User.hasMany(models.Trip, {
//     foreignKey: "userId",
//     as: "trips",
//   });
// };
// User.hasMany(models.Feedback, {
//   foreignKey: 'userId',
//   onDelete: 'CASCADE',
//   onUpdate: 'CASCADE',
// });
cov_1os13064o3().s[5]++;return User;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiVXNlciIsImFzc29jaWF0ZSIsIm1vZGVscyIsImhhc01hbnkiLCJUcmlwIiwiZm9yZWlnbktleSIsImFzIiwiRmVlZGJhY2siLCJvbkRlbGV0ZSIsIm9uVXBkYXRlIiwiaW5pdCIsImZpcnN0TmFtZSIsIlNUUklORyIsImxhc3ROYW1lIiwiZW1haWwiLCJiaXJ0aE9mRGF0ZSIsIkRBVEVPTkxZIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJwcmVmZXJyZWRDdXJyZW5jeSIsIndoZXJlWW91TGl2ZSIsInJvbGUiLCJkZXBhcnRtZW50IiwibGluZU1hbmFnZXIiLCJwYXNzd29yZCIsImdlbmRlciIsInRlbGVwaG9uZU51bWJlciIsIm1vZGVsTmFtZSJdLCJzb3VyY2VSb290IjoiTTpcXFByb2R1Y3Rpb25cXGVyaWMtbm9tYWRcXG1vZGVsc1xcIiwic291cmNlcyI6WyJ1c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuY29uc3Qge1xyXG4gIE1vZGVsXHJcbn0gPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSAoc2VxdWVsaXplLCBEYXRhVHlwZXMpID0+IHtcclxuICBjbGFzcyBVc2VyIGV4dGVuZHMgTW9kZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciBkZWZpbmluZyBhc3NvY2lhdGlvbnMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXHJcbiAgICAgKiBUaGUgYG1vZGVscy9pbmRleGAgZmlsZSB3aWxsIGNhbGwgdGhpcyBtZXRob2QgYXV0b21hdGljYWxseS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFzc29jaWF0ZShtb2RlbHMpIHtcclxuICAgICAgLy8gRGVmaW5lIGFzc29jaWF0aW9ucyBoZXJlXHJcbiAgICAgIFVzZXIuaGFzTWFueShtb2RlbHMuVHJpcCwge1xyXG4gICAgICAgIGZvcmVpZ25LZXk6IFwidXNlcklkXCIsXHJcbiAgICAgICAgYXM6IFwidHJpcHNcIixcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBVc2VyLmhhc01hbnkobW9kZWxzLkZlZWRiYWNrLCB7XHJcbiAgICAgICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgICAgICAgb25EZWxldGU6ICdDQVNDQURFJyxcclxuICAgICAgICBvblVwZGF0ZTogJ0NBU0NBREUnLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgVXNlci5pbml0KHtcclxuICAgIGZpcnN0TmFtZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGxhc3ROYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZW1haWw6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBiaXJ0aE9mRGF0ZTogRGF0YVR5cGVzLkRBVEVPTkxZLFxyXG4gICAgcHJlZmVycmVkTGFuZ3VhZ2U6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBwcmVmZXJyZWRDdXJyZW5jeTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHdoZXJlWW91TGl2ZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHJvbGU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBkZXBhcnRtZW50OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgbGluZU1hbmFnZXI6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBwYXNzd29yZCA6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBnZW5kZXI6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICB0ZWxlcGhvbmVOdW1iZXI6IERhdGFUeXBlcy5TVFJJTkdcclxuICB9LCB7XHJcbiAgICBzZXF1ZWxpemUsXHJcbiAgICBtb2RlbE5hbWU6ICdVc2VyJyxcclxuICB9KTtcclxuICBcclxuICAvLyBVc2VyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcclxuICAvLyAgIC8vIEV4aXN0aW5nIGFzc29jaWF0aW9uc1xyXG4gIC8vICAgVXNlci5oYXNNYW55KG1vZGVscy5UcmlwLCB7XHJcbiAgLy8gICAgIGZvcmVpZ25LZXk6IFwidXNlcklkXCIsXHJcbiAgLy8gICAgIGFzOiBcInRyaXBzXCIsXHJcbiAgLy8gICB9KTtcclxuICAvLyB9O1xyXG5cclxuICAvLyBVc2VyLmhhc01hbnkobW9kZWxzLkZlZWRiYWNrLCB7XHJcbiAgLy8gICBmb3JlaWduS2V5OiAndXNlcklkJyxcclxuICAvLyAgIG9uRGVsZXRlOiAnQ0FTQ0FERScsXHJcbiAgLy8gICBvblVwZGF0ZTogJ0NBU0NBREUnLFxyXG4gIC8vIH0pO1xyXG5cclxuICByZXR1cm4gVXNlcjtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1osTUFBTTtFQUNKQTtBQUNGLENBQUMsR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUN4QkMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFQyxTQUFTLEtBQUs7RUFDekMsTUFBTUMsSUFBSSxTQUFTTixLQUFLLENBQUM7SUFDdkI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtJQUNJLE9BQU9PLFNBQVNBLENBQUNDLE1BQU0sRUFBRTtNQUN2QjtNQUNBRixJQUFJLENBQUNHLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDRSxJQUFJLEVBQUU7UUFDeEJDLFVBQVUsRUFBRSxRQUFRO1FBQ3BCQyxFQUFFLEVBQUU7TUFDTixDQUFDLENBQUM7TUFFRk4sSUFBSSxDQUFDRyxPQUFPLENBQUNELE1BQU0sQ0FBQ0ssUUFBUSxFQUFFO1FBQzVCRixVQUFVLEVBQUUsUUFBUTtRQUNwQkcsUUFBUSxFQUFFLFNBQVM7UUFDbkJDLFFBQVEsRUFBRTtNQUNaLENBQUMsQ0FBQztJQUNKO0VBQ0Y7RUFDQVQsSUFBSSxDQUFDVSxJQUFJLENBQUM7SUFDUkMsU0FBUyxFQUFFWixTQUFTLENBQUNhLE1BQU07SUFDM0JDLFFBQVEsRUFBRWQsU0FBUyxDQUFDYSxNQUFNO0lBQzFCRSxLQUFLLEVBQUVmLFNBQVMsQ0FBQ2EsTUFBTTtJQUN2QkcsV0FBVyxFQUFFaEIsU0FBUyxDQUFDaUIsUUFBUTtJQUMvQkMsaUJBQWlCLEVBQUVsQixTQUFTLENBQUNhLE1BQU07SUFDbkNNLGlCQUFpQixFQUFFbkIsU0FBUyxDQUFDYSxNQUFNO0lBQ25DTyxZQUFZLEVBQUVwQixTQUFTLENBQUNhLE1BQU07SUFDOUJRLElBQUksRUFBRXJCLFNBQVMsQ0FBQ2EsTUFBTTtJQUN0QlMsVUFBVSxFQUFFdEIsU0FBUyxDQUFDYSxNQUFNO0lBQzVCVSxXQUFXLEVBQUV2QixTQUFTLENBQUNhLE1BQU07SUFDN0JXLFFBQVEsRUFBR3hCLFNBQVMsQ0FBQ2EsTUFBTTtJQUMzQlksTUFBTSxFQUFFekIsU0FBUyxDQUFDYSxNQUFNO0lBQ3hCYSxlQUFlLEVBQUUxQixTQUFTLENBQUNhO0VBQzdCLENBQUMsRUFBRTtJQUNEZCxTQUFTO0lBQ1Q0QixTQUFTLEVBQUU7RUFDYixDQUFDLENBQUM7O0VBRUY7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQSxPQUFPMUIsSUFBSTtBQUNiLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMW9zMTMwNjRvMyIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwibmFtZXMiLCJzb3VyY2VSb290Iiwic291cmNlcyIsInNvdXJjZXNDb250ZW50IiwibWFwcGluZ3MiLCJpZ25vcmVMaXN0IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJVc2VyIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiaGFzTWFueSIsIlRyaXAiLCJmb3JlaWduS2V5IiwiYXMiLCJGZWVkYmFjayIsIm9uRGVsZXRlIiwib25VcGRhdGUiLCJpbml0IiwiZmlyc3ROYW1lIiwiU1RSSU5HIiwibGFzdE5hbWUiLCJlbWFpbCIsImJpcnRoT2ZEYXRlIiwiREFURU9OTFkiLCJwcmVmZXJyZWRMYW5ndWFnZSIsInByZWZlcnJlZEN1cnJlbmN5Iiwid2hlcmVZb3VMaXZlIiwicm9sZSIsImRlcGFydG1lbnQiLCJsaW5lTWFuYWdlciIsInBhc3N3b3JkIiwiZ2VuZGVyIiwidGVsZXBob25lTnVtYmVyIiwibW9kZWxOYW1lIl0sInNvdXJjZXMiOlsiTTpcXFByb2R1Y3Rpb25cXGVyaWMtbm9tYWRcXG1vZGVsc1xcL3VzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5jb25zdCB7XHJcbiAgTW9kZWxcclxufSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IChzZXF1ZWxpemUsIERhdGFUeXBlcykgPT4ge1xyXG4gIGNsYXNzIFVzZXIgZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgU2VxdWVsaXplIGxpZmVjeWNsZS5cclxuICAgICAqIFRoZSBgbW9kZWxzL2luZGV4YCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBEZWZpbmUgYXNzb2NpYXRpb25zIGhlcmVcclxuICAgICAgVXNlci5oYXNNYW55KG1vZGVscy5UcmlwLCB7XHJcbiAgICAgICAgZm9yZWlnbktleTogXCJ1c2VySWRcIixcclxuICAgICAgICBhczogXCJ0cmlwc1wiLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIFVzZXIuaGFzTWFueShtb2RlbHMuRmVlZGJhY2ssIHtcclxuICAgICAgICBmb3JlaWduS2V5OiAndXNlcklkJyxcclxuICAgICAgICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gICAgICAgIG9uVXBkYXRlOiAnQ0FTQ0FERScsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBVc2VyLmluaXQoe1xyXG4gICAgZmlyc3ROYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgbGFzdE5hbWU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBlbWFpbDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGJpcnRoT2ZEYXRlOiBEYXRhVHlwZXMuREFURU9OTFksXHJcbiAgICBwcmVmZXJyZWRMYW5ndWFnZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHByZWZlcnJlZEN1cnJlbmN5OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgd2hlcmVZb3VMaXZlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgcm9sZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGRlcGFydG1lbnQ6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBsaW5lTWFuYWdlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHBhc3N3b3JkIDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGdlbmRlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHRlbGVwaG9uZU51bWJlcjogRGF0YVR5cGVzLlNUUklOR1xyXG4gIH0sIHtcclxuICAgIHNlcXVlbGl6ZSxcclxuICAgIG1vZGVsTmFtZTogJ1VzZXInLFxyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIFVzZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xyXG4gIC8vICAgLy8gRXhpc3RpbmcgYXNzb2NpYXRpb25zXHJcbiAgLy8gICBVc2VyLmhhc01hbnkobW9kZWxzLlRyaXAsIHtcclxuICAvLyAgICAgZm9yZWlnbktleTogXCJ1c2VySWRcIixcclxuICAvLyAgICAgYXM6IFwidHJpcHNcIixcclxuICAvLyAgIH0pO1xyXG4gIC8vIH07XHJcblxyXG4gIC8vIFVzZXIuaGFzTWFueShtb2RlbHMuRmVlZGJhY2ssIHtcclxuICAvLyAgIGZvcmVpZ25LZXk6ICd1c2VySWQnLFxyXG4gIC8vICAgb25EZWxldGU6ICdDQVNDQURFJyxcclxuICAvLyAgIG9uVXBkYXRlOiAnQ0FTQ0FERScsXHJcbiAgLy8gfSk7XHJcblxyXG4gIHJldHVybiBVc2VyO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxVQUFBQSxlQUFBLE1BQUFDLElBQUEsbURBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLCtDQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFFLEtBQUEsT0FBQUMsSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsR0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsU0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsTUFBQU8sU0FBQSxJQUFBQyxDQUFBLHVDQUFBQyxDQUFBLGVBQUFDLENBQUEsSUFBQUMsY0FBQSxFQUFBQyxPQUFBLEdBQUFDLEtBQUEsbVhBQUFDLFVBQUEsd0NBQUFDLE9BQUEsYUFBQUMsY0FBQSx5bkRBQUFDLFFBQUEsNGpDQUFBQyxVQUFBLEtBQUFDLGVBQUEsNENBQUExQixJQUFBLGlEQUFBMkIsUUFBQSxDQUFBMUIsTUFBQSxDQUFBRSxHQUFBLElBQUFGLE1BQUEsQ0FBQUUsR0FBQSxVQUFBd0IsUUFBQSxDQUFBNUIsSUFBQSxHQUFBNEIsUUFBQSxDQUFBNUIsSUFBQSxFQUFBQyxJQUFBLEdBQUFBLElBQUEsRUFBQTJCLFFBQUEsQ0FBQTVCLElBQUEsRUFBQUssWUFBQSxNQUFBd0IsY0FBQSxDQUFBRCxRQUFBLENBQUE1QixJQUFBLEdBY0o7QUFBQUQsY0FBQSxTQUFBQSxDQUFBLFNBQUE4QixjQUFBLFdBQUFBLGNBQUEsRUFBQTlCLGNBQUEsR0FiUixLQUFNLENBQ0orQixLQUNGLENBQUMsRUFBQS9CLGNBQUEsR0FBQWlCLENBQUEsTUFBR2UsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFBaEMsY0FBQSxHQUFBaUIsQ0FBQSxNQUN4QmdCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHLENBQUNDLFNBQVMsQ0FBRUMsU0FBUyxHQUFLLENBQUFwQyxjQUFBLEdBQUFrQixDQUFBLE1BQ3pDLEtBQU0sQ0FBQW1CLElBQUksUUFBUyxDQUFBTixLQUFNLENBQ3ZCO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FDSSxNQUFPLENBQUFPLFNBQVNBLENBQUNDLE1BQU0sQ0FBRSxDQUFBdkMsY0FBQSxHQUFBa0IsQ0FBQSxNQUFBbEIsY0FBQSxHQUFBaUIsQ0FBQSxNQUN2QjtBQUNBb0IsSUFBSSxDQUFDRyxPQUFPLENBQUNELE1BQU0sQ0FBQ0UsSUFBSSxDQUFFLENBQ3hCQyxVQUFVLENBQUUsUUFBUSxDQUNwQkMsRUFBRSxDQUFFLE9BQ04sQ0FBQyxDQUFDLENBQUEzQyxjQUFBLEdBQUFpQixDQUFBLE1BRUZvQixJQUFJLENBQUNHLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDSyxRQUFRLENBQUUsQ0FDNUJGLFVBQVUsQ0FBRSxRQUFRLENBQ3BCRyxRQUFRLENBQUUsU0FBUyxDQUNuQkMsUUFBUSxDQUFFLFNBQ1osQ0FBQyxDQUFDLENBQ0osQ0FDRixDQUFBOUMsY0FBQSxHQUFBaUIsQ0FBQSxNQUNBb0IsSUFBSSxDQUFDVSxJQUFJLENBQUMsQ0FDUkMsU0FBUyxDQUFFWixTQUFTLENBQUNhLE1BQU0sQ0FDM0JDLFFBQVEsQ0FBRWQsU0FBUyxDQUFDYSxNQUFNLENBQzFCRSxLQUFLLENBQUVmLFNBQVMsQ0FBQ2EsTUFBTSxDQUN2QkcsV0FBVyxDQUFFaEIsU0FBUyxDQUFDaUIsUUFBUSxDQUMvQkMsaUJBQWlCLENBQUVsQixTQUFTLENBQUNhLE1BQU0sQ0FDbkNNLGlCQUFpQixDQUFFbkIsU0FBUyxDQUFDYSxNQUFNLENBQ25DTyxZQUFZLENBQUVwQixTQUFTLENBQUNhLE1BQU0sQ0FDOUJRLElBQUksQ0FBRXJCLFNBQVMsQ0FBQ2EsTUFBTSxDQUN0QlMsVUFBVSxDQUFFdEIsU0FBUyxDQUFDYSxNQUFNLENBQzVCVSxXQUFXLENBQUV2QixTQUFTLENBQUNhLE1BQU0sQ0FDN0JXLFFBQVEsQ0FBR3hCLFNBQVMsQ0FBQ2EsTUFBTSxDQUMzQlksTUFBTSxDQUFFekIsU0FBUyxDQUFDYSxNQUFNLENBQ3hCYSxlQUFlLENBQUUxQixTQUFTLENBQUNhLE1BQzdCLENBQUMsQ0FBRSxDQUNEZCxTQUFTLENBQ1Q0QixTQUFTLENBQUUsTUFDYixDQUFDLENBQUMsQ0FFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQS9ELGNBQUEsR0FBQWlCLENBQUEsTUFFQSxNQUFPLENBQUFvQixJQUFJLENBQ2IsQ0FBQyxDIiwiaWdub3JlTGlzdCI6W119