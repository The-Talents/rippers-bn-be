'use strict';function cov_2mfi0qkh9(){var path="M:\\Production\\eric-nomad\\models\\notification.js";var hash="9b030d7e271963a4a8159bdbfbf8d563a4358bce";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"M:\\Production\\eric-nomad\\models\\notification.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:27,column:2}},"2":{start:{line:17,column:2},end:{line:25,column:5}},"3":{start:{line:26,column:2},end:{line:26,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:27,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:15,column:5}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","Notification","associate","models","init","message","TEXT","receiver","INTEGER","sender","status","STRING","modelName"],sourceRoot:"M:\\Production\\eric-nomad\\models\\",sources:["notification.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class Notification extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // define association here\r\n    }\r\n  }\r\n  Notification.init({\r\n    message: DataTypes.TEXT,\r\n    receiver: DataTypes.INTEGER,\r\n    sender: DataTypes.INTEGER,\r\n    status: DataTypes.STRING\r\n  }, {\r\n    sequelize,\r\n    modelName: 'Notification',\r\n  });\r\n  return Notification;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,YAAY,SAASN,KAAK,CAAC;IAC/B;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;IAAA;EAEJ;EACAF,YAAY,CAACG,IAAI,CAAC;IAChBC,OAAO,EAAEL,SAAS,CAACM,IAAI;IACvBC,QAAQ,EAAEP,SAAS,CAACQ,OAAO;IAC3BC,MAAM,EAAET,SAAS,CAACQ,OAAO;IACzBE,MAAM,EAAEV,SAAS,CAACW;EACpB,CAAC,EAAE;IACDZ,SAAS;IACTa,SAAS,EAAE;EACb,CAAC,CAAC;EACF,OAAOX,YAAY;AACrB,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9b030d7e271963a4a8159bdbfbf8d563a4358bce"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2mfi0qkh9=function(){return actualCoverage;};}return actualCoverage;}cov_2mfi0qkh9();const{Model}=(cov_2mfi0qkh9().s[0]++,require('sequelize'));cov_2mfi0qkh9().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_2mfi0qkh9().f[0]++;class Notification extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_2mfi0qkh9().f[1]++;}// define association here
}cov_2mfi0qkh9().s[2]++;Notification.init({message:DataTypes.TEXT,receiver:DataTypes.INTEGER,sender:DataTypes.INTEGER,status:DataTypes.STRING},{sequelize,modelName:'Notification'});cov_2mfi0qkh9().s[3]++;return Notification;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiTm90aWZpY2F0aW9uIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiaW5pdCIsIm1lc3NhZ2UiLCJURVhUIiwicmVjZWl2ZXIiLCJJTlRFR0VSIiwic2VuZGVyIiwic3RhdHVzIiwiU1RSSU5HIiwibW9kZWxOYW1lIl0sInNvdXJjZVJvb3QiOiJNOlxcUHJvZHVjdGlvblxcZXJpYy1ub21hZFxcbW9kZWxzXFwiLCJzb3VyY2VzIjpbIm5vdGlmaWNhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNvbnN0IHtcclxuICBNb2RlbFxyXG59ID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgTm90aWZpY2F0aW9uIGV4dGVuZHMgTW9kZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciBkZWZpbmluZyBhc3NvY2lhdGlvbnMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXHJcbiAgICAgKiBUaGUgYG1vZGVscy9pbmRleGAgZmlsZSB3aWxsIGNhbGwgdGhpcyBtZXRob2QgYXV0b21hdGljYWxseS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFzc29jaWF0ZShtb2RlbHMpIHtcclxuICAgICAgLy8gZGVmaW5lIGFzc29jaWF0aW9uIGhlcmVcclxuICAgIH1cclxuICB9XHJcbiAgTm90aWZpY2F0aW9uLmluaXQoe1xyXG4gICAgbWVzc2FnZTogRGF0YVR5cGVzLlRFWFQsXHJcbiAgICByZWNlaXZlcjogRGF0YVR5cGVzLklOVEVHRVIsXHJcbiAgICBzZW5kZXI6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgc3RhdHVzOiBEYXRhVHlwZXMuU1RSSU5HXHJcbiAgfSwge1xyXG4gICAgc2VxdWVsaXplLFxyXG4gICAgbW9kZWxOYW1lOiAnTm90aWZpY2F0aW9uJyxcclxuICB9KTtcclxuICByZXR1cm4gTm90aWZpY2F0aW9uO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWixNQUFNO0VBQ0pBO0FBQ0YsQ0FBQyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3hCQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxTQUFTLEVBQUVDLFNBQVMsS0FBSztFQUN6QyxNQUFNQyxZQUFZLFNBQVNOLEtBQUssQ0FBQztJQUMvQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksT0FBT08sU0FBU0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ3ZCO0lBQUE7RUFFSjtFQUNBRixZQUFZLENBQUNHLElBQUksQ0FBQztJQUNoQkMsT0FBTyxFQUFFTCxTQUFTLENBQUNNLElBQUk7SUFDdkJDLFFBQVEsRUFBRVAsU0FBUyxDQUFDUSxPQUFPO0lBQzNCQyxNQUFNLEVBQUVULFNBQVMsQ0FBQ1EsT0FBTztJQUN6QkUsTUFBTSxFQUFFVixTQUFTLENBQUNXO0VBQ3BCLENBQUMsRUFBRTtJQUNEWixTQUFTO0lBQ1RhLFNBQVMsRUFBRTtFQUNiLENBQUMsQ0FBQztFQUNGLE9BQU9YLFlBQVk7QUFDckIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMm1maTBxa2g5IiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJzIiwiZiIsImIiLCJpbnB1dFNvdXJjZU1hcCIsInZlcnNpb24iLCJuYW1lcyIsInNvdXJjZVJvb3QiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJtYXBwaW5ncyIsImlnbm9yZUxpc3QiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiTW9kZWwiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcXVlbGl6ZSIsIkRhdGFUeXBlcyIsIk5vdGlmaWNhdGlvbiIsImFzc29jaWF0ZSIsIm1vZGVscyIsImluaXQiLCJtZXNzYWdlIiwiVEVYVCIsInJlY2VpdmVyIiwiSU5URUdFUiIsInNlbmRlciIsInN0YXR1cyIsIlNUUklORyIsIm1vZGVsTmFtZSJdLCJzb3VyY2VzIjpbIk06XFxQcm9kdWN0aW9uXFxlcmljLW5vbWFkXFxtb2RlbHNcXC9ub3RpZmljYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5jb25zdCB7XHJcbiAgTW9kZWxcclxufSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IChzZXF1ZWxpemUsIERhdGFUeXBlcykgPT4ge1xyXG4gIGNsYXNzIE5vdGlmaWNhdGlvbiBleHRlbmRzIE1vZGVsIHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIG1ldGhvZCBmb3IgZGVmaW5pbmcgYXNzb2NpYXRpb25zLlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IGEgcGFydCBvZiBTZXF1ZWxpemUgbGlmZWN5Y2xlLlxyXG4gICAgICogVGhlIGBtb2RlbHMvaW5kZXhgIGZpbGUgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3NvY2lhdGUobW9kZWxzKSB7XHJcbiAgICAgIC8vIGRlZmluZSBhc3NvY2lhdGlvbiBoZXJlXHJcbiAgICB9XHJcbiAgfVxyXG4gIE5vdGlmaWNhdGlvbi5pbml0KHtcclxuICAgIG1lc3NhZ2U6IERhdGFUeXBlcy5URVhULFxyXG4gICAgcmVjZWl2ZXI6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgc2VuZGVyOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIHN0YXR1czogRGF0YVR5cGVzLlNUUklOR1xyXG4gIH0sIHtcclxuICAgIHNlcXVlbGl6ZSxcclxuICAgIG1vZGVsTmFtZTogJ05vdGlmaWNhdGlvbicsXHJcbiAgfSk7XHJcbiAgcmV0dXJuIE5vdGlmaWNhdGlvbjtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksVUFBQUEsY0FBQSxNQUFBQyxJQUFBLDJEQUFBQyxJQUFBLGdEQUFBQyxNQUFBLEtBQUFDLFFBQUEsc0JBQUFDLEdBQUEsb0JBQUFDLFlBQUEsRUFBQUwsSUFBQSx1REFBQU0sWUFBQSxPQUFBQyxLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsR0FBQUMsTUFBQSxXQUFBRixLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRSxLQUFBLE9BQUFDLElBQUEsaUJBQUFDLElBQUEsRUFBQU4sS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEdBQUFDLE1BQUEsTUFBQUssR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBRCxJQUFBLFNBQUFJLElBQUEsaUJBQUFDLElBQUEsRUFBQU4sS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUssR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBRCxJQUFBLE1BQUFPLFNBQUEsSUFBQUMsQ0FBQSwyQkFBQUMsQ0FBQSxlQUFBQyxDQUFBLElBQUFDLGNBQUEsRUFBQUMsT0FBQSxHQUFBQyxLQUFBLHdMQUFBQyxVQUFBLHdDQUFBQyxPQUFBLHFCQUFBQyxjQUFBLHNzQkFBQUMsUUFBQSx3ZEFBQUMsVUFBQSxLQUFBQyxlQUFBLDRDQUFBMUIsSUFBQSxpREFBQTJCLFFBQUEsQ0FBQTFCLE1BQUEsQ0FBQUUsR0FBQSxJQUFBRixNQUFBLENBQUFFLEdBQUEsVUFBQXdCLFFBQUEsQ0FBQTVCLElBQUEsR0FBQTRCLFFBQUEsQ0FBQTVCLElBQUEsRUFBQUMsSUFBQSxHQUFBQSxJQUFBLEVBQUEyQixRQUFBLENBQUE1QixJQUFBLEVBQUFLLFlBQUEsTUFBQXdCLGNBQUEsQ0FBQUQsUUFBQSxDQUFBNUIsSUFBQSxHQWNWO0FBQUFELGFBQUEsU0FBQUEsQ0FBQSxTQUFBOEIsY0FBQSxXQUFBQSxjQUFBLEVBQUE5QixhQUFBLEdBYkYsS0FBTSxDQUNKK0IsS0FDRixDQUFDLEVBQUEvQixhQUFBLEdBQUFpQixDQUFBLE1BQUdlLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBQWhDLGFBQUEsR0FBQWlCLENBQUEsTUFDeEJnQixNQUFNLENBQUNDLE9BQU8sQ0FBRyxDQUFDQyxTQUFTLENBQUVDLFNBQVMsR0FBSyxDQUFBcEMsYUFBQSxHQUFBa0IsQ0FBQSxNQUN6QyxLQUFNLENBQUFtQixZQUFZLFFBQVMsQ0FBQU4sS0FBTSxDQUMvQjtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQ0ksTUFBTyxDQUFBTyxTQUFTQSxDQUFDQyxNQUFNLENBQUUsQ0FBQXZDLGFBQUEsR0FBQWtCLENBQUEsTUFDdkI7QUFFSixDQUFBbEIsYUFBQSxHQUFBaUIsQ0FBQSxNQUNBb0IsWUFBWSxDQUFDRyxJQUFJLENBQUMsQ0FDaEJDLE9BQU8sQ0FBRUwsU0FBUyxDQUFDTSxJQUFJLENBQ3ZCQyxRQUFRLENBQUVQLFNBQVMsQ0FBQ1EsT0FBTyxDQUMzQkMsTUFBTSxDQUFFVCxTQUFTLENBQUNRLE9BQU8sQ0FDekJFLE1BQU0sQ0FBRVYsU0FBUyxDQUFDVyxNQUNwQixDQUFDLENBQUUsQ0FDRFosU0FBUyxDQUNUYSxTQUFTLENBQUUsY0FDYixDQUFDLENBQUMsQ0FBQWhELGFBQUEsR0FBQWlCLENBQUEsTUFDRixNQUFPLENBQUFvQixZQUFZLENBQ3JCLENBQUMsQyIsImlnbm9yZUxpc3QiOltdfQ==