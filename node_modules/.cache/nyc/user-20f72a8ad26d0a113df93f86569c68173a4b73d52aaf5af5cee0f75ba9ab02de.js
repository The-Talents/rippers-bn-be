'use strict';function cov_2jjs9uqxjf(){var path="D:\\rippers\\rippers-bn-be\\models\\user.js";var hash="6fd3ad1f52e78a38d071d4b5c2b10db3cc0f124b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\rippers\\rippers-bn-be\\models\\user.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:59,column:2}},"2":{start:{line:15,column:6},end:{line:18,column:9}},"3":{start:{line:19,column:6},end:{line:23,column:9}},"4":{start:{line:26,column:2},end:{line:42,column:5}},"5":{start:{line:58,column:2},end:{line:58,column:14}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:59,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:24,column:5}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","User","associate","models","hasMany","Trip","foreignKey","as","Feedback","onDelete","onUpdate","init","firstName","STRING","lastName","email","birthOfDate","DATEONLY","preferredLanguage","preferredCurrency","whereYouLive","role","department","lineManager","gender","telephoneNumber","modelName"],sourceRoot:"D:\\rippers\\rippers-bn-be\\models\\",sources:["user.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class User extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The models/index file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // Define associations here\r\n      User.hasMany(models.Trip, {\r\n        foreignKey: \"userId\",\r\n        as: \"trips\",\r\n      });\r\n\r\n      User.hasMany(models.Feedback, {\r\n        foreignKey: 'userId',\r\n        onDelete: 'CASCADE',\r\n        onUpdate: 'CASCADE',\r\n      });\r\n    }\r\n  }\r\n  User.init({\r\n    firstName: DataTypes.STRING,\r\n    lastName: DataTypes.STRING,\r\n    email: DataTypes.STRING,\r\n    birthOfDate: DataTypes.DATEONLY,\r\n    preferredLanguage: DataTypes.STRING,\r\n    preferredCurrency: DataTypes.STRING,\r\n    whereYouLive: DataTypes.STRING,\r\n    role: DataTypes.STRING,\r\n    department: DataTypes.STRING,\r\n    lineManager: DataTypes.STRING,\r\n    gender: DataTypes.STRING,\r\n    telephoneNumber: DataTypes.STRING\r\n  }, {\r\n    sequelize,\r\n    modelName: 'User',\r\n  });\r\n  \r\n  // User.associate = (models) => {\r\n  //   // Existing associations\r\n  //   User.hasMany(models.Trip, {\r\n  //     foreignKey: \"userId\",\r\n  //     as: \"trips\",\r\n  //   });\r\n  // };\r\n\r\n  // User.hasMany(models.Feedback, {\r\n  //   foreignKey: 'userId',\r\n  //   onDelete: 'CASCADE',\r\n  //   onUpdate: 'CASCADE',\r\n  // });\r\n\r\n  return User;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,IAAI,SAASN,KAAK,CAAC;IACvB;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;MACAF,IAAI,CAACG,OAAO,CAACD,MAAM,CAACE,IAAI,EAAE;QACxBC,UAAU,EAAE,QAAQ;QACpBC,EAAE,EAAE;MACN,CAAC,CAAC;MAEFN,IAAI,CAACG,OAAO,CAACD,MAAM,CAACK,QAAQ,EAAE;QAC5BF,UAAU,EAAE,QAAQ;QACpBG,QAAQ,EAAE,SAAS;QACnBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF;EACAT,IAAI,CAACU,IAAI,CAAC;IACRC,SAAS,EAAEZ,SAAS,CAACa,MAAM;IAC3BC,QAAQ,EAAEd,SAAS,CAACa,MAAM;IAC1BE,KAAK,EAAEf,SAAS,CAACa,MAAM;IACvBG,WAAW,EAAEhB,SAAS,CAACiB,QAAQ;IAC/BC,iBAAiB,EAAElB,SAAS,CAACa,MAAM;IACnCM,iBAAiB,EAAEnB,SAAS,CAACa,MAAM;IACnCO,YAAY,EAAEpB,SAAS,CAACa,MAAM;IAC9BQ,IAAI,EAAErB,SAAS,CAACa,MAAM;IACtBS,UAAU,EAAEtB,SAAS,CAACa,MAAM;IAC5BU,WAAW,EAAEvB,SAAS,CAACa,MAAM;IAC7BW,MAAM,EAAExB,SAAS,CAACa,MAAM;IACxBY,eAAe,EAAEzB,SAAS,CAACa;EAC7B,CAAC,EAAE;IACDd,SAAS;IACT2B,SAAS,EAAE;EACb,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,OAAOzB,IAAI;AACb,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6fd3ad1f52e78a38d071d4b5c2b10db3cc0f124b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2jjs9uqxjf=function(){return actualCoverage;};}return actualCoverage;}cov_2jjs9uqxjf();const{Model}=(cov_2jjs9uqxjf().s[0]++,require('sequelize'));cov_2jjs9uqxjf().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_2jjs9uqxjf().f[0]++;class User extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The models/index file will call this method automatically.
     */static associate(models){cov_2jjs9uqxjf().f[1]++;cov_2jjs9uqxjf().s[2]++;// Define associations here
User.hasMany(models.Trip,{foreignKey:"userId",as:"trips"});cov_2jjs9uqxjf().s[3]++;User.hasMany(models.Feedback,{foreignKey:'userId',onDelete:'CASCADE',onUpdate:'CASCADE'});}}cov_2jjs9uqxjf().s[4]++;User.init({firstName:DataTypes.STRING,lastName:DataTypes.STRING,email:DataTypes.STRING,birthOfDate:DataTypes.DATEONLY,preferredLanguage:DataTypes.STRING,preferredCurrency:DataTypes.STRING,whereYouLive:DataTypes.STRING,role:DataTypes.STRING,department:DataTypes.STRING,lineManager:DataTypes.STRING,gender:DataTypes.STRING,telephoneNumber:DataTypes.STRING},{sequelize,modelName:'User'});// User.associate = (models) => {
//   // Existing associations
//   User.hasMany(models.Trip, {
//     foreignKey: "userId",
//     as: "trips",
//   });
// };
// User.hasMany(models.Feedback, {
//   foreignKey: 'userId',
//   onDelete: 'CASCADE',
//   onUpdate: 'CASCADE',
// });
cov_2jjs9uqxjf().s[5]++;return User;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiVXNlciIsImFzc29jaWF0ZSIsIm1vZGVscyIsImhhc01hbnkiLCJUcmlwIiwiZm9yZWlnbktleSIsImFzIiwiRmVlZGJhY2siLCJvbkRlbGV0ZSIsIm9uVXBkYXRlIiwiaW5pdCIsImZpcnN0TmFtZSIsIlNUUklORyIsImxhc3ROYW1lIiwiZW1haWwiLCJiaXJ0aE9mRGF0ZSIsIkRBVEVPTkxZIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJwcmVmZXJyZWRDdXJyZW5jeSIsIndoZXJlWW91TGl2ZSIsInJvbGUiLCJkZXBhcnRtZW50IiwibGluZU1hbmFnZXIiLCJnZW5kZXIiLCJ0ZWxlcGhvbmVOdW1iZXIiLCJtb2RlbE5hbWUiXSwic291cmNlUm9vdCI6IkQ6XFxyaXBwZXJzXFxyaXBwZXJzLWJuLWJlXFxtb2RlbHNcXCIsInNvdXJjZXMiOlsidXNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNvbnN0IHtcclxuICBNb2RlbFxyXG59ID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgVXNlciBleHRlbmRzIE1vZGVsIHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIG1ldGhvZCBmb3IgZGVmaW5pbmcgYXNzb2NpYXRpb25zLlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IGEgcGFydCBvZiBTZXF1ZWxpemUgbGlmZWN5Y2xlLlxyXG4gICAgICogVGhlIG1vZGVscy9pbmRleCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBEZWZpbmUgYXNzb2NpYXRpb25zIGhlcmVcclxuICAgICAgVXNlci5oYXNNYW55KG1vZGVscy5UcmlwLCB7XHJcbiAgICAgICAgZm9yZWlnbktleTogXCJ1c2VySWRcIixcclxuICAgICAgICBhczogXCJ0cmlwc1wiLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIFVzZXIuaGFzTWFueShtb2RlbHMuRmVlZGJhY2ssIHtcclxuICAgICAgICBmb3JlaWduS2V5OiAndXNlcklkJyxcclxuICAgICAgICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gICAgICAgIG9uVXBkYXRlOiAnQ0FTQ0FERScsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBVc2VyLmluaXQoe1xyXG4gICAgZmlyc3ROYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgbGFzdE5hbWU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBlbWFpbDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGJpcnRoT2ZEYXRlOiBEYXRhVHlwZXMuREFURU9OTFksXHJcbiAgICBwcmVmZXJyZWRMYW5ndWFnZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHByZWZlcnJlZEN1cnJlbmN5OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgd2hlcmVZb3VMaXZlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgcm9sZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGRlcGFydG1lbnQ6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBsaW5lTWFuYWdlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGdlbmRlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHRlbGVwaG9uZU51bWJlcjogRGF0YVR5cGVzLlNUUklOR1xyXG4gIH0sIHtcclxuICAgIHNlcXVlbGl6ZSxcclxuICAgIG1vZGVsTmFtZTogJ1VzZXInLFxyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIFVzZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xyXG4gIC8vICAgLy8gRXhpc3RpbmcgYXNzb2NpYXRpb25zXHJcbiAgLy8gICBVc2VyLmhhc01hbnkobW9kZWxzLlRyaXAsIHtcclxuICAvLyAgICAgZm9yZWlnbktleTogXCJ1c2VySWRcIixcclxuICAvLyAgICAgYXM6IFwidHJpcHNcIixcclxuICAvLyAgIH0pO1xyXG4gIC8vIH07XHJcblxyXG4gIC8vIFVzZXIuaGFzTWFueShtb2RlbHMuRmVlZGJhY2ssIHtcclxuICAvLyAgIGZvcmVpZ25LZXk6ICd1c2VySWQnLFxyXG4gIC8vICAgb25EZWxldGU6ICdDQVNDQURFJyxcclxuICAvLyAgIG9uVXBkYXRlOiAnQ0FTQ0FERScsXHJcbiAgLy8gfSk7XHJcblxyXG4gIHJldHVybiBVc2VyO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWixNQUFNO0VBQ0pBO0FBQ0YsQ0FBQyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3hCQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxTQUFTLEVBQUVDLFNBQVMsS0FBSztFQUN6QyxNQUFNQyxJQUFJLFNBQVNOLEtBQUssQ0FBQztJQUN2QjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksT0FBT08sU0FBU0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ3ZCO01BQ0FGLElBQUksQ0FBQ0csT0FBTyxDQUFDRCxNQUFNLENBQUNFLElBQUksRUFBRTtRQUN4QkMsVUFBVSxFQUFFLFFBQVE7UUFDcEJDLEVBQUUsRUFBRTtNQUNOLENBQUMsQ0FBQztNQUVGTixJQUFJLENBQUNHLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDSyxRQUFRLEVBQUU7UUFDNUJGLFVBQVUsRUFBRSxRQUFRO1FBQ3BCRyxRQUFRLEVBQUUsU0FBUztRQUNuQkMsUUFBUSxFQUFFO01BQ1osQ0FBQyxDQUFDO0lBQ0o7RUFDRjtFQUNBVCxJQUFJLENBQUNVLElBQUksQ0FBQztJQUNSQyxTQUFTLEVBQUVaLFNBQVMsQ0FBQ2EsTUFBTTtJQUMzQkMsUUFBUSxFQUFFZCxTQUFTLENBQUNhLE1BQU07SUFDMUJFLEtBQUssRUFBRWYsU0FBUyxDQUFDYSxNQUFNO0lBQ3ZCRyxXQUFXLEVBQUVoQixTQUFTLENBQUNpQixRQUFRO0lBQy9CQyxpQkFBaUIsRUFBRWxCLFNBQVMsQ0FBQ2EsTUFBTTtJQUNuQ00saUJBQWlCLEVBQUVuQixTQUFTLENBQUNhLE1BQU07SUFDbkNPLFlBQVksRUFBRXBCLFNBQVMsQ0FBQ2EsTUFBTTtJQUM5QlEsSUFBSSxFQUFFckIsU0FBUyxDQUFDYSxNQUFNO0lBQ3RCUyxVQUFVLEVBQUV0QixTQUFTLENBQUNhLE1BQU07SUFDNUJVLFdBQVcsRUFBRXZCLFNBQVMsQ0FBQ2EsTUFBTTtJQUM3QlcsTUFBTSxFQUFFeEIsU0FBUyxDQUFDYSxNQUFNO0lBQ3hCWSxlQUFlLEVBQUV6QixTQUFTLENBQUNhO0VBQzdCLENBQUMsRUFBRTtJQUNEZCxTQUFTO0lBQ1QyQixTQUFTLEVBQUU7RUFDYixDQUFDLENBQUM7O0VBRUY7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQSxPQUFPekIsSUFBSTtBQUNiLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmpqczl1cXhqZiIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwibmFtZXMiLCJzb3VyY2VSb290Iiwic291cmNlcyIsInNvdXJjZXNDb250ZW50IiwibWFwcGluZ3MiLCJpZ25vcmVMaXN0IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJVc2VyIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiaGFzTWFueSIsIlRyaXAiLCJmb3JlaWduS2V5IiwiYXMiLCJGZWVkYmFjayIsIm9uRGVsZXRlIiwib25VcGRhdGUiLCJpbml0IiwiZmlyc3ROYW1lIiwiU1RSSU5HIiwibGFzdE5hbWUiLCJlbWFpbCIsImJpcnRoT2ZEYXRlIiwiREFURU9OTFkiLCJwcmVmZXJyZWRMYW5ndWFnZSIsInByZWZlcnJlZEN1cnJlbmN5Iiwid2hlcmVZb3VMaXZlIiwicm9sZSIsImRlcGFydG1lbnQiLCJsaW5lTWFuYWdlciIsImdlbmRlciIsInRlbGVwaG9uZU51bWJlciIsIm1vZGVsTmFtZSJdLCJzb3VyY2VzIjpbIkQ6XFxyaXBwZXJzXFxyaXBwZXJzLWJuLWJlXFxtb2RlbHNcXC91c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuY29uc3Qge1xyXG4gIE1vZGVsXHJcbn0gPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSAoc2VxdWVsaXplLCBEYXRhVHlwZXMpID0+IHtcclxuICBjbGFzcyBVc2VyIGV4dGVuZHMgTW9kZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciBkZWZpbmluZyBhc3NvY2lhdGlvbnMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXHJcbiAgICAgKiBUaGUgbW9kZWxzL2luZGV4IGZpbGUgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3NvY2lhdGUobW9kZWxzKSB7XHJcbiAgICAgIC8vIERlZmluZSBhc3NvY2lhdGlvbnMgaGVyZVxyXG4gICAgICBVc2VyLmhhc01hbnkobW9kZWxzLlRyaXAsIHtcclxuICAgICAgICBmb3JlaWduS2V5OiBcInVzZXJJZFwiLFxyXG4gICAgICAgIGFzOiBcInRyaXBzXCIsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgVXNlci5oYXNNYW55KG1vZGVscy5GZWVkYmFjaywge1xyXG4gICAgICAgIGZvcmVpZ25LZXk6ICd1c2VySWQnLFxyXG4gICAgICAgIG9uRGVsZXRlOiAnQ0FTQ0FERScsXHJcbiAgICAgICAgb25VcGRhdGU6ICdDQVNDQURFJyxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFVzZXIuaW5pdCh7XHJcbiAgICBmaXJzdE5hbWU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBsYXN0TmFtZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGVtYWlsOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgYmlydGhPZkRhdGU6IERhdGFUeXBlcy5EQVRFT05MWSxcclxuICAgIHByZWZlcnJlZExhbmd1YWdlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgcHJlZmVycmVkQ3VycmVuY3k6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICB3aGVyZVlvdUxpdmU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICByb2xlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZGVwYXJ0bWVudDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGxpbmVNYW5hZ2VyOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZ2VuZGVyOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgdGVsZXBob25lTnVtYmVyOiBEYXRhVHlwZXMuU1RSSU5HXHJcbiAgfSwge1xyXG4gICAgc2VxdWVsaXplLFxyXG4gICAgbW9kZWxOYW1lOiAnVXNlcicsXHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8gVXNlci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XHJcbiAgLy8gICAvLyBFeGlzdGluZyBhc3NvY2lhdGlvbnNcclxuICAvLyAgIFVzZXIuaGFzTWFueShtb2RlbHMuVHJpcCwge1xyXG4gIC8vICAgICBmb3JlaWduS2V5OiBcInVzZXJJZFwiLFxyXG4gIC8vICAgICBhczogXCJ0cmlwc1wiLFxyXG4gIC8vICAgfSk7XHJcbiAgLy8gfTtcclxuXHJcbiAgLy8gVXNlci5oYXNNYW55KG1vZGVscy5GZWVkYmFjaywge1xyXG4gIC8vICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgLy8gICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gIC8vICAgb25VcGRhdGU6ICdDQVNDQURFJyxcclxuICAvLyB9KTtcclxuXHJcbiAgcmV0dXJuIFVzZXI7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLFVBQUFBLGVBQUEsTUFBQUMsSUFBQSxtREFBQUMsSUFBQSxnREFBQUMsTUFBQSxLQUFBQyxRQUFBLHNCQUFBQyxHQUFBLG9CQUFBQyxZQUFBLEVBQUFMLElBQUEsK0NBQUFNLFlBQUEsT0FBQUMsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEdBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFB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