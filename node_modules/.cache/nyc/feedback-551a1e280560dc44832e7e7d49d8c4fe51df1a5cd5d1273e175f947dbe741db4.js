'use strict';function cov_rge4sysqc(){var path="M:\\Production\\BareFootNomad\\models\\feedback.js";var hash="cf541b140a5621431ef4f21344dcd4211dc05119";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"M:\\Production\\BareFootNomad\\models\\feedback.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:32,column:2}},"2":{start:{line:15,column:6},end:{line:19,column:9}},"3":{start:{line:22,column:2},end:{line:30,column:5}},"4":{start:{line:31,column:2},end:{line:31,column:18}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:32,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:20,column:5}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","Feedback","associate","models","belongsTo","User","foreignKey","onDelete","onUpdate","init","userId","INTEGER","facility","STRING","like","BOOLEAN","comment","TEXT","modelName"],sourceRoot:"M:\\Production\\BareFootNomad\\models\\",sources:["feedback.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class Feedback extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // Define association here\r\n      Feedback.belongsTo(models.User, {\r\n        foreignKey: 'userId',\r\n        onDelete: 'CASCADE',\r\n        onUpdate: 'CASCADE',\r\n      });\r\n    }\r\n  }\r\n  Feedback.init({\r\n    userId: DataTypes.INTEGER,\r\n    facility: DataTypes.STRING,\r\n    like: DataTypes.BOOLEAN,\r\n    comment: DataTypes.TEXT\r\n  }, {\r\n    sequelize,\r\n    modelName: 'Feedback',\r\n  });\r\n\r\n  \r\n\r\n  return Feedback;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,QAAQ,SAASN,KAAK,CAAC;IAC3B;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;MACAF,QAAQ,CAACG,SAAS,CAACD,MAAM,CAACE,IAAI,EAAE;QAC9BC,UAAU,EAAE,QAAQ;QACpBC,QAAQ,EAAE,SAAS;QACnBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF;EACAP,QAAQ,CAACQ,IAAI,CAAC;IACZC,MAAM,EAAEV,SAAS,CAACW,OAAO;IACzBC,QAAQ,EAAEZ,SAAS,CAACa,MAAM;IAC1BC,IAAI,EAAEd,SAAS,CAACe,OAAO;IACvBC,OAAO,EAAEhB,SAAS,CAACiB;EACrB,CAAC,EAAE;IACDlB,SAAS;IACTmB,SAAS,EAAE;EACb,CAAC,CAAC;EAIF,OAAOjB,QAAQ;AACjB,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"cf541b140a5621431ef4f21344dcd4211dc05119"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_rge4sysqc=function(){return actualCoverage;};}return actualCoverage;}cov_rge4sysqc();const{Model}=(cov_rge4sysqc().s[0]++,require('sequelize'));cov_rge4sysqc().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_rge4sysqc().f[0]++;class Feedback extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_rge4sysqc().f[1]++;cov_rge4sysqc().s[2]++;// Define association here
Feedback.belongsTo(models.User,{foreignKey:'userId',onDelete:'CASCADE',onUpdate:'CASCADE'});}}cov_rge4sysqc().s[3]++;Feedback.init({userId:DataTypes.INTEGER,facility:DataTypes.STRING,like:DataTypes.BOOLEAN,comment:DataTypes.TEXT},{sequelize,modelName:'Feedback'});cov_rge4sysqc().s[4]++;return Feedback;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiRmVlZGJhY2siLCJhc3NvY2lhdGUiLCJtb2RlbHMiLCJiZWxvbmdzVG8iLCJVc2VyIiwiZm9yZWlnbktleSIsIm9uRGVsZXRlIiwib25VcGRhdGUiLCJpbml0IiwidXNlcklkIiwiSU5URUdFUiIsImZhY2lsaXR5IiwiU1RSSU5HIiwibGlrZSIsIkJPT0xFQU4iLCJjb21tZW50IiwiVEVYVCIsIm1vZGVsTmFtZSJdLCJzb3VyY2VSb290IjoiTTpcXFByb2R1Y3Rpb25cXEJhcmVGb290Tm9tYWRcXG1vZGVsc1xcIiwic291cmNlcyI6WyJmZWVkYmFjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNvbnN0IHtcclxuICBNb2RlbFxyXG59ID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgRmVlZGJhY2sgZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgU2VxdWVsaXplIGxpZmVjeWNsZS5cclxuICAgICAqIFRoZSBgbW9kZWxzL2luZGV4YCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBEZWZpbmUgYXNzb2NpYXRpb24gaGVyZVxyXG4gICAgICBGZWVkYmFjay5iZWxvbmdzVG8obW9kZWxzLlVzZXIsIHtcclxuICAgICAgICBmb3JlaWduS2V5OiAndXNlcklkJyxcclxuICAgICAgICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gICAgICAgIG9uVXBkYXRlOiAnQ0FTQ0FERScsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBGZWVkYmFjay5pbml0KHtcclxuICAgIHVzZXJJZDogRGF0YVR5cGVzLklOVEVHRVIsXHJcbiAgICBmYWNpbGl0eTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGxpa2U6IERhdGFUeXBlcy5CT09MRUFOLFxyXG4gICAgY29tbWVudDogRGF0YVR5cGVzLlRFWFRcclxuICB9LCB7XHJcbiAgICBzZXF1ZWxpemUsXHJcbiAgICBtb2RlbE5hbWU6ICdGZWVkYmFjaycsXHJcbiAgfSk7XHJcblxyXG4gIFxyXG5cclxuICByZXR1cm4gRmVlZGJhY2s7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaLE1BQU07RUFDSkE7QUFDRixDQUFDLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDeEJDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLENBQUNDLFNBQVMsRUFBRUMsU0FBUyxLQUFLO0VBQ3pDLE1BQU1DLFFBQVEsU0FBU04sS0FBSyxDQUFDO0lBQzNCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7SUFDSSxPQUFPTyxTQUFTQSxDQUFDQyxNQUFNLEVBQUU7TUFDdkI7TUFDQUYsUUFBUSxDQUFDRyxTQUFTLENBQUNELE1BQU0sQ0FBQ0UsSUFBSSxFQUFFO1FBQzlCQyxVQUFVLEVBQUUsUUFBUTtRQUNwQkMsUUFBUSxFQUFFLFNBQVM7UUFDbkJDLFFBQVEsRUFBRTtNQUNaLENBQUMsQ0FBQztJQUNKO0VBQ0Y7RUFDQVAsUUFBUSxDQUFDUSxJQUFJLENBQUM7SUFDWkMsTUFBTSxFQUFFVixTQUFTLENBQUNXLE9BQU87SUFDekJDLFFBQVEsRUFBRVosU0FBUyxDQUFDYSxNQUFNO0lBQzFCQyxJQUFJLEVBQUVkLFNBQVMsQ0FBQ2UsT0FBTztJQUN2QkMsT0FBTyxFQUFFaEIsU0FBUyxDQUFDaUI7RUFDckIsQ0FBQyxFQUFFO0lBQ0RsQixTQUFTO0lBQ1RtQixTQUFTLEVBQUU7RUFDYixDQUFDLENBQUM7RUFJRixPQUFPakIsUUFBUTtBQUNqQixDQUFDIiwiaWdub3JlTGlzdCI6W119
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfcmdlNHN5c3FjIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJzIiwiZiIsImIiLCJpbnB1dFNvdXJjZU1hcCIsInZlcnNpb24iLCJuYW1lcyIsInNvdXJjZVJvb3QiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJtYXBwaW5ncyIsImlnbm9yZUxpc3QiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiTW9kZWwiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcXVlbGl6ZSIsIkRhdGFUeXBlcyIsIkZlZWRiYWNrIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiYmVsb25nc1RvIiwiVXNlciIsImZvcmVpZ25LZXkiLCJvbkRlbGV0ZSIsIm9uVXBkYXRlIiwiaW5pdCIsInVzZXJJZCIsIklOVEVHRVIiLCJmYWNpbGl0eSIsIlNUUklORyIsImxpa2UiLCJCT09MRUFOIiwiY29tbWVudCIsIlRFWFQiLCJtb2RlbE5hbWUiXSwic291cmNlcyI6WyJNOlxcUHJvZHVjdGlvblxcQmFyZUZvb3ROb21hZFxcbW9kZWxzXFwvZmVlZGJhY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5jb25zdCB7XHJcbiAgTW9kZWxcclxufSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IChzZXF1ZWxpemUsIERhdGFUeXBlcykgPT4ge1xyXG4gIGNsYXNzIEZlZWRiYWNrIGV4dGVuZHMgTW9kZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciBkZWZpbmluZyBhc3NvY2lhdGlvbnMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXHJcbiAgICAgKiBUaGUgYG1vZGVscy9pbmRleGAgZmlsZSB3aWxsIGNhbGwgdGhpcyBtZXRob2QgYXV0b21hdGljYWxseS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFzc29jaWF0ZShtb2RlbHMpIHtcclxuICAgICAgLy8gRGVmaW5lIGFzc29jaWF0aW9uIGhlcmVcclxuICAgICAgRmVlZGJhY2suYmVsb25nc1RvKG1vZGVscy5Vc2VyLCB7XHJcbiAgICAgICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgICAgICAgb25EZWxldGU6ICdDQVNDQURFJyxcclxuICAgICAgICBvblVwZGF0ZTogJ0NBU0NBREUnLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgRmVlZGJhY2suaW5pdCh7XHJcbiAgICB1c2VySWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgZmFjaWxpdHk6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBsaWtlOiBEYXRhVHlwZXMuQk9PTEVBTixcclxuICAgIGNvbW1lbnQ6IERhdGFUeXBlcy5URVhUXHJcbiAgfSwge1xyXG4gICAgc2VxdWVsaXplLFxyXG4gICAgbW9kZWxOYW1lOiAnRmVlZGJhY2snLFxyXG4gIH0pO1xyXG5cclxuICBcclxuXHJcbiAgcmV0dXJuIEZlZWRiYWNrO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxVQUFBQSxjQUFBLE1BQUFDLElBQUEsMERBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLHNEQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFFLEtBQUEsT0FBQUMsSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsR0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsU0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsTUFBQU8sU0FBQSxJQUFBQyxDQUFBLGlDQUFBQyxDQUFBLGVBQUFDLENBQUEsSUFBQUMsY0FBQSxFQUFBQyxPQUFBLEdBQUFDLEtBQUEsa1BBQUFDLFVBQUEsMkNBQUFDLE9BQUEsaUJBQUFDLGNBQUEsMjFCQUFBQyxRQUFBLHlsQkFBQUMsVUFBQSxLQUFBQyxlQUFBLDRDQUFBMUIsSUFBQSxpREFBQTJCLFFBQUEsQ0FBQTFCLE1BQUEsQ0FBQUUsR0FBQSxJQUFBRixNQUFBLENBQUFFLEdBQUEsVUFBQXdCLFFBQUEsQ0FBQTVCLElBQUEsR0FBQTRCLFFBQUEsQ0FBQTVCLElBQUEsRUFBQUMsSUFBQSxHQUFBQSxJQUFBLEVBQUEyQixRQUFBLENBQUE1QixJQUFBLEVBQUFLLFlBQUEsTUFBQXdCLGNBQUEsQ0FBQUQsUUFBQSxDQUFBNUIsSUFBQSxHQWNKO0FBQUFELGFBQUEsU0FBQUEsQ0FBQSxTQUFBOEIsY0FBQSxXQUFBQSxjQUFBLEVBQUE5QixhQUFBLEdBYlIsS0FBTSxDQUNKK0IsS0FDRixDQUFDLEVBQUEvQixhQUFBLEdBQUFpQixDQUFBLE1BQUdlLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBQWhDLGFBQUEsR0FBQWlCLENBQUEsTUFDeEJnQixNQUFNLENBQUNDLE9BQU8sQ0FBRyxDQUFDQyxTQUFTLENBQUVDLFNBQVMsR0FBSyxDQUFBcEMsYUFBQSxHQUFBa0IsQ0FBQSxNQUN6QyxLQUFNLENBQUFtQixRQUFRLFFBQVMsQ0FBQU4sS0FBTSxDQUMzQjtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQ0ksTUFBTyxDQUFBTyxTQUFTQSxDQUFDQyxNQUFNLENBQUUsQ0FBQXZDLGFBQUEsR0FBQWtCLENBQUEsTUFBQWxCLGFBQUEsR0FBQWlCLENBQUEsTUFDdkI7QUFDQW9CLFFBQVEsQ0FBQ0csU0FBUyxDQUFDRCxNQUFNLENBQUNFLElBQUksQ0FBRSxDQUM5QkMsVUFBVSxDQUFFLFFBQVEsQ0FDcEJDLFFBQVEsQ0FBRSxTQUFTLENBQ25CQyxRQUFRLENBQUUsU0FDWixDQUFDLENBQUMsQ0FDSixDQUNGLENBQUE1QyxhQUFBLEdBQUFpQixDQUFBLE1BQ0FvQixRQUFRLENBQUNRLElBQUksQ0FBQyxDQUNaQyxNQUFNLENBQUVWLFNBQVMsQ0FBQ1csT0FBTyxDQUN6QkMsUUFBUSxDQUFFWixTQUFTLENBQUNhLE1BQU0sQ0FDMUJDLElBQUksQ0FBRWQsU0FBUyxDQUFDZSxPQUFPLENBQ3ZCQyxPQUFPLENBQUVoQixTQUFTLENBQUNpQixJQUNyQixDQUFDLENBQUUsQ0FDRGxCLFNBQVMsQ0FDVG1CLFNBQVMsQ0FBRSxVQUNiLENBQUMsQ0FBQyxDQUFBdEQsYUFBQSxHQUFBaUIsQ0FBQSxNQUlGLE1BQU8sQ0FBQW9CLFFBQVEsQ0FDakIsQ0FBQyxDIiwiaWdub3JlTGlzdCI6W119