'use strict';function cov_so523n4m2(){var path="N:\\Personal Projects\\work-projects\\eric-nomad\\models\\user.js";var hash="c91d4efa5df7acf2ee65a7685377845b3b559016";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"N:\\Personal Projects\\work-projects\\eric-nomad\\models\\user.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:59,column:2}},"2":{start:{line:15,column:6},end:{line:18,column:9}},"3":{start:{line:19,column:6},end:{line:23,column:9}},"4":{start:{line:26,column:2},end:{line:42,column:5}},"5":{start:{line:58,column:2},end:{line:58,column:14}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:59,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:24,column:5}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","User","associate","models","hasMany","Trip","foreignKey","as","Feedback","onDelete","onUpdate","init","firstName","STRING","lastName","email","birthOfDate","DATEONLY","preferredLanguage","preferredCurrency","whereYouLive","role","department","lineManager","gender","telephoneNumber","modelName"],sourceRoot:"N:\\Personal Projects\\work-projects\\eric-nomad\\models\\",sources:["user.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class User extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // Define associations here\r\n      User.hasMany(models.Trip, {\r\n        foreignKey: \"userId\",\r\n        as: \"trips\",\r\n      });\r\n\r\n      User.hasMany(models.Feedback, {\r\n        foreignKey: 'userId',\r\n        onDelete: 'CASCADE',\r\n        onUpdate: 'CASCADE',\r\n      });\r\n    }\r\n  }\r\n  User.init({\r\n    firstName: DataTypes.STRING,\r\n    lastName: DataTypes.STRING,\r\n    email: DataTypes.STRING,\r\n    birthOfDate: DataTypes.DATEONLY,\r\n    preferredLanguage: DataTypes.STRING,\r\n    preferredCurrency: DataTypes.STRING,\r\n    whereYouLive: DataTypes.STRING,\r\n    role: DataTypes.STRING,\r\n    department: DataTypes.STRING,\r\n    lineManager: DataTypes.STRING,\r\n      gender: DataTypes.STRING,\r\n      telephoneNumber: DataTypes.STRING\r\n  }, {\r\n    sequelize,\r\n    modelName: 'User',\r\n  });\r\n  \r\n  // User.associate = (models) => {\r\n  //   // Existing associations\r\n  //   User.hasMany(models.Trip, {\r\n  //     foreignKey: \"userId\",\r\n  //     as: \"trips\",\r\n  //   });\r\n  // };\r\n\r\n  // User.hasMany(models.Feedback, {\r\n  //   foreignKey: 'userId',\r\n  //   onDelete: 'CASCADE',\r\n  //   onUpdate: 'CASCADE',\r\n  // });\r\n\r\n  return User;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,IAAI,SAASN,KAAK,CAAC;IACvB;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;MACAF,IAAI,CAACG,OAAO,CAACD,MAAM,CAACE,IAAI,EAAE;QACxBC,UAAU,EAAE,QAAQ;QACpBC,EAAE,EAAE;MACN,CAAC,CAAC;MAEFN,IAAI,CAACG,OAAO,CAACD,MAAM,CAACK,QAAQ,EAAE;QAC5BF,UAAU,EAAE,QAAQ;QACpBG,QAAQ,EAAE,SAAS;QACnBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF;EACAT,IAAI,CAACU,IAAI,CAAC;IACRC,SAAS,EAAEZ,SAAS,CAACa,MAAM;IAC3BC,QAAQ,EAAEd,SAAS,CAACa,MAAM;IAC1BE,KAAK,EAAEf,SAAS,CAACa,MAAM;IACvBG,WAAW,EAAEhB,SAAS,CAACiB,QAAQ;IAC/BC,iBAAiB,EAAElB,SAAS,CAACa,MAAM;IACnCM,iBAAiB,EAAEnB,SAAS,CAACa,MAAM;IACnCO,YAAY,EAAEpB,SAAS,CAACa,MAAM;IAC9BQ,IAAI,EAAErB,SAAS,CAACa,MAAM;IACtBS,UAAU,EAAEtB,SAAS,CAACa,MAAM;IAC5BU,WAAW,EAAEvB,SAAS,CAACa,MAAM;IAC3BW,MAAM,EAAExB,SAAS,CAACa,MAAM;IACxBY,eAAe,EAAEzB,SAAS,CAACa;EAC/B,CAAC,EAAE;IACDd,SAAS;IACT2B,SAAS,EAAE;EACb,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,OAAOzB,IAAI;AACb,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c91d4efa5df7acf2ee65a7685377845b3b559016"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_so523n4m2=function(){return actualCoverage;};}return actualCoverage;}cov_so523n4m2();const{Model}=(cov_so523n4m2().s[0]++,require('sequelize'));cov_so523n4m2().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_so523n4m2().f[0]++;class User extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_so523n4m2().f[1]++;cov_so523n4m2().s[2]++;// Define associations here
User.hasMany(models.Trip,{foreignKey:"userId",as:"trips"});cov_so523n4m2().s[3]++;User.hasMany(models.Feedback,{foreignKey:'userId',onDelete:'CASCADE',onUpdate:'CASCADE'});}}cov_so523n4m2().s[4]++;User.init({firstName:DataTypes.STRING,lastName:DataTypes.STRING,email:DataTypes.STRING,birthOfDate:DataTypes.DATEONLY,preferredLanguage:DataTypes.STRING,preferredCurrency:DataTypes.STRING,whereYouLive:DataTypes.STRING,role:DataTypes.STRING,department:DataTypes.STRING,lineManager:DataTypes.STRING,gender:DataTypes.STRING,telephoneNumber:DataTypes.STRING},{sequelize,modelName:'User'});// User.associate = (models) => {
//   // Existing associations
//   User.hasMany(models.Trip, {
//     foreignKey: "userId",
//     as: "trips",
//   });
// };
// User.hasMany(models.Feedback, {
//   foreignKey: 'userId',
//   onDelete: 'CASCADE',
//   onUpdate: 'CASCADE',
// });
cov_so523n4m2().s[5]++;return User;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiVXNlciIsImFzc29jaWF0ZSIsIm1vZGVscyIsImhhc01hbnkiLCJUcmlwIiwiZm9yZWlnbktleSIsImFzIiwiRmVlZGJhY2siLCJvbkRlbGV0ZSIsIm9uVXBkYXRlIiwiaW5pdCIsImZpcnN0TmFtZSIsIlNUUklORyIsImxhc3ROYW1lIiwiZW1haWwiLCJiaXJ0aE9mRGF0ZSIsIkRBVEVPTkxZIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJwcmVmZXJyZWRDdXJyZW5jeSIsIndoZXJlWW91TGl2ZSIsInJvbGUiLCJkZXBhcnRtZW50IiwibGluZU1hbmFnZXIiLCJnZW5kZXIiLCJ0ZWxlcGhvbmVOdW1iZXIiLCJtb2RlbE5hbWUiXSwic291cmNlUm9vdCI6Ik46XFxQZXJzb25hbCBQcm9qZWN0c1xcd29yay1wcm9qZWN0c1xcZXJpYy1ub21hZFxcbW9kZWxzXFwiLCJzb3VyY2VzIjpbInVzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5jb25zdCB7XHJcbiAgTW9kZWxcclxufSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IChzZXF1ZWxpemUsIERhdGFUeXBlcykgPT4ge1xyXG4gIGNsYXNzIFVzZXIgZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgU2VxdWVsaXplIGxpZmVjeWNsZS5cclxuICAgICAqIFRoZSBgbW9kZWxzL2luZGV4YCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBEZWZpbmUgYXNzb2NpYXRpb25zIGhlcmVcclxuICAgICAgVXNlci5oYXNNYW55KG1vZGVscy5UcmlwLCB7XHJcbiAgICAgICAgZm9yZWlnbktleTogXCJ1c2VySWRcIixcclxuICAgICAgICBhczogXCJ0cmlwc1wiLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIFVzZXIuaGFzTWFueShtb2RlbHMuRmVlZGJhY2ssIHtcclxuICAgICAgICBmb3JlaWduS2V5OiAndXNlcklkJyxcclxuICAgICAgICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gICAgICAgIG9uVXBkYXRlOiAnQ0FTQ0FERScsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBVc2VyLmluaXQoe1xyXG4gICAgZmlyc3ROYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgbGFzdE5hbWU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBlbWFpbDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGJpcnRoT2ZEYXRlOiBEYXRhVHlwZXMuREFURU9OTFksXHJcbiAgICBwcmVmZXJyZWRMYW5ndWFnZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHByZWZlcnJlZEN1cnJlbmN5OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgd2hlcmVZb3VMaXZlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgcm9sZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGRlcGFydG1lbnQ6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBsaW5lTWFuYWdlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgICAgZ2VuZGVyOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgICB0ZWxlcGhvbmVOdW1iZXI6IERhdGFUeXBlcy5TVFJJTkdcclxuICB9LCB7XHJcbiAgICBzZXF1ZWxpemUsXHJcbiAgICBtb2RlbE5hbWU6ICdVc2VyJyxcclxuICB9KTtcclxuICBcclxuICAvLyBVc2VyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcclxuICAvLyAgIC8vIEV4aXN0aW5nIGFzc29jaWF0aW9uc1xyXG4gIC8vICAgVXNlci5oYXNNYW55KG1vZGVscy5UcmlwLCB7XHJcbiAgLy8gICAgIGZvcmVpZ25LZXk6IFwidXNlcklkXCIsXHJcbiAgLy8gICAgIGFzOiBcInRyaXBzXCIsXHJcbiAgLy8gICB9KTtcclxuICAvLyB9O1xyXG5cclxuICAvLyBVc2VyLmhhc01hbnkobW9kZWxzLkZlZWRiYWNrLCB7XHJcbiAgLy8gICBmb3JlaWduS2V5OiAndXNlcklkJyxcclxuICAvLyAgIG9uRGVsZXRlOiAnQ0FTQ0FERScsXHJcbiAgLy8gICBvblVwZGF0ZTogJ0NBU0NBREUnLFxyXG4gIC8vIH0pO1xyXG5cclxuICByZXR1cm4gVXNlcjtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1osTUFBTTtFQUNKQTtBQUNGLENBQUMsR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUN4QkMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFQyxTQUFTLEtBQUs7RUFDekMsTUFBTUMsSUFBSSxTQUFTTixLQUFLLENBQUM7SUFDdkI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtJQUNJLE9BQU9PLFNBQVNBLENBQUNDLE1BQU0sRUFBRTtNQUN2QjtNQUNBRixJQUFJLENBQUNHLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDRSxJQUFJLEVBQUU7UUFDeEJDLFVBQVUsRUFBRSxRQUFRO1FBQ3BCQyxFQUFFLEVBQUU7TUFDTixDQUFDLENBQUM7TUFFRk4sSUFBSSxDQUFDRyxPQUFPLENBQUNELE1BQU0sQ0FBQ0ssUUFBUSxFQUFFO1FBQzVCRixVQUFVLEVBQUUsUUFBUTtRQUNwQkcsUUFBUSxFQUFFLFNBQVM7UUFDbkJDLFFBQVEsRUFBRTtNQUNaLENBQUMsQ0FBQztJQUNKO0VBQ0Y7RUFDQVQsSUFBSSxDQUFDVSxJQUFJLENBQUM7SUFDUkMsU0FBUyxFQUFFWixTQUFTLENBQUNhLE1BQU07SUFDM0JDLFFBQVEsRUFBRWQsU0FBUyxDQUFDYSxNQUFNO0lBQzFCRSxLQUFLLEVBQUVmLFNBQVMsQ0FBQ2EsTUFBTTtJQUN2QkcsV0FBVyxFQUFFaEIsU0FBUyxDQUFDaUIsUUFBUTtJQUMvQkMsaUJBQWlCLEVBQUVsQixTQUFTLENBQUNhLE1BQU07SUFDbkNNLGlCQUFpQixFQUFFbkIsU0FBUyxDQUFDYSxNQUFNO0lBQ25DTyxZQUFZLEVBQUVwQixTQUFTLENBQUNhLE1BQU07SUFDOUJRLElBQUksRUFBRXJCLFNBQVMsQ0FBQ2EsTUFBTTtJQUN0QlMsVUFBVSxFQUFFdEIsU0FBUyxDQUFDYSxNQUFNO0lBQzVCVSxXQUFXLEVBQUV2QixTQUFTLENBQUNhLE1BQU07SUFDM0JXLE1BQU0sRUFBRXhCLFNBQVMsQ0FBQ2EsTUFBTTtJQUN4QlksZUFBZSxFQUFFekIsU0FBUyxDQUFDYTtFQUMvQixDQUFDLEVBQUU7SUFDRGQsU0FBUztJQUNUMkIsU0FBUyxFQUFFO0VBQ2IsQ0FBQyxDQUFDOztFQUVGO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUEsT0FBT3pCLElBQUk7QUFDYixDQUFDIiwiaWdub3JlTGlzdCI6W119
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfc281MjNuNG0yIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJzIiwiZiIsImIiLCJpbnB1dFNvdXJjZU1hcCIsInZlcnNpb24iLCJuYW1lcyIsInNvdXJjZVJvb3QiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJtYXBwaW5ncyIsImlnbm9yZUxpc3QiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiTW9kZWwiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcXVlbGl6ZSIsIkRhdGFUeXBlcyIsIlVzZXIiLCJhc3NvY2lhdGUiLCJtb2RlbHMiLCJoYXNNYW55IiwiVHJpcCIsImZvcmVpZ25LZXkiLCJhcyIsIkZlZWRiYWNrIiwib25EZWxldGUiLCJvblVwZGF0ZSIsImluaXQiLCJmaXJzdE5hbWUiLCJTVFJJTkciLCJsYXN0TmFtZSIsImVtYWlsIiwiYmlydGhPZkRhdGUiLCJEQVRFT05MWSIsInByZWZlcnJlZExhbmd1YWdlIiwicHJlZmVycmVkQ3VycmVuY3kiLCJ3aGVyZVlvdUxpdmUiLCJyb2xlIiwiZGVwYXJ0bWVudCIsImxpbmVNYW5hZ2VyIiwiZ2VuZGVyIiwidGVsZXBob25lTnVtYmVyIiwibW9kZWxOYW1lIl0sInNvdXJjZXMiOlsiTjpcXFBlcnNvbmFsIFByb2plY3RzXFx3b3JrLXByb2plY3RzXFxlcmljLW5vbWFkXFxtb2RlbHNcXC91c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuY29uc3Qge1xyXG4gIE1vZGVsXHJcbn0gPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSAoc2VxdWVsaXplLCBEYXRhVHlwZXMpID0+IHtcclxuICBjbGFzcyBVc2VyIGV4dGVuZHMgTW9kZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciBkZWZpbmluZyBhc3NvY2lhdGlvbnMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXHJcbiAgICAgKiBUaGUgYG1vZGVscy9pbmRleGAgZmlsZSB3aWxsIGNhbGwgdGhpcyBtZXRob2QgYXV0b21hdGljYWxseS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFzc29jaWF0ZShtb2RlbHMpIHtcclxuICAgICAgLy8gRGVmaW5lIGFzc29jaWF0aW9ucyBoZXJlXHJcbiAgICAgIFVzZXIuaGFzTWFueShtb2RlbHMuVHJpcCwge1xyXG4gICAgICAgIGZvcmVpZ25LZXk6IFwidXNlcklkXCIsXHJcbiAgICAgICAgYXM6IFwidHJpcHNcIixcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBVc2VyLmhhc01hbnkobW9kZWxzLkZlZWRiYWNrLCB7XHJcbiAgICAgICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgICAgICAgb25EZWxldGU6ICdDQVNDQURFJyxcclxuICAgICAgICBvblVwZGF0ZTogJ0NBU0NBREUnLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgVXNlci5pbml0KHtcclxuICAgIGZpcnN0TmFtZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGxhc3ROYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZW1haWw6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBiaXJ0aE9mRGF0ZTogRGF0YVR5cGVzLkRBVEVPTkxZLFxyXG4gICAgcHJlZmVycmVkTGFuZ3VhZ2U6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBwcmVmZXJyZWRDdXJyZW5jeTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHdoZXJlWW91TGl2ZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHJvbGU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBkZXBhcnRtZW50OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgbGluZU1hbmFnZXI6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICAgIGdlbmRlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgICAgdGVsZXBob25lTnVtYmVyOiBEYXRhVHlwZXMuU1RSSU5HXHJcbiAgfSwge1xyXG4gICAgc2VxdWVsaXplLFxyXG4gICAgbW9kZWxOYW1lOiAnVXNlcicsXHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8gVXNlci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XHJcbiAgLy8gICAvLyBFeGlzdGluZyBhc3NvY2lhdGlvbnNcclxuICAvLyAgIFVzZXIuaGFzTWFueShtb2RlbHMuVHJpcCwge1xyXG4gIC8vICAgICBmb3JlaWduS2V5OiBcInVzZXJJZFwiLFxyXG4gIC8vICAgICBhczogXCJ0cmlwc1wiLFxyXG4gIC8vICAgfSk7XHJcbiAgLy8gfTtcclxuXHJcbiAgLy8gVXNlci5oYXNNYW55KG1vZGVscy5GZWVkYmFjaywge1xyXG4gIC8vICAgZm9yZWlnbktleTogJ3VzZXJJZCcsXHJcbiAgLy8gICBvbkRlbGV0ZTogJ0NBU0NBREUnLFxyXG4gIC8vICAgb25VcGRhdGU6ICdDQVNDQURFJyxcclxuICAvLyB9KTtcclxuXHJcbiAgcmV0dXJuIFVzZXI7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLFVBQUFBLGNBQUEsTUFBQUMsSUFBQSx5RUFBQUMsSUFBQSxnREFBQUMsTUFBQSxLQUFBQyxRQUFBLHNCQUFBQyxHQUFBLG9CQUFBQyxZQUFBLEVBQUFMLElBQUEscUVBQUFNLFlBQUEsT0FBQUMsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEdBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsT0FBQUUsS0FBQSxPQUFBQyxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLE1BQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxTQUFBSSxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxNQUFBTyxTQUFBLElBQUFDLENBQUEsdUNBQUFDLENBQUEsZUFBQUMsQ0FBQSxJQUFBQyxjQUFBLEVBQUFDLE9BQUEsR0FBQUMsS0FBQSx3V0FBQUMsVUFBQSw4REFBQUMsT0FBQSxhQUFBQyxjQUFBLHlsREFBQUMsUUFBQSx5aENBQUFDLFVBQUEsS0FBQUMsZUFBQSw0Q0FBQTFCLElBQUEsaURBQUEyQixRQUFBLENBQUExQixNQUFBLENBQUFFLEdBQUEsSUFBQUYsTUFBQSxDQUFBRSxHQUFBLFVBQUF3QixRQUFBLENBQUE1QixJQUFBLEdBQUE0QixRQUFBLENBQUE1QixJQUFBLEVBQUFDLElBQUEsR0FBQUEsSUFBQSxFQUFBMkIsUUFBQSxDQUFBNUIsSUFBQSxFQUFBSyxZQUFBLE1BQUF3QixjQUFBLENBQUFELFFBQUEsQ0FBQTVCLElBQUEsR0FjSjtBQUFBRCxhQUFBLFNBQUFBLENBQUEsU0FBQThCLGNBQUEsV0FBQUEsY0FBQSxFQUFBOUIsYUFBQSxHQWJSLEtBQU0sQ0FDSitCLEtBQ0YsQ0FBQyxFQUFBL0IsYUFBQSxHQUFBaUIsQ0FBQSxNQUFHZSxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUFoQyxhQUFBLEdBQUFpQixDQUFBLE1BQ3hCZ0IsTUFBTSxDQUFDQyxPQUFPLENBQUcsQ0FBQ0MsU0FBUyxDQUFFQyxTQUFTLEdBQUssQ0FBQXBDLGFBQUEsR0FBQWtCLENBQUEsTUFDekMsS0FBTSxDQUFBbUIsSUFBSSxRQUFTLENBQUFOLEtBQU0sQ0FDdkI7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUNJLE1BQU8sQ0FBQU8sU0FBU0EsQ0FBQ0MsTUFBTSxDQUFFLENBQUF2QyxhQUFBLEdBQUFrQixDQUFBLE1BQUFsQixhQUFBLEdBQUFpQixDQUFBLE1BQ3ZCO0FBQ0FvQixJQUFJLENBQUNHLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDRSxJQUFJLENBQUUsQ0FDeEJDLFVBQVUsQ0FBRSxRQUFRLENBQ3BCQyxFQUFFLENBQUUsT0FDTixDQUFDLENBQUMsQ0FBQTNDLGFBQUEsR0FBQWlCLENBQUEsTUFFRm9CLElBQUksQ0FBQ0csT0FBTyxDQUFDRCxNQUFNLENBQUNLLFFBQVEsQ0FBRSxDQUM1QkYsVUFBVSxDQUFFLFFBQVEsQ0FDcEJHLFFBQVEsQ0FBRSxTQUFTLENBQ25CQyxRQUFRLENBQUUsU0FDWixDQUFDLENBQUMsQ0FDSixDQUNGLENBQUE5QyxhQUFBLEdBQUFpQixDQUFBLE1BQ0FvQixJQUFJLENBQUNVLElBQUksQ0FBQyxDQUNSQyxTQUFTLENBQUVaLFNBQVMsQ0FBQ2EsTUFBTSxDQUMzQkMsUUFBUSxDQUFFZCxTQUFTLENBQUNhLE1BQU0sQ0FDMUJFLEtBQUssQ0FBRWYsU0FBUyxDQUFDYSxNQUFNLENBQ3ZCRyxXQUFXLENBQUVoQixTQUFTLENBQUNpQixRQUFRLENBQy9CQyxpQkFBaUIsQ0FBRWxCLFNBQVMsQ0FBQ2EsTUFBTSxDQUNuQ00saUJBQWlCLENBQUVuQixTQUFTLENBQUNhLE1BQU0sQ0FDbkNPLFlBQVksQ0FBRXBCLFNBQVMsQ0FBQ2EsTUFBTSxDQUM5QlEsSUFBSSxDQUFFckIsU0FBUyxDQUFDYSxNQUFNLENBQ3RCUyxVQUFVLENBQUV0QixTQUFTLENBQUNhLE1BQU0sQ0FDNUJVLFdBQVcsQ0FBRXZCLFNBQVMsQ0FBQ2EsTUFBTSxDQUMzQlcsTUFBTSxDQUFFeEIsU0FBUyxDQUFDYSxNQUFNLENBQ3hCWSxlQUFlLENBQUV6QixTQUFTLENBQUNhLE1BQy9CLENBQUMsQ0FBRSxDQUNEZCxTQUFTLENBQ1QyQixTQUFTLENBQUUsTUFDYixDQUFDLENBQUMsQ0FFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTlELGFBQUEsR0FBQWlCLENBQUEsTUFFQSxNQUFPLENBQUFvQixJQUFJLENBQ2IsQ0FBQyxDIiwiaWdub3JlTGlzdCI6W119