'use strict';function cov_71j598e15(){var path="M:\\Production\\BareFootNomad\\models\\room.js";var hash="41ff08b59fdc08ada6995133c5e3395c56e154cb";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"M:\\Production\\BareFootNomad\\models\\room.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:37,column:2}},"2":{start:{line:17,column:2},end:{line:28,column:5}},"3":{start:{line:29,column:2},end:{line:35,column:4}},"4":{start:{line:31,column:4},end:{line:34,column:7}},"5":{start:{line:36,column:2},end:{line:36,column:14}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:37,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:15,column:5}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:29,column:19},end:{line:29,column:20}},loc:{start:{line:29,column:29},end:{line:35,column:3}},line:29}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0,"1":0,"2":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","Room","associate","models","init","type","STRING","cost","DECIMAL","roomCode","allowNull","unique","modelName","belongsTo","Accommodation","foreignKey","as"],sourceRoot:"M:\\Production\\BareFootNomad\\models\\",sources:["room.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class Room extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // define association here\r\n    }\r\n  }\r\n  Room.init({\r\n    type: DataTypes.STRING,\r\n    cost: DataTypes.DECIMAL,\r\n    roomCode:\r\n    {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      unique: true,\r\n    },\r\n  }, \r\n  \r\n  {\r\n    sequelize,\r\n    modelName: 'Room',\r\n  });\r\n\r\n  Room.associate = (models) => {\r\n    // Room belongs to an Accommodation\r\n    Room.belongsTo(models.Accommodation, {\r\n      foreignKey: \"accommodationId\",\r\n      as: \"accommodation\",\r\n    });\r\n  };\r\n  \r\n  return Room;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,IAAI,SAASN,KAAK,CAAC;IACvB;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;IAAA;EAEJ;EACAF,IAAI,CAACG,IAAI,CAAC;IACRC,IAAI,EAAEL,SAAS,CAACM,MAAM;IACtBC,IAAI,EAAEP,SAAS,CAACQ,OAAO;IACvBC,QAAQ,EACR;MACEJ,IAAI,EAAEL,SAAS,CAACM,MAAM;MACtBI,SAAS,EAAE,KAAK;MAChBC,MAAM,EAAE;IACV;EACF,CAAC,EAED;IACEZ,SAAS;IACTa,SAAS,EAAE;EACb,CAAC,CAAC;EAEFX,IAAI,CAACC,SAAS,GAAIC,MAAM,IAAK;IAC3B;IACAF,IAAI,CAACY,SAAS,CAACV,MAAM,CAACW,aAAa,EAAE;MACnCC,UAAU,EAAE,iBAAiB;MAC7BC,EAAE,EAAE;IACN,CAAC,CAAC;EACJ,CAAC;EAED,OAAOf,IAAI;AACb,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"41ff08b59fdc08ada6995133c5e3395c56e154cb"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_71j598e15=function(){return actualCoverage;};}return actualCoverage;}cov_71j598e15();const{Model}=(cov_71j598e15().s[0]++,require('sequelize'));cov_71j598e15().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_71j598e15().f[0]++;class Room extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_71j598e15().f[1]++;}// define association here
}cov_71j598e15().s[2]++;Room.init({type:DataTypes.STRING,cost:DataTypes.DECIMAL,roomCode:{type:DataTypes.STRING,allowNull:false,unique:true}},{sequelize,modelName:'Room'});cov_71j598e15().s[3]++;Room.associate=models=>{cov_71j598e15().f[2]++;cov_71j598e15().s[4]++;// Room belongs to an Accommodation
Room.belongsTo(models.Accommodation,{foreignKey:"accommodationId",as:"accommodation"});};cov_71j598e15().s[5]++;return Room;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiUm9vbSIsImFzc29jaWF0ZSIsIm1vZGVscyIsImluaXQiLCJ0eXBlIiwiU1RSSU5HIiwiY29zdCIsIkRFQ0lNQUwiLCJyb29tQ29kZSIsImFsbG93TnVsbCIsInVuaXF1ZSIsIm1vZGVsTmFtZSIsImJlbG9uZ3NUbyIsIkFjY29tbW9kYXRpb24iLCJmb3JlaWduS2V5IiwiYXMiXSwic291cmNlUm9vdCI6Ik06XFxQcm9kdWN0aW9uXFxCYXJlRm9vdE5vbWFkXFxtb2RlbHNcXCIsInNvdXJjZXMiOlsicm9vbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNvbnN0IHtcclxuICBNb2RlbFxyXG59ID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgUm9vbSBleHRlbmRzIE1vZGVsIHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIG1ldGhvZCBmb3IgZGVmaW5pbmcgYXNzb2NpYXRpb25zLlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IGEgcGFydCBvZiBTZXF1ZWxpemUgbGlmZWN5Y2xlLlxyXG4gICAgICogVGhlIGBtb2RlbHMvaW5kZXhgIGZpbGUgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3NvY2lhdGUobW9kZWxzKSB7XHJcbiAgICAgIC8vIGRlZmluZSBhc3NvY2lhdGlvbiBoZXJlXHJcbiAgICB9XHJcbiAgfVxyXG4gIFJvb20uaW5pdCh7XHJcbiAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgY29zdDogRGF0YVR5cGVzLkRFQ0lNQUwsXHJcbiAgICByb29tQ29kZTpcclxuICAgIHtcclxuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcclxuICAgICAgdW5pcXVlOiB0cnVlLFxyXG4gICAgfSxcclxuICB9LCBcclxuICBcclxuICB7XHJcbiAgICBzZXF1ZWxpemUsXHJcbiAgICBtb2RlbE5hbWU6ICdSb29tJyxcclxuICB9KTtcclxuXHJcbiAgUm9vbS5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XHJcbiAgICAvLyBSb29tIGJlbG9uZ3MgdG8gYW4gQWNjb21tb2RhdGlvblxyXG4gICAgUm9vbS5iZWxvbmdzVG8obW9kZWxzLkFjY29tbW9kYXRpb24sIHtcclxuICAgICAgZm9yZWlnbktleTogXCJhY2NvbW1vZGF0aW9uSWRcIixcclxuICAgICAgYXM6IFwiYWNjb21tb2RhdGlvblwiLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuICBcclxuICByZXR1cm4gUm9vbTtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1osTUFBTTtFQUNKQTtBQUNGLENBQUMsR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUN4QkMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFQyxTQUFTLEtBQUs7RUFDekMsTUFBTUMsSUFBSSxTQUFTTixLQUFLLENBQUM7SUFDdkI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtJQUNJLE9BQU9PLFNBQVNBLENBQUNDLE1BQU0sRUFBRTtNQUN2QjtJQUFBO0VBRUo7RUFDQUYsSUFBSSxDQUFDRyxJQUFJLENBQUM7SUFDUkMsSUFBSSxFQUFFTCxTQUFTLENBQUNNLE1BQU07SUFDdEJDLElBQUksRUFBRVAsU0FBUyxDQUFDUSxPQUFPO0lBQ3ZCQyxRQUFRLEVBQ1I7TUFDRUosSUFBSSxFQUFFTCxTQUFTLENBQUNNLE1BQU07TUFDdEJJLFNBQVMsRUFBRSxLQUFLO01BQ2hCQyxNQUFNLEVBQUU7SUFDVjtFQUNGLENBQUMsRUFFRDtJQUNFWixTQUFTO0lBQ1RhLFNBQVMsRUFBRTtFQUNiLENBQUMsQ0FBQztFQUVGWCxJQUFJLENBQUNDLFNBQVMsR0FBSUMsTUFBTSxJQUFLO0lBQzNCO0lBQ0FGLElBQUksQ0FBQ1ksU0FBUyxDQUFDVixNQUFNLENBQUNXLGFBQWEsRUFBRTtNQUNuQ0MsVUFBVSxFQUFFLGlCQUFpQjtNQUM3QkMsRUFBRSxFQUFFO0lBQ04sQ0FBQyxDQUFDO0VBQ0osQ0FBQztFQUVELE9BQU9mLElBQUk7QUFDYixDQUFDIiwiaWdub3JlTGlzdCI6W119
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfNzFqNTk4ZTE1IiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJzIiwiZiIsImIiLCJpbnB1dFNvdXJjZU1hcCIsInZlcnNpb24iLCJuYW1lcyIsInNvdXJjZVJvb3QiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJtYXBwaW5ncyIsImlnbm9yZUxpc3QiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiTW9kZWwiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlcXVlbGl6ZSIsIkRhdGFUeXBlcyIsIlJvb20iLCJhc3NvY2lhdGUiLCJtb2RlbHMiLCJpbml0IiwidHlwZSIsIlNUUklORyIsImNvc3QiLCJERUNJTUFMIiwicm9vbUNvZGUiLCJhbGxvd051bGwiLCJ1bmlxdWUiLCJtb2RlbE5hbWUiLCJiZWxvbmdzVG8iLCJBY2NvbW1vZGF0aW9uIiwiZm9yZWlnbktleSIsImFzIl0sInNvdXJjZXMiOlsiTTpcXFByb2R1Y3Rpb25cXEJhcmVGb290Tm9tYWRcXG1vZGVsc1xcL3Jvb20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5jb25zdCB7XHJcbiAgTW9kZWxcclxufSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IChzZXF1ZWxpemUsIERhdGFUeXBlcykgPT4ge1xyXG4gIGNsYXNzIFJvb20gZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgU2VxdWVsaXplIGxpZmVjeWNsZS5cclxuICAgICAqIFRoZSBgbW9kZWxzL2luZGV4YCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBkZWZpbmUgYXNzb2NpYXRpb24gaGVyZVxyXG4gICAgfVxyXG4gIH1cclxuICBSb29tLmluaXQoe1xyXG4gICAgdHlwZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGNvc3Q6IERhdGFUeXBlcy5ERUNJTUFMLFxyXG4gICAgcm9vbUNvZGU6XHJcbiAgICB7XHJcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXHJcbiAgICAgIHVuaXF1ZTogdHJ1ZSxcclxuICAgIH0sXHJcbiAgfSwgXHJcbiAgXHJcbiAge1xyXG4gICAgc2VxdWVsaXplLFxyXG4gICAgbW9kZWxOYW1lOiAnUm9vbScsXHJcbiAgfSk7XHJcblxyXG4gIFJvb20uYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xyXG4gICAgLy8gUm9vbSBiZWxvbmdzIHRvIGFuIEFjY29tbW9kYXRpb25cclxuICAgIFJvb20uYmVsb25nc1RvKG1vZGVscy5BY2NvbW1vZGF0aW9uLCB7XHJcbiAgICAgIGZvcmVpZ25LZXk6IFwiYWNjb21tb2RhdGlvbklkXCIsXHJcbiAgICAgIGFzOiBcImFjY29tbW9kYXRpb25cIixcclxuICAgIH0pO1xyXG4gIH07XHJcbiAgXHJcbiAgcmV0dXJuIFJvb207XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLFVBQUFBLGNBQUEsTUFBQUMsSUFBQSxzREFBQUMsSUFBQSxnREFBQUMsTUFBQSxLQUFBQyxRQUFBLHNCQUFBQyxHQUFBLG9CQUFBQyxZQUFBLEVBQUFMLElBQUEsa0RBQUFNLFlBQUEsT0FBQUMsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEdBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsT0FBQUUsS0FBQSxPQUFBQyxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLE1BQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxTQUFBSSxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxVQUFBSSxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxNQUFBTyxTQUFBLElBQUFDLENBQUEsdUNBQUFDLENBQUEscUJBQUFDLENBQUEsSUFBQUMsY0FBQSxFQUFBQyxPQUFBLEdBQUFDLEtBQUEsOE5BQUFDLFVBQUEsMkNBQUFDLE9BQUEsYUFBQUMsY0FBQSxzOEJBQUFDLFFBQUEsbXBCQUFBQyxVQUFBLEtBQUFDLGVBQUEsNENBQUExQixJQUFBLGlEQUFBMkIsUUFBQSxDQUFBMUIsTUFBQSxDQUFBRSxHQUFBLElBQUFGLE1BQUEsQ0FBQUUsR0FBQSxVQUFBd0IsUUFBQSxDQUFBNUIsSUFBQSxHQUFBNEIsUUFBQSxDQUFBNUIsSUFBQSxFQUFBQyxJQUFBLEdBQUFBLElBQUEsRUFBQTJCLFFBQUEsQ0FBQTVCLElBQUEsRUFBQUssWUFBQSxNQUFBd0IsY0FBQSxDQUFBRCxRQUFBLENBQUE1QixJQUFBLEdBY1Y7QUFBQUQsYUFBQSxTQUFBQSxDQUFBLFNBQUE4QixjQUFBLFdBQUFBLGNBQUEsRUFBQTlCLGFBQUEsR0FiRixLQUFNLENBQ0orQixLQUNGLENBQUMsRUFBQS9CLGFBQUEsR0FBQWlCLENBQUEsTUFBR2UsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFBaEMsYUFBQSxHQUFBaUIsQ0FBQSxNQUN4QmdCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHLENBQUNDLFNBQVMsQ0FBRUMsU0FBUyxHQUFLLENBQUFwQyxhQUFBLEdBQUFrQixDQUFBLE1BQ3pDLEtBQU0sQ0FBQW1CLElBQUksUUFBUyxDQUFBTixLQUFNLENBQ3ZCO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FDSSxNQUFPLENBQUFPLFNBQVNBLENBQUNDLE1BQU0sQ0FBRSxDQUFBdkMsYUFBQSxHQUFBa0IsQ0FBQSxNQUN2QjtBQUVKLENBQUFsQixhQUFBLEdBQUFpQixDQUFBLE1BQ0FvQixJQUFJLENBQUNHLElBQUksQ0FBQyxDQUNSQyxJQUFJLENBQUVMLFNBQVMsQ0FBQ00sTUFBTSxDQUN0QkMsSUFBSSxDQUFFUCxTQUFTLENBQUNRLE9BQU8sQ0FDdkJDLFFBQVEsQ0FDUixDQUNFSixJQUFJLENBQUVMLFNBQVMsQ0FBQ00sTUFBTSxDQUN0QkksU0FBUyxDQUFFLEtBQUssQ0FDaEJDLE1BQU0sQ0FBRSxJQUNWLENBQ0YsQ0FBQyxDQUVELENBQ0VaLFNBQVMsQ0FDVGEsU0FBUyxDQUFFLE1BQ2IsQ0FBQyxDQUFDLENBQUFoRCxhQUFBLEdBQUFpQixDQUFBLE1BRUZvQixJQUFJLENBQUNDLFNBQVMsQ0FBSUMsTUFBTSxFQUFLLENBQUF2QyxhQUFBLEdBQUFrQixDQUFBLE1BQUFsQixhQUFBLEdBQUFpQixDQUFBLE1BQzNCO0FBQ0FvQixJQUFJLENBQUNZLFNBQVMsQ0FBQ1YsTUFBTSxDQUFDVyxhQUFhLENBQUUsQ0FDbkNDLFVBQVUsQ0FBRSxpQkFBaUIsQ0FDN0JDLEVBQUUsQ0FBRSxlQUNOLENBQUMsQ0FBQyxDQUNKLENBQUMsQ0FBQXBELGFBQUEsR0FBQWlCLENBQUEsTUFFRCxNQUFPLENBQUFvQixJQUFJLENBQ2IsQ0FBQyxDIiwiaWdub3JlTGlzdCI6W119