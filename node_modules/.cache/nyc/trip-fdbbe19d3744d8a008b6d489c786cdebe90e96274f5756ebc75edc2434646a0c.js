'use strict';function cov_2rhcgnjv45(){var path="N:\\Personal Projects\\work-projects\\eric-nomad\\models\\trip.js";var hash="9dffa0fc12ce3f563d944974766b04135b65f646";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"N:\\Personal Projects\\work-projects\\eric-nomad\\models\\trip.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:49,column:2}},"2":{start:{line:17,column:2},end:{line:34,column:5}},"3":{start:{line:35,column:2},end:{line:47,column:4}},"4":{start:{line:37,column:4},end:{line:40,column:7}},"5":{start:{line:43,column:4},end:{line:46,column:7}},"6":{start:{line:48,column:2},end:{line:48,column:14}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:49,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:15,column:5}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:35,column:19},end:{line:35,column:20}},loc:{start:{line:35,column:29},end:{line:47,column:3}},line:35}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0,"1":0,"2":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","Trip","associate","models","init","userId","INTEGER","name","STRING","passport","gender","manager","from","to","dateForGoing","DATE","dateForReturn","reason","TEXT","accommodationId","status","comment","modelName","belongsTo","User","foreignKey","as","Accommodation"],sourceRoot:"N:\\Personal Projects\\work-projects\\eric-nomad\\models\\",sources:["trip.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class Trip extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // define association here\r\n    }\r\n  }\r\n  Trip.init({\r\n    userId: DataTypes.INTEGER,\r\n    name: DataTypes.STRING,\r\n    passport: DataTypes.STRING,\r\n    gender: DataTypes.STRING,\r\n    manager: DataTypes.STRING,\r\n    from: DataTypes.STRING,\r\n    to: DataTypes.STRING,\r\n    dateForGoing: DataTypes.DATE,\r\n    dateForReturn: DataTypes.DATE,\r\n    reason: DataTypes.TEXT,\r\n    accommodationId: DataTypes.INTEGER,\r\n    status: DataTypes.STRING,\r\n    comment: DataTypes.TEXT\r\n  }, {\r\n    sequelize,\r\n    modelName: 'Trip',\r\n  });\r\n\r\n  Trip.associate = (models) => {\r\n    // Relationship with User\r\n    Trip.belongsTo(models.User, {\r\n      foreignKey: \"userId\",\r\n      as: \"user\",\r\n    });\r\n\r\n    // Relationship with Accommodation\r\n    Trip.belongsTo(models.Accommodation, {\r\n      foreignKey: \"accommodationId\",\r\n      as: \"accommodation\",\r\n    });\r\n  };\r\n  \r\n  return Trip;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,IAAI,SAASN,KAAK,CAAC;IACvB;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;IAAA;EAEJ;EACAF,IAAI,CAACG,IAAI,CAAC;IACRC,MAAM,EAAEL,SAAS,CAACM,OAAO;IACzBC,IAAI,EAAEP,SAAS,CAACQ,MAAM;IACtBC,QAAQ,EAAET,SAAS,CAACQ,MAAM;IAC1BE,MAAM,EAAEV,SAAS,CAACQ,MAAM;IACxBG,OAAO,EAAEX,SAAS,CAACQ,MAAM;IACzBI,IAAI,EAAEZ,SAAS,CAACQ,MAAM;IACtBK,EAAE,EAAEb,SAAS,CAACQ,MAAM;IACpBM,YAAY,EAAEd,SAAS,CAACe,IAAI;IAC5BC,aAAa,EAAEhB,SAAS,CAACe,IAAI;IAC7BE,MAAM,EAAEjB,SAAS,CAACkB,IAAI;IACtBC,eAAe,EAAEnB,SAAS,CAACM,OAAO;IAClCc,MAAM,EAAEpB,SAAS,CAACQ,MAAM;IACxBa,OAAO,EAAErB,SAAS,CAACkB;EACrB,CAAC,EAAE;IACDnB,SAAS;IACTuB,SAAS,EAAE;EACb,CAAC,CAAC;EAEFrB,IAAI,CAACC,SAAS,GAAIC,MAAM,IAAK;IAC3B;IACAF,IAAI,CAACsB,SAAS,CAACpB,MAAM,CAACqB,IAAI,EAAE;MAC1BC,UAAU,EAAE,QAAQ;MACpBC,EAAE,EAAE;IACN,CAAC,CAAC;;IAEF;IACAzB,IAAI,CAACsB,SAAS,CAACpB,MAAM,CAACwB,aAAa,EAAE;MACnCF,UAAU,EAAE,iBAAiB;MAC7BC,EAAE,EAAE;IACN,CAAC,CAAC;EACJ,CAAC;EAED,OAAOzB,IAAI;AACb,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9dffa0fc12ce3f563d944974766b04135b65f646"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2rhcgnjv45=function(){return actualCoverage;};}return actualCoverage;}cov_2rhcgnjv45();const{Model}=(cov_2rhcgnjv45().s[0]++,require('sequelize'));cov_2rhcgnjv45().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_2rhcgnjv45().f[0]++;class Trip extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_2rhcgnjv45().f[1]++;}// define association here
}cov_2rhcgnjv45().s[2]++;Trip.init({userId:DataTypes.INTEGER,name:DataTypes.STRING,passport:DataTypes.STRING,gender:DataTypes.STRING,manager:DataTypes.STRING,from:DataTypes.STRING,to:DataTypes.STRING,dateForGoing:DataTypes.DATE,dateForReturn:DataTypes.DATE,reason:DataTypes.TEXT,accommodationId:DataTypes.INTEGER,status:DataTypes.STRING,comment:DataTypes.TEXT},{sequelize,modelName:'Trip'});cov_2rhcgnjv45().s[3]++;Trip.associate=models=>{cov_2rhcgnjv45().f[2]++;cov_2rhcgnjv45().s[4]++;// Relationship with User
Trip.belongsTo(models.User,{foreignKey:"userId",as:"user"});// Relationship with Accommodation
cov_2rhcgnjv45().s[5]++;Trip.belongsTo(models.Accommodation,{foreignKey:"accommodationId",as:"accommodation"});};cov_2rhcgnjv45().s[6]++;return Trip;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiVHJpcCIsImFzc29jaWF0ZSIsIm1vZGVscyIsImluaXQiLCJ1c2VySWQiLCJJTlRFR0VSIiwibmFtZSIsIlNUUklORyIsInBhc3Nwb3J0IiwiZ2VuZGVyIiwibWFuYWdlciIsImZyb20iLCJ0byIsImRhdGVGb3JHb2luZyIsIkRBVEUiLCJkYXRlRm9yUmV0dXJuIiwicmVhc29uIiwiVEVYVCIsImFjY29tbW9kYXRpb25JZCIsInN0YXR1cyIsImNvbW1lbnQiLCJtb2RlbE5hbWUiLCJiZWxvbmdzVG8iLCJVc2VyIiwiZm9yZWlnbktleSIsImFzIiwiQWNjb21tb2RhdGlvbiJdLCJzb3VyY2VSb290IjoiTjpcXFBlcnNvbmFsIFByb2plY3RzXFx3b3JrLXByb2plY3RzXFxlcmljLW5vbWFkXFxtb2RlbHNcXCIsInNvdXJjZXMiOlsidHJpcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNvbnN0IHtcclxuICBNb2RlbFxyXG59ID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgVHJpcCBleHRlbmRzIE1vZGVsIHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIG1ldGhvZCBmb3IgZGVmaW5pbmcgYXNzb2NpYXRpb25zLlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IGEgcGFydCBvZiBTZXF1ZWxpemUgbGlmZWN5Y2xlLlxyXG4gICAgICogVGhlIGBtb2RlbHMvaW5kZXhgIGZpbGUgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3NvY2lhdGUobW9kZWxzKSB7XHJcbiAgICAgIC8vIGRlZmluZSBhc3NvY2lhdGlvbiBoZXJlXHJcbiAgICB9XHJcbiAgfVxyXG4gIFRyaXAuaW5pdCh7XHJcbiAgICB1c2VySWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgbmFtZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHBhc3Nwb3J0OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZ2VuZGVyOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgbWFuYWdlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGZyb206IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICB0bzogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGRhdGVGb3JHb2luZzogRGF0YVR5cGVzLkRBVEUsXHJcbiAgICBkYXRlRm9yUmV0dXJuOiBEYXRhVHlwZXMuREFURSxcclxuICAgIHJlYXNvbjogRGF0YVR5cGVzLlRFWFQsXHJcbiAgICBhY2NvbW1vZGF0aW9uSWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgc3RhdHVzOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgY29tbWVudDogRGF0YVR5cGVzLlRFWFRcclxuICB9LCB7XHJcbiAgICBzZXF1ZWxpemUsXHJcbiAgICBtb2RlbE5hbWU6ICdUcmlwJyxcclxuICB9KTtcclxuXHJcbiAgVHJpcC5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XHJcbiAgICAvLyBSZWxhdGlvbnNoaXAgd2l0aCBVc2VyXHJcbiAgICBUcmlwLmJlbG9uZ3NUbyhtb2RlbHMuVXNlciwge1xyXG4gICAgICBmb3JlaWduS2V5OiBcInVzZXJJZFwiLFxyXG4gICAgICBhczogXCJ1c2VyXCIsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBSZWxhdGlvbnNoaXAgd2l0aCBBY2NvbW1vZGF0aW9uXHJcbiAgICBUcmlwLmJlbG9uZ3NUbyhtb2RlbHMuQWNjb21tb2RhdGlvbiwge1xyXG4gICAgICBmb3JlaWduS2V5OiBcImFjY29tbW9kYXRpb25JZFwiLFxyXG4gICAgICBhczogXCJhY2NvbW1vZGF0aW9uXCIsXHJcbiAgICB9KTtcclxuICB9O1xyXG4gIFxyXG4gIHJldHVybiBUcmlwO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWixNQUFNO0VBQ0pBO0FBQ0YsQ0FBQyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3hCQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxTQUFTLEVBQUVDLFNBQVMsS0FBSztFQUN6QyxNQUFNQyxJQUFJLFNBQVNOLEtBQUssQ0FBQztJQUN2QjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0lBQ0ksT0FBT08sU0FBU0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ3ZCO0lBQUE7RUFFSjtFQUNBRixJQUFJLENBQUNHLElBQUksQ0FBQztJQUNSQyxNQUFNLEVBQUVMLFNBQVMsQ0FBQ00sT0FBTztJQUN6QkMsSUFBSSxFQUFFUCxTQUFTLENBQUNRLE1BQU07SUFDdEJDLFFBQVEsRUFBRVQsU0FBUyxDQUFDUSxNQUFNO0lBQzFCRSxNQUFNLEVBQUVWLFNBQVMsQ0FBQ1EsTUFBTTtJQUN4QkcsT0FBTyxFQUFFWCxTQUFTLENBQUNRLE1BQU07SUFDekJJLElBQUksRUFBRVosU0FBUyxDQUFDUSxNQUFNO0lBQ3RCSyxFQUFFLEVBQUViLFNBQVMsQ0FBQ1EsTUFBTTtJQUNwQk0sWUFBWSxFQUFFZCxTQUFTLENBQUNlLElBQUk7SUFDNUJDLGFBQWEsRUFBRWhCLFNBQVMsQ0FBQ2UsSUFBSTtJQUM3QkUsTUFBTSxFQUFFakIsU0FBUyxDQUFDa0IsSUFBSTtJQUN0QkMsZUFBZSxFQUFFbkIsU0FBUyxDQUFDTSxPQUFPO0lBQ2xDYyxNQUFNLEVBQUVwQixTQUFTLENBQUNRLE1BQU07SUFDeEJhLE9BQU8sRUFBRXJCLFNBQVMsQ0FBQ2tCO0VBQ3JCLENBQUMsRUFBRTtJQUNEbkIsU0FBUztJQUNUdUIsU0FBUyxFQUFFO0VBQ2IsQ0FBQyxDQUFDO0VBRUZyQixJQUFJLENBQUNDLFNBQVMsR0FBSUMsTUFBTSxJQUFLO0lBQzNCO0lBQ0FGLElBQUksQ0FBQ3NCLFNBQVMsQ0FBQ3BCLE1BQU0sQ0FBQ3FCLElBQUksRUFBRTtNQUMxQkMsVUFBVSxFQUFFLFFBQVE7TUFDcEJDLEVBQUUsRUFBRTtJQUNOLENBQUMsQ0FBQzs7SUFFRjtJQUNBekIsSUFBSSxDQUFDc0IsU0FBUyxDQUFDcEIsTUFBTSxDQUFDd0IsYUFBYSxFQUFFO01BQ25DRixVQUFVLEVBQUUsaUJBQWlCO01BQzdCQyxFQUFFLEVBQUU7SUFDTixDQUFDLENBQUM7RUFDSixDQUFDO0VBRUQsT0FBT3pCLElBQUk7QUFDYixDQUFDIiwiaWdub3JlTGlzdCI6W119
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnJoY2duanY0NSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwibmFtZXMiLCJzb3VyY2VSb290Iiwic291cmNlcyIsInNvdXJjZXNDb250ZW50IiwibWFwcGluZ3MiLCJpZ25vcmVMaXN0IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJUcmlwIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiaW5pdCIsInVzZXJJZCIsIklOVEVHRVIiLCJTVFJJTkciLCJwYXNzcG9ydCIsImdlbmRlciIsIm1hbmFnZXIiLCJmcm9tIiwidG8iLCJkYXRlRm9yR29pbmciLCJEQVRFIiwiZGF0ZUZvclJldHVybiIsInJlYXNvbiIsIlRFWFQiLCJhY2NvbW1vZGF0aW9uSWQiLCJzdGF0dXMiLCJjb21tZW50IiwibW9kZWxOYW1lIiwiYmVsb25nc1RvIiwiVXNlciIsImZvcmVpZ25LZXkiLCJhcyIsIkFjY29tbW9kYXRpb24iXSwic291cmNlcyI6WyJOOlxcUGVyc29uYWwgUHJvamVjdHNcXHdvcmstcHJvamVjdHNcXGVyaWMtbm9tYWRcXG1vZGVsc1xcL3RyaXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5jb25zdCB7XHJcbiAgTW9kZWxcclxufSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IChzZXF1ZWxpemUsIERhdGFUeXBlcykgPT4ge1xyXG4gIGNsYXNzIFRyaXAgZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgU2VxdWVsaXplIGxpZmVjeWNsZS5cclxuICAgICAqIFRoZSBgbW9kZWxzL2luZGV4YCBmaWxlIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXNzb2NpYXRlKG1vZGVscykge1xyXG4gICAgICAvLyBkZWZpbmUgYXNzb2NpYXRpb24gaGVyZVxyXG4gICAgfVxyXG4gIH1cclxuICBUcmlwLmluaXQoe1xyXG4gICAgdXNlcklkOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIG5hbWU6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBwYXNzcG9ydDogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGdlbmRlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIG1hbmFnZXI6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBmcm9tOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgdG86IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBkYXRlRm9yR29pbmc6IERhdGFUeXBlcy5EQVRFLFxyXG4gICAgZGF0ZUZvclJldHVybjogRGF0YVR5cGVzLkRBVEUsXHJcbiAgICByZWFzb246IERhdGFUeXBlcy5URVhULFxyXG4gICAgYWNjb21tb2RhdGlvbklkOiBEYXRhVHlwZXMuSU5URUdFUixcclxuICAgIHN0YXR1czogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGNvbW1lbnQ6IERhdGFUeXBlcy5URVhUXHJcbiAgfSwge1xyXG4gICAgc2VxdWVsaXplLFxyXG4gICAgbW9kZWxOYW1lOiAnVHJpcCcsXHJcbiAgfSk7XHJcblxyXG4gIFRyaXAuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xyXG4gICAgLy8gUmVsYXRpb25zaGlwIHdpdGggVXNlclxyXG4gICAgVHJpcC5iZWxvbmdzVG8obW9kZWxzLlVzZXIsIHtcclxuICAgICAgZm9yZWlnbktleTogXCJ1c2VySWRcIixcclxuICAgICAgYXM6IFwidXNlclwiLFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmVsYXRpb25zaGlwIHdpdGggQWNjb21tb2RhdGlvblxyXG4gICAgVHJpcC5iZWxvbmdzVG8obW9kZWxzLkFjY29tbW9kYXRpb24sIHtcclxuICAgICAgZm9yZWlnbktleTogXCJhY2NvbW1vZGF0aW9uSWRcIixcclxuICAgICAgYXM6IFwiYWNjb21tb2RhdGlvblwiLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuICBcclxuICByZXR1cm4gVHJpcDtcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksVUFBQUEsZUFBQSxNQUFBQyxJQUFBLHlFQUFBQyxJQUFBLGdEQUFBQyxNQUFBLEtBQUFDLFFBQUEsc0JBQUFDLEdBQUEsb0JBQUFDLFlBQUEsRUFBQUwsSUFBQSxxRUFBQU0sWUFBQSxPQUFBQyxLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsR0FBQUMsTUFBQSxXQUFBRixLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxVQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFB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