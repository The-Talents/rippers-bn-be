'use strict';function cov_2jdeo5o12u(){var path="M:\\Production\\eric-nomad\\models\\trip.js";var hash="a414ed2abbe34fa326cd47a8d7ad10da44e86265";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"M:\\Production\\eric-nomad\\models\\trip.js",statementMap:{"0":{start:{line:5,column:4},end:{line:5,column:24}},"1":{start:{line:6,column:0},end:{line:49,column:2}},"2":{start:{line:17,column:2},end:{line:34,column:5}},"3":{start:{line:35,column:2},end:{line:47,column:4}},"4":{start:{line:37,column:4},end:{line:40,column:7}},"5":{start:{line:43,column:4},end:{line:46,column:7}},"6":{start:{line:48,column:2},end:{line:48,column:14}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:17},end:{line:6,column:18}},loc:{start:{line:6,column:43},end:{line:49,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:29},end:{line:15,column:5}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:35,column:19},end:{line:35,column:20}},loc:{start:{line:35,column:29},end:{line:47,column:3}},line:35}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0,"1":0,"2":0},b:{},inputSourceMap:{version:3,names:["Model","require","module","exports","sequelize","DataTypes","Trip","associate","models","init","userId","INTEGER","name","STRING","passport","gender","manager","from","to","dateForGoing","DATE","dateForReturn","reason","TEXT","accommodationId","status","comment","modelName","belongsTo","User","foreignKey","as","Accommodation"],sourceRoot:"M:\\Production\\eric-nomad\\models\\",sources:["trip.js"],sourcesContent:["'use strict';\r\nconst {\r\n  Model\r\n} = require('sequelize');\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  class Trip extends Model {\r\n    /**\r\n     * Helper method for defining associations.\r\n     * This method is not a part of Sequelize lifecycle.\r\n     * The `models/index` file will call this method automatically.\r\n     */\r\n    static associate(models) {\r\n      // define association here\r\n    }\r\n  }\r\n  Trip.init({\r\n    userId: DataTypes.INTEGER,\r\n    name: DataTypes.STRING,\r\n    passport: DataTypes.STRING,\r\n    gender: DataTypes.STRING,\r\n    manager: DataTypes.STRING,\r\n    from: DataTypes.STRING,\r\n    to: DataTypes.STRING,\r\n    dateForGoing: DataTypes.DATE,\r\n    dateForReturn: DataTypes.DATE,\r\n    reason: DataTypes.TEXT,\r\n    accommodationId: DataTypes.INTEGER,\r\n    status: DataTypes.STRING,\r\n    comment: DataTypes.TEXT\r\n  }, {\r\n    sequelize,\r\n    modelName: 'Trip',\r\n  });\r\n\r\n  Trip.associate = (models) => {\r\n    // Relationship with User\r\n    Trip.belongsTo(models.User, {\r\n      foreignKey: \"userId\",\r\n      as: \"user\",\r\n    });\r\n\r\n    // Relationship with Accommodation\r\n    Trip.belongsTo(models.Accommodation, {\r\n      foreignKey: \"accommodationId\",\r\n      as: \"accommodation\",\r\n    });\r\n  };\r\n  \r\n  return Trip;\r\n};"],mappings:"AAAA,YAAY;;AACZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxBC,MAAM,CAACC,OAAO,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC,MAAMC,IAAI,SAASN,KAAK,CAAC;IACvB;AACJ;AACA;AACA;AACA;IACI,OAAOO,SAASA,CAACC,MAAM,EAAE;MACvB;IAAA;EAEJ;EACAF,IAAI,CAACG,IAAI,CAAC;IACRC,MAAM,EAAEL,SAAS,CAACM,OAAO;IACzBC,IAAI,EAAEP,SAAS,CAACQ,MAAM;IACtBC,QAAQ,EAAET,SAAS,CAACQ,MAAM;IAC1BE,MAAM,EAAEV,SAAS,CAACQ,MAAM;IACxBG,OAAO,EAAEX,SAAS,CAACQ,MAAM;IACzBI,IAAI,EAAEZ,SAAS,CAACQ,MAAM;IACtBK,EAAE,EAAEb,SAAS,CAACQ,MAAM;IACpBM,YAAY,EAAEd,SAAS,CAACe,IAAI;IAC5BC,aAAa,EAAEhB,SAAS,CAACe,IAAI;IAC7BE,MAAM,EAAEjB,SAAS,CAACkB,IAAI;IACtBC,eAAe,EAAEnB,SAAS,CAACM,OAAO;IAClCc,MAAM,EAAEpB,SAAS,CAACQ,MAAM;IACxBa,OAAO,EAAErB,SAAS,CAACkB;EACrB,CAAC,EAAE;IACDnB,SAAS;IACTuB,SAAS,EAAE;EACb,CAAC,CAAC;EAEFrB,IAAI,CAACC,SAAS,GAAIC,MAAM,IAAK;IAC3B;IACAF,IAAI,CAACsB,SAAS,CAACpB,MAAM,CAACqB,IAAI,EAAE;MAC1BC,UAAU,EAAE,QAAQ;MACpBC,EAAE,EAAE;IACN,CAAC,CAAC;;IAEF;IACAzB,IAAI,CAACsB,SAAS,CAACpB,MAAM,CAACwB,aAAa,EAAE;MACnCF,UAAU,EAAE,iBAAiB;MAC7BC,EAAE,EAAE;IACN,CAAC,CAAC;EACJ,CAAC;EAED,OAAOzB,IAAI;AACb,CAAC",ignoreList:[]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a414ed2abbe34fa326cd47a8d7ad10da44e86265"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2jdeo5o12u=function(){return actualCoverage;};}return actualCoverage;}cov_2jdeo5o12u();const{Model}=(cov_2jdeo5o12u().s[0]++,require('sequelize'));cov_2jdeo5o12u().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_2jdeo5o12u().f[0]++;class Trip extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_2jdeo5o12u().f[1]++;}// define association here
}cov_2jdeo5o12u().s[2]++;Trip.init({userId:DataTypes.INTEGER,name:DataTypes.STRING,passport:DataTypes.STRING,gender:DataTypes.STRING,manager:DataTypes.STRING,from:DataTypes.STRING,to:DataTypes.STRING,dateForGoing:DataTypes.DATE,dateForReturn:DataTypes.DATE,reason:DataTypes.TEXT,accommodationId:DataTypes.INTEGER,status:DataTypes.STRING,comment:DataTypes.TEXT},{sequelize,modelName:'Trip'});cov_2jdeo5o12u().s[3]++;Trip.associate=models=>{cov_2jdeo5o12u().f[2]++;cov_2jdeo5o12u().s[4]++;// Relationship with User
Trip.belongsTo(models.User,{foreignKey:"userId",as:"user"});// Relationship with Accommodation
cov_2jdeo5o12u().s[5]++;Trip.belongsTo(models.Accommodation,{foreignKey:"accommodationId",as:"accommodation"});};cov_2jdeo5o12u().s[6]++;return Trip;};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiVHJpcCIsImFzc29jaWF0ZSIsIm1vZGVscyIsImluaXQiLCJ1c2VySWQiLCJJTlRFR0VSIiwibmFtZSIsIlNUUklORyIsInBhc3Nwb3J0IiwiZ2VuZGVyIiwibWFuYWdlciIsImZyb20iLCJ0byIsImRhdGVGb3JHb2luZyIsIkRBVEUiLCJkYXRlRm9yUmV0dXJuIiwicmVhc29uIiwiVEVYVCIsImFjY29tbW9kYXRpb25JZCIsInN0YXR1cyIsImNvbW1lbnQiLCJtb2RlbE5hbWUiLCJiZWxvbmdzVG8iLCJVc2VyIiwiZm9yZWlnbktleSIsImFzIiwiQWNjb21tb2RhdGlvbiJdLCJzb3VyY2VSb290IjoiTTpcXFByb2R1Y3Rpb25cXGVyaWMtbm9tYWRcXG1vZGVsc1xcIiwic291cmNlcyI6WyJ0cmlwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuY29uc3Qge1xyXG4gIE1vZGVsXHJcbn0gPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSAoc2VxdWVsaXplLCBEYXRhVHlwZXMpID0+IHtcclxuICBjbGFzcyBUcmlwIGV4dGVuZHMgTW9kZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciBkZWZpbmluZyBhc3NvY2lhdGlvbnMuXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXHJcbiAgICAgKiBUaGUgYG1vZGVscy9pbmRleGAgZmlsZSB3aWxsIGNhbGwgdGhpcyBtZXRob2QgYXV0b21hdGljYWxseS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFzc29jaWF0ZShtb2RlbHMpIHtcclxuICAgICAgLy8gZGVmaW5lIGFzc29jaWF0aW9uIGhlcmVcclxuICAgIH1cclxuICB9XHJcbiAgVHJpcC5pbml0KHtcclxuICAgIHVzZXJJZDogRGF0YVR5cGVzLklOVEVHRVIsXHJcbiAgICBuYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgcGFzc3BvcnQ6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBnZW5kZXI6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBtYW5hZ2VyOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZnJvbTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHRvOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZGF0ZUZvckdvaW5nOiBEYXRhVHlwZXMuREFURSxcclxuICAgIGRhdGVGb3JSZXR1cm46IERhdGFUeXBlcy5EQVRFLFxyXG4gICAgcmVhc29uOiBEYXRhVHlwZXMuVEVYVCxcclxuICAgIGFjY29tbW9kYXRpb25JZDogRGF0YVR5cGVzLklOVEVHRVIsXHJcbiAgICBzdGF0dXM6IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICBjb21tZW50OiBEYXRhVHlwZXMuVEVYVFxyXG4gIH0sIHtcclxuICAgIHNlcXVlbGl6ZSxcclxuICAgIG1vZGVsTmFtZTogJ1RyaXAnLFxyXG4gIH0pO1xyXG5cclxuICBUcmlwLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcclxuICAgIC8vIFJlbGF0aW9uc2hpcCB3aXRoIFVzZXJcclxuICAgIFRyaXAuYmVsb25nc1RvKG1vZGVscy5Vc2VyLCB7XHJcbiAgICAgIGZvcmVpZ25LZXk6IFwidXNlcklkXCIsXHJcbiAgICAgIGFzOiBcInVzZXJcIixcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFJlbGF0aW9uc2hpcCB3aXRoIEFjY29tbW9kYXRpb25cclxuICAgIFRyaXAuYmVsb25nc1RvKG1vZGVscy5BY2NvbW1vZGF0aW9uLCB7XHJcbiAgICAgIGZvcmVpZ25LZXk6IFwiYWNjb21tb2RhdGlvbklkXCIsXHJcbiAgICAgIGFzOiBcImFjY29tbW9kYXRpb25cIixcclxuICAgIH0pO1xyXG4gIH07XHJcbiAgXHJcbiAgcmV0dXJuIFRyaXA7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaLE1BQU07RUFDSkE7QUFDRixDQUFDLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDeEJDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLENBQUNDLFNBQVMsRUFBRUMsU0FBUyxLQUFLO0VBQ3pDLE1BQU1DLElBQUksU0FBU04sS0FBSyxDQUFDO0lBQ3ZCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7SUFDSSxPQUFPTyxTQUFTQSxDQUFDQyxNQUFNLEVBQUU7TUFDdkI7SUFBQTtFQUVKO0VBQ0FGLElBQUksQ0FBQ0csSUFBSSxDQUFDO0lBQ1JDLE1BQU0sRUFBRUwsU0FBUyxDQUFDTSxPQUFPO0lBQ3pCQyxJQUFJLEVBQUVQLFNBQVMsQ0FBQ1EsTUFBTTtJQUN0QkMsUUFBUSxFQUFFVCxTQUFTLENBQUNRLE1BQU07SUFDMUJFLE1BQU0sRUFBRVYsU0FBUyxDQUFDUSxNQUFNO0lBQ3hCRyxPQUFPLEVBQUVYLFNBQVMsQ0FBQ1EsTUFBTTtJQUN6QkksSUFBSSxFQUFFWixTQUFTLENBQUNRLE1BQU07SUFDdEJLLEVBQUUsRUFBRWIsU0FBUyxDQUFDUSxNQUFNO0lBQ3BCTSxZQUFZLEVBQUVkLFNBQVMsQ0FBQ2UsSUFBSTtJQUM1QkMsYUFBYSxFQUFFaEIsU0FBUyxDQUFDZSxJQUFJO0lBQzdCRSxNQUFNLEVBQUVqQixTQUFTLENBQUNrQixJQUFJO0lBQ3RCQyxlQUFlLEVBQUVuQixTQUFTLENBQUNNLE9BQU87SUFDbENjLE1BQU0sRUFBRXBCLFNBQVMsQ0FBQ1EsTUFBTTtJQUN4QmEsT0FBTyxFQUFFckIsU0FBUyxDQUFDa0I7RUFDckIsQ0FBQyxFQUFFO0lBQ0RuQixTQUFTO0lBQ1R1QixTQUFTLEVBQUU7RUFDYixDQUFDLENBQUM7RUFFRnJCLElBQUksQ0FBQ0MsU0FBUyxHQUFJQyxNQUFNLElBQUs7SUFDM0I7SUFDQUYsSUFBSSxDQUFDc0IsU0FBUyxDQUFDcEIsTUFBTSxDQUFDcUIsSUFBSSxFQUFFO01BQzFCQyxVQUFVLEVBQUUsUUFBUTtNQUNwQkMsRUFBRSxFQUFFO0lBQ04sQ0FBQyxDQUFDOztJQUVGO0lBQ0F6QixJQUFJLENBQUNzQixTQUFTLENBQUNwQixNQUFNLENBQUN3QixhQUFhLEVBQUU7TUFDbkNGLFVBQVUsRUFBRSxpQkFBaUI7TUFDN0JDLEVBQUUsRUFBRTtJQUNOLENBQUMsQ0FBQztFQUNKLENBQUM7RUFFRCxPQUFPekIsSUFBSTtBQUNiLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmpkZW81bzEydSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwibmFtZXMiLCJzb3VyY2VSb290Iiwic291cmNlcyIsInNvdXJjZXNDb250ZW50IiwibWFwcGluZ3MiLCJpZ25vcmVMaXN0IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJUcmlwIiwiYXNzb2NpYXRlIiwibW9kZWxzIiwiaW5pdCIsInVzZXJJZCIsIklOVEVHRVIiLCJTVFJJTkciLCJwYXNzcG9ydCIsImdlbmRlciIsIm1hbmFnZXIiLCJmcm9tIiwidG8iLCJkYXRlRm9yR29pbmciLCJEQVRFIiwiZGF0ZUZvclJldHVybiIsInJlYXNvbiIsIlRFWFQiLCJhY2NvbW1vZGF0aW9uSWQiLCJzdGF0dXMiLCJjb21tZW50IiwibW9kZWxOYW1lIiwiYmVsb25nc1RvIiwiVXNlciIsImZvcmVpZ25LZXkiLCJhcyIsIkFjY29tbW9kYXRpb24iXSwic291cmNlcyI6WyJNOlxcUHJvZHVjdGlvblxcZXJpYy1ub21hZFxcbW9kZWxzXFwvdHJpcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbmNvbnN0IHtcclxuICBNb2RlbFxyXG59ID0gcmVxdWlyZSgnc2VxdWVsaXplJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcbiAgY2xhc3MgVHJpcCBleHRlbmRzIE1vZGVsIHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIG1ldGhvZCBmb3IgZGVmaW5pbmcgYXNzb2NpYXRpb25zLlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IGEgcGFydCBvZiBTZXF1ZWxpemUgbGlmZWN5Y2xlLlxyXG4gICAgICogVGhlIGBtb2RlbHMvaW5kZXhgIGZpbGUgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3NvY2lhdGUobW9kZWxzKSB7XHJcbiAgICAgIC8vIGRlZmluZSBhc3NvY2lhdGlvbiBoZXJlXHJcbiAgICB9XHJcbiAgfVxyXG4gIFRyaXAuaW5pdCh7XHJcbiAgICB1c2VySWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgbmFtZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIHBhc3Nwb3J0OiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgZ2VuZGVyOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgbWFuYWdlcjogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGZyb206IERhdGFUeXBlcy5TVFJJTkcsXHJcbiAgICB0bzogRGF0YVR5cGVzLlNUUklORyxcclxuICAgIGRhdGVGb3JHb2luZzogRGF0YVR5cGVzLkRBVEUsXHJcbiAgICBkYXRlRm9yUmV0dXJuOiBEYXRhVHlwZXMuREFURSxcclxuICAgIHJlYXNvbjogRGF0YVR5cGVzLlRFWFQsXHJcbiAgICBhY2NvbW1vZGF0aW9uSWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgc3RhdHVzOiBEYXRhVHlwZXMuU1RSSU5HLFxyXG4gICAgY29tbWVudDogRGF0YVR5cGVzLlRFWFRcclxuICB9LCB7XHJcbiAgICBzZXF1ZWxpemUsXHJcbiAgICBtb2RlbE5hbWU6ICdUcmlwJyxcclxuICB9KTtcclxuXHJcbiAgVHJpcC5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XHJcbiAgICAvLyBSZWxhdGlvbnNoaXAgd2l0aCBVc2VyXHJcbiAgICBUcmlwLmJlbG9uZ3NUbyhtb2RlbHMuVXNlciwge1xyXG4gICAgICBmb3JlaWduS2V5OiBcInVzZXJJZFwiLFxyXG4gICAgICBhczogXCJ1c2VyXCIsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBSZWxhdGlvbnNoaXAgd2l0aCBBY2NvbW1vZGF0aW9uXHJcbiAgICBUcmlwLmJlbG9uZ3NUbyhtb2RlbHMuQWNjb21tb2RhdGlvbiwge1xyXG4gICAgICBmb3JlaWduS2V5OiBcImFjY29tbW9kYXRpb25JZFwiLFxyXG4gICAgICBhczogXCJhY2NvbW1vZGF0aW9uXCIsXHJcbiAgICB9KTtcclxuICB9O1xyXG4gIFxyXG4gIHJldHVybiBUcmlwO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxVQUFBQSxlQUFBLE1BQUFDLElBQUEsbURBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLCtDQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFFLEtBQUEsT0FBQUMsSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsR0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsR0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsU0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsTUFBQU8sU0FBQSxJQUFBQyxDQUFBLDZDQUFBQyxDQUFBLHFCQUFBQyxDQUFBLElBQUFDLGNBQUEsRUFBQUMsT0FBQSxHQUFBQyxLQUFBLDRVQUFBQyxVQUFBLHdDQUFBQyxPQUFBLGFBQUFDLGNBQUEsdzBDQUFBQyxRQUFBLHNpQ0FBQUMsVUFBQSxLQUFBQyxlQUFBLDRDQUFBMUIsSUFBQSxpREFBQTJCLFFBQUEsQ0FBQTFCLE1BQUEsQ0FBQUUsR0FBQSxJQUFBRixNQUFBLENBQUFFLEdBQUEsVUFBQXdCLFFBQUEsQ0FBQTVCLElBQUEsR0FBQTRCLFFBQUEsQ0FBQTVCLElBQUEsRUFBQUMsSUFBQSxHQUFBQSxJQUFBLEVBQUEyQixRQUFBLENBQUE1QixJQUFBLEVBQUFLLFlBQUEsTUFBQXdCLGNBQUEsQ0FBQUQsUUFBQSxDQUFBNUIsSUFBQSxHQWNWO0FBQUFELGNBQUEsU0FBQUEsQ0FBQSxTQUFBOEIsY0FBQSxXQUFBQSxjQUFBLEVBQUE5QixjQUFBLEdBYkYsS0FBTSxDQUNKK0IsS0FDRixDQUFDLEVBQUEvQixjQUFBLEdBQUFpQixDQUFBLE1BQUdlLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBQWhDLGNBQUEsR0FBQWlCLENBQUEsTUFDeEJnQixNQUFNLENBQUNDLE9BQU8sQ0FBRyxDQUFDQyxTQUFTLENBQUVDLFNBQVMsR0FBSyxDQUFBcEMsY0FBQSxHQUFBa0IsQ0FBQSxNQUN6QyxLQUFNLENBQUFtQixJQUFJLFFBQVMsQ0FBQU4sS0FBTSxDQUN2QjtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQ0ksTUFBTyxDQUFBTyxTQUFTQSxDQUFDQyxNQUFNLENBQUUsQ0FBQXZDLGNBQUEsR0FBQWtCLENBQUEsTUFDdkI7QUFFSixDQUFBbEIsY0FBQSxHQUFBaUIsQ0FBQSxNQUNBb0IsSUFBSSxDQUFDRyxJQUFJLENBQUMsQ0FDUkMsTUFBTSxDQUFFTCxTQUFTLENBQUNNLE9BQU8sQ0FDekI3QixJQUFJLENBQUV1QixTQUFTLENBQUNPLE1BQU0sQ0FDdEJDLFFBQVEsQ0FBRVIsU0FBUyxDQUFDTyxNQUFNLENBQzFCRSxNQUFNLENBQUVULFNBQVMsQ0FBQ08sTUFBTSxDQUN4QkcsT0FBTyxDQUFFVixTQUFTLENBQUNPLE1BQU0sQ0FDekJJLElBQUksQ0FBRVgsU0FBUyxDQUFDTyxNQUFNLENBQ3RCSyxFQUFFLENBQUVaLFNBQVMsQ0FBQ08sTUFBTSxDQUNwQk0sWUFBWSxDQUFFYixTQUFTLENBQUNjLElBQUksQ0FDNUJDLGFBQWEsQ0FBRWYsU0FBUyxDQUFDYyxJQUFJLENBQzdCRSxNQUFNLENBQUVoQixTQUFTLENBQUNpQixJQUFJLENBQ3RCQyxlQUFlLENBQUVsQixTQUFTLENBQUNNLE9BQU8sQ0FDbENhLE1BQU0sQ0FBRW5CLFNBQVMsQ0FBQ08sTUFBTSxDQUN4QmEsT0FBTyxDQUFFcEIsU0FBUyxDQUFDaUIsSUFDckIsQ0FBQyxDQUFFLENBQ0RsQixTQUFTLENBQ1RzQixTQUFTLENBQUUsTUFDYixDQUFDLENBQUMsQ0FBQXpELGNBQUEsR0FBQWlCLENBQUEsTUFFRm9CLElBQUksQ0FBQ0MsU0FBUyxDQUFJQyxNQUFNLEVBQUssQ0FBQXZDLGNBQUEsR0FBQWtCLENBQUEsTUFBQWxCLGNBQUEsR0FBQWlCLENBQUEsTUFDM0I7QUFDQW9CLElBQUksQ0FBQ3FCLFNBQVMsQ0FBQ25CLE1BQU0sQ0FBQ29CLElBQUksQ0FBRSxDQUMxQkMsVUFBVSxDQUFFLFFBQVEsQ0FDcEJDLEVBQUUsQ0FBRSxNQUNOLENBQUMsQ0FBQyxDQUVGO0FBQUE3RCxjQUFBLEdBQUFpQixDQUFBLE1BQ0FvQixJQUFJLENBQUNxQixTQUFTLENBQUNuQixNQUFNLENBQUN1QixhQUFhLENBQUUsQ0FDbkNGLFVBQVUsQ0FBRSxpQkFBaUIsQ0FDN0JDLEVBQUUsQ0FBRSxlQUNOLENBQUMsQ0FBQyxDQUNKLENBQUMsQ0FBQTdELGNBQUEsR0FBQWlCLENBQUEsTUFFRCxNQUFPLENBQUFvQixJQUFJLENBQ2IsQ0FBQyxDIiwiaWdub3JlTGlzdCI6W119